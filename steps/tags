!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AFFINE_COMPONENTS	nnet3/convert_nnet2_to_nnet3.py	/^AFFINE_COMPONENTS = [c for c in NODE_NAMES if "Affine" in c]$/;"	v
AccWordStatsForUtterance	cleanup/internal/segment_ctm_edits.py	/^def AccWordStatsForUtterance(split_lines_of_utt,$/;"	f
AccumulateSegmentStats	cleanup/internal/segment_ctm_edits.py	/^def AccumulateSegmentStats(segment_list, text):$/;"	f
AddAffPnormLayer	nnet3/components.py	/^def AddAffPnormLayer(config_lines, name, input, pnorm_input_dim, pnorm_output_dim, ng_affine_options = " bias-stddev=0 ", norm_target_rms = 1.0):$/;"	f
AddAffRelNormLayer	nnet3/components.py	/^def AddAffRelNormLayer(config_lines, name, input, output_dim, ng_affine_options = " bias-stddev=0 ", norm_target_rms = 1.0, self_repair_scale = None, max_change_per_component = 0.75):$/;"	f
AddAffineLayer	nnet3/components.py	/^def AddAffineLayer(config_lines, name, input, output_dim, ng_affine_options = "", max_change_per_component = 0.75):$/;"	f
AddBLstmLayer	nnet3/components.py	/^def AddBLstmLayer(config_lines,$/;"	f
AddBlockAffineLayer	nnet3/components.py	/^def AddBlockAffineLayer(config_lines, name, input, output_dim, num_blocks):$/;"	f
AddCnnLayers	nnet3/tdnn/make_configs.py	/^def AddCnnLayers(config_lines, cnn_layer, cnn_bottleneck_dim, cepstral_lifter, config_dir, feat_dim, splice_indexes=[0], ivector_dim=0):$/;"	f
AddConvMaxpLayer	nnet3/tdnn/make_configs.py	/^def AddConvMaxpLayer(config_lines, name, input, args):$/;"	f
AddConvolutionLayer	nnet3/components.py	/^def AddConvolutionLayer(config_lines, name, input,$/;"	f
AddCount	cleanup/internal/make_one_biased_lm.py	/^    def AddCount(self, history, predicted_word, count):$/;"	m	class:NgramCounts
AddFinalLayer	nnet3/components.py	/^def AddFinalLayer(config_lines, input, output_dim,$/;"	f
AddFixedAffineLayer	nnet3/components.py	/^def AddFixedAffineLayer(config_lines, name, input, matrix_file):$/;"	f
AddInputLayer	nnet3/components.py	/^def AddInputLayer(config_lines, feat_dim, splice_indexes=[0], ivector_dim=0):$/;"	f
AddLdaLayer	nnet3/components.py	/^def AddLdaLayer(config_lines, name, input, lda_file):$/;"	f
AddLstmLayer	nnet3/components.py	/^def AddLstmLayer(config_lines,$/;"	f
AddMaxpoolingLayer	nnet3/components.py	/^def AddMaxpoolingLayer(config_lines, name, input,$/;"	f
AddNoOpLayer	nnet3/components.py	/^def AddNoOpLayer(config_lines, name, input):$/;"	f
AddOutputLayer	nnet3/components.py	/^def AddOutputLayer(config_lines, input, label_delay = None, suffix=None, objective_type = "linear"):$/;"	f
AddPermuteLayer	nnet3/components.py	/^def AddPermuteLayer(config_lines, name, input, column_map):$/;"	f
AddRawCountsFromLine	cleanup/internal/make_one_biased_lm.py	/^    def AddRawCountsFromLine(self, line):$/;"	m	class:NgramCounts
AddRawCountsFromStandardInput	cleanup/internal/make_one_biased_lm.py	/^    def AddRawCountsFromStandardInput(self):$/;"	m	class:NgramCounts
AddSigmoidLayer	nnet3/components.py	/^def AddSigmoidLayer(config_lines, name, input, self_repair_scale = None):$/;"	f
AddSoftmaxLayer	nnet3/components.py	/^def AddSoftmaxLayer(config_lines, name, input):$/;"	f
AddTopWords	cleanup/internal/make_one_biased_lm.py	/^    def AddTopWords(self, top_words_file):$/;"	m	class:NgramCounts
ApplyBackoff	cleanup/internal/make_one_biased_lm.py	/^    def ApplyBackoff(self, D):$/;"	m	class:NgramCounts
ApplyLexiconEdits	dict/apply_lexicon_edits.py	/^def ApplyLexiconEdits(lexicon, lexicon_edits_file_handle):$/;"	f
ChannelAverageLayer	libs/nnet3/xconfig/convolution.py	/^class ChannelAverageLayer(XconfigLayerBase):$/;"	c
CheckArgs	cleanup/internal/get_pron_stats.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/apply_lexicon_edits.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/get_pron_stats.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/internal/get_subsegments.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/internal/prune_pron_candidates.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/internal/sum_arc_info.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/merge_learned_lexicons.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/prons_to_lexicon.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/prune_pron_candidates.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/select_prons_bayesian.py	/^def CheckArgs(args):$/;"	f
CheckArgs	dict/select_prons_greedy.py	/^def CheckArgs(args):$/;"	f
CheckArgs	nnet3/lstm/make_configs.py	/^def CheckArgs(args):$/;"	f
CheckArgs	nnet3/tdnn/make_configs.py	/^def CheckArgs(args):$/;"	f
CheckFiles	cleanup/combine_short_segments.py	/^def CheckFiles(input_data_dir):$/;"	f
CombineSegments	cleanup/combine_short_segments.py	/^def CombineSegments(input_dir, output_dir, minimum_duration):$/;"	f
CommonParser	libs/nnet3/train/common.py	/^class CommonParser(object):$/;"	c
CompletelyDiscountLowCountStates	cleanup/internal/make_one_biased_lm.py	/^    def CompletelyDiscountLowCountStates(self, min_count):$/;"	m	class:NgramCounts
ComputePosteriors	dict/select_prons_bayesian.py	/^def ComputePosteriors(args, stats, ref_lexicon, g2p_lexicon, phonetic_decoding_lexicon, prior_counts):$/;"	f
ComputePriorCounts	dict/select_prons_bayesian.py	/^def ComputePriorCounts(args, counts, ref_lexicon, g2p_lexicon, phonetic_decoding_lexicon):$/;"	f
ComputeSegmentCores	cleanup/internal/segment_ctm_edits.py	/^def ComputeSegmentCores(split_lines_of_utt):$/;"	f
Config	tfrnnlm/lstm.py	/^class Config(object):$/;"	c
Config	tfrnnlm/lstm_fast.py	/^class Config(object):$/;"	c
Config	tfrnnlm/vanilla_rnnlm.py	/^class Config(object):$/;"	c
ContainsAtLeastOneScoredNonOovWord	cleanup/internal/segment_ctm_edits.py	/^    def ContainsAtLeastOneScoredNonOovWord(self):$/;"	m	class:Segment
ConvertWordCountsToProbs	dict/prons_to_lexicon.py	/^def ConvertWordCountsToProbs(args, lexicon, word_count):$/;"	f
ConvertWordProbsToLexicon	dict/prons_to_lexicon.py	/^def ConvertWordProbsToLexicon(word_probs):$/;"	f
DebugInfo	cleanup/internal/segment_ctm_edits.py	/^    def DebugInfo(self):$/;"	m	class:Segment
Descriptor	libs/nnet3/xconfig/utils.py	/^class Descriptor(object):$/;"	c
DescriptorSegmentToDot	nnet3/dot/nnet3_to_dot.py	/^def DescriptorSegmentToDot(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
EndTime	cleanup/internal/segment_ctm_edits.py	/^    def EndTime(self):$/;"	m	class:Segment
ExtractCommandName	nnet3/report/summarize_compute_debug_timing.py	/^def ExtractCommandName(command_string):$/;"	f
FLAGS	tfrnnlm/lstm.py	/^FLAGS = flags.FLAGS$/;"	v
FLAGS	tfrnnlm/lstm_fast.py	/^FLAGS = flags.FLAGS$/;"	v
FLAGS	tfrnnlm/vanilla_rnnlm.py	/^FLAGS = flags.FLAGS$/;"	v
FilterPhoneticDecodingLexicon	dict/select_prons_bayesian.py	/^def FilterPhoneticDecodingLexicon(args, phonetic_decoding_lexicon, stats):$/;"	f
FilterPhoneticDecodingLexicon	dict/select_prons_greedy.py	/^def FilterPhoneticDecodingLexicon(args, pd_lexicon):$/;"	f
FindOpenParanthesisPosition	nnet3/report/summarize_compute_debug_timing.py	/^def FindOpenParanthesisPosition(string):$/;"	f
FloatToString	cleanup/internal/get_ctm_edits.py	/^def FloatToString(f):$/;"	f
FloatToString	cleanup/internal/segment_ctm_edits.py	/^def FloatToString(f):$/;"	f
GetArgs	cleanup/combine_short_segments.py	/^def GetArgs():$/;"	f
GetArgs	cleanup/internal/get_pron_stats.py	/^def GetArgs():$/;"	f
GetArgs	dict/apply_lexicon_edits.py	/^def GetArgs():$/;"	f
GetArgs	dict/get_pron_stats.py	/^def GetArgs():$/;"	f
GetArgs	dict/internal/get_subsegments.py	/^def GetArgs():$/;"	f
GetArgs	dict/internal/prune_pron_candidates.py	/^def GetArgs():$/;"	f
GetArgs	dict/internal/sum_arc_info.py	/^def GetArgs():$/;"	f
GetArgs	dict/merge_learned_lexicons.py	/^def GetArgs():$/;"	f
GetArgs	dict/prons_to_lexicon.py	/^def GetArgs():$/;"	f
GetArgs	dict/prune_pron_candidates.py	/^def GetArgs():$/;"	f
GetArgs	dict/select_prons_bayesian.py	/^def GetArgs():$/;"	f
GetArgs	dict/select_prons_greedy.py	/^def GetArgs():$/;"	f
GetArgs	nnet3/convert_nnet2_to_nnet3.py	/^def GetArgs():$/;"	f
GetArgs	nnet3/lstm/make_configs.py	/^def GetArgs():$/;"	f
GetArgs	nnet3/report/summarize_compute_debug_timing.py	/^def GetArgs():$/;"	f
GetArgs	nnet3/tdnn/make_configs.py	/^def GetArgs():$/;"	f
GetCombinedUttIndexRange	cleanup/combine_short_segments.py	/^def GetCombinedUttIndexRange(utt_index, utts, utt_durs, minimum_duration):$/;"	f
GetDotNodeName	nnet3/dot/nnet3_to_dot.py	/^def GetDotNodeName(name_string, is_component = False):$/;"	f
GetEditType	cleanup/internal/get_ctm_edits.py	/^def GetEditType(hyp_word, ref_word, duration):$/;"	f
GetHistToStateMap	cleanup/internal/make_one_biased_lm.py	/^    def GetHistToStateMap(self):$/;"	m	class:NgramCounts
GetHistToTotalCount	cleanup/internal/make_one_biased_lm.py	/^    def GetHistToTotalCount(self):$/;"	m	class:NgramCounts
GetMean	diagnostic/analyze_lattice_depth_stats.py	/^def GetMean(depth_to_count):$/;"	f
GetMean	diagnostic/analyze_phone_length_stats.py	/^def GetMean(length_to_count):$/;"	f
GetPercentile	diagnostic/analyze_lattice_depth_stats.py	/^def GetPercentile(depth_to_count, fraction):$/;"	f
GetPercentile	diagnostic/analyze_phone_length_stats.py	/^def GetPercentile(length_to_count, fraction):$/;"	f
GetProb	cleanup/internal/make_one_biased_lm.py	/^    def GetProb(self, hist, word, total_count_map):$/;"	m	class:NgramCounts
GetSegmentLengthNoSil	cleanup/create_segments_from_ctm.pl	/^sub GetSegmentLengthNoSil {$/;"	s
GetSegmentsForUtterance	cleanup/internal/segment_ctm_edits.py	/^def GetSegmentsForUtterance(split_lines_of_utt):$/;"	f
GetSplitPoint	cleanup/create_segments_from_ctm.pl	/^sub GetSplitPoint {$/;"	s
GetStatsFromArcInfo	dict/get_pron_stats.py	/^def GetStatsFromArcInfo(arc_info_file_handle, phone_map_handle):$/;"	f
GetStatsFromCtmProns	cleanup/internal/get_pron_stats.py	/^def GetStatsFromCtmProns(silphones, optional_silence, non_scored_words, ctm_prons_file_handle):$/;"	f
GetSubsegments	dict/internal/get_subsegments.py	/^def GetSubsegments(args, vocab):$/;"	f
GetSumDescriptor	nnet3/components.py	/^def GetSumDescriptor(inputs):$/;"	f
GetTotalCountMap	cleanup/internal/make_one_biased_lm.py	/^    def GetTotalCountMap(self):$/;"	m	class:NgramCounts
GroupConfigs	nnet3/dot/nnet3_to_dot.py	/^def GroupConfigs(configs, node_prefixes = None):$/;"	f
IDFStats	cleanup/internal/tf_idf.py	/^class IDFStats(object):$/;"	c
IdentifyNestedSegments	nnet3/dot/descriptor_parser.py	/^def IdentifyNestedSegments(input_string):$/;"	f
InsertSilence	cleanup/create_segments_from_ctm.pl	/^sub InsertSilence {$/;"	s
IsTainted	cleanup/internal/segment_ctm_edits.py	/^def IsTainted(split_line_of_utt):$/;"	f
IsWholeUtterance	cleanup/internal/segment_ctm_edits.py	/^    def IsWholeUtterance(self):$/;"	m	class:Segment
JunkProportion	cleanup/internal/segment_ctm_edits.py	/^    def JunkProportion(self):$/;"	m	class:Segment
KNOWN_COMPONENTS	nnet3/convert_nnet2_to_nnet3.py	/^KNOWN_COMPONENTS = list(NODE_NAMES.keys())$/;"	v
KaldiLogParseException	libs/nnet3/report/log_parse.py	/^class KaldiLogParseException(Exception):$/;"	c
LatexReport	nnet3/report/generate_plots.py	/^class LatexReport(object):$/;"	c
Length	cleanup/internal/segment_ctm_edits.py	/^    def Length(self):$/;"	m	class:Segment
Main	cleanup/combine_short_segments.py	/^def Main():$/;"	f
Main	cleanup/internal/get_pron_stats.py	/^def Main():$/;"	f
Main	dict/apply_lexicon_edits.py	/^def Main():$/;"	f
Main	dict/get_pron_stats.py	/^def Main():$/;"	f
Main	dict/internal/get_subsegments.py	/^def Main():$/;"	f
Main	dict/internal/prune_pron_candidates.py	/^def Main():$/;"	f
Main	dict/internal/sum_arc_info.py	/^def Main():$/;"	f
Main	dict/merge_learned_lexicons.py	/^def Main():$/;"	f
Main	dict/prons_to_lexicon.py	/^def Main():$/;"	f
Main	dict/prune_pron_candidates.py	/^def Main():$/;"	f
Main	dict/select_prons_bayesian.py	/^def Main():$/;"	f
Main	dict/select_prons_greedy.py	/^def Main():$/;"	f
Main	nnet3/convert_nnet2_to_nnet3.py	/^def Main():$/;"	f
Main	nnet3/lstm/make_configs.py	/^def Main():$/;"	f
Main	nnet3/report/summarize_compute_debug_timing.py	/^def Main():$/;"	f
Main	nnet3/tdnn/make_configs.py	/^def Main():$/;"	f
MakeConfigs	nnet3/lstm/make_configs.py	/^def MakeConfigs(config_dir, feat_dim, ivector_dim, num_targets,$/;"	f
MakeConfigs	nnet3/tdnn/make_configs.py	/^def MakeConfigs(config_dir, splice_indexes_string,$/;"	f
MakeDir	cleanup/combine_short_segments.py	/^def MakeDir(dir):$/;"	f
MalformedClippedProportionLineException	libs/nnet3/report/log_parse.py	/^class MalformedClippedProportionLineException(Exception):$/;"	c
MergeWithSegment	cleanup/internal/segment_ctm_edits.py	/^    def MergeWithSegment(self, other):$/;"	m	class:Segment
NODE_NAMES	nnet3/convert_nnet2_to_nnet3.py	/^NODE_NAMES = {$/;"	v
NgramCounts	cleanup/internal/make_one_biased_lm.py	/^class NgramCounts(object):$/;"	c
Nnet3ComponentNodeToDot	nnet3/dot/nnet3_to_dot.py	/^def Nnet3ComponentNodeToDot(parsed_config):$/;"	f
Nnet3ComponentToDot	nnet3/dot/nnet3_to_dot.py	/^def Nnet3ComponentToDot(component_config, component_attributes = None):$/;"	f
Nnet3DescriptorToDot	nnet3/dot/nnet3_to_dot.py	/^def Nnet3DescriptorToDot(descriptor, parent_node_name):$/;"	f
Nnet3DimrangeToDot	nnet3/dot/nnet3_to_dot.py	/^def Nnet3DimrangeToDot(parsed_config):$/;"	f
Nnet3InputToDot	nnet3/dot/nnet3_to_dot.py	/^def Nnet3InputToDot(parsed_config):$/;"	f
Nnet3Model	nnet3/convert_nnet2_to_nnet3.py	/^class Nnet3Model(object):$/;"	c
Nnet3OutputToDot	nnet3/dot/nnet3_to_dot.py	/^def Nnet3OutputToDot(parsed_config):$/;"	f
NormalizeLexicon	dict/prons_to_lexicon.py	/^def NormalizeLexicon(lexicon, set_max_to_one = True,$/;"	f
NullstrToNoneAction	libs/common.py	/^class NullstrToNoneAction(argparse.Action):$/;"	c
OneEMIter	dict/select_prons_greedy.py	/^def OneEMIter(args, word, stats, prons, pron_probs, debug=False):$/;"	f
OpenFiles	cleanup/internal/get_ctm_edits.py	/^def OpenFiles():$/;"	f
OutputCtm	cleanup/internal/get_ctm_edits.py	/^def OutputCtm(utterance_id, edits_array, ctm_array):$/;"	f
PadArrays	cleanup/internal/get_ctm_edits.py	/^def PadArrays(edits_array, ctm_array):$/;"	f
ParseCnnString	nnet3/tdnn/make_configs.py	/^def ParseCnnString(cnn_param_string_list):$/;"	f
ParseConfigLines	nnet3/dot/nnet3_to_dot.py	/^def ParseConfigLines(lines, node_prefixes = None, component_attributes = None ):$/;"	f
ParseDataDirInfo	cleanup/combine_short_segments.py	/^def ParseDataDirInfo(data_dir):$/;"	f
ParseFileToDict	cleanup/combine_short_segments.py	/^def ParseFileToDict(file, assert2fields = False, value_processor = None):$/;"	f
ParseLstmDelayString	nnet3/lstm/make_configs.py	/^def ParseLstmDelayString(lstm_delay):$/;"	f
ParseNnet3String	nnet3/dot/nnet3_to_dot.py	/^def ParseNnet3String(string):$/;"	f
ParseSpliceString	nnet3/lstm/make_configs.py	/^def ParseSpliceString(splice_indexes, label_delay=None):$/;"	f
ParseSpliceString	nnet3/tdnn/make_configs.py	/^def ParseSpliceString(splice_indexes):$/;"	f
ParseSubsegmentsAndArguments	nnet3/dot/descriptor_parser.py	/^def ParseSubsegmentsAndArguments(segment_endpoints, sub_segments, arguments, input_string):$/;"	f
PossiblyAddTaintedLines	cleanup/internal/segment_ctm_edits.py	/^    def PossiblyAddTaintedLines(self):$/;"	m	class:Segment
PossiblyAddUnkPadding	cleanup/internal/segment_ctm_edits.py	/^    def PossiblyAddUnkPadding(self):$/;"	m	class:Segment
PossiblySplitSegment	cleanup/internal/segment_ctm_edits.py	/^    def PossiblySplitSegment(self):$/;"	m	class:Segment
PossiblyTruncateBoundaries	cleanup/internal/segment_ctm_edits.py	/^    def PossiblyTruncateBoundaries(self):$/;"	m	class:Segment
PossiblyTruncateEndForJunkProportion	cleanup/internal/segment_ctm_edits.py	/^    def PossiblyTruncateEndForJunkProportion(self):$/;"	m	class:Segment
PossiblyTruncateStartForJunkProportion	cleanup/internal/segment_ctm_edits.py	/^    def PossiblyTruncateStartForJunkProportion(self):$/;"	m	class:Segment
Print	cleanup/internal/make_one_biased_lm.py	/^    def Print(self, info_string):$/;"	m	class:NgramCounts
PrintAsFst	cleanup/internal/make_one_biased_lm.py	/^    def PrintAsFst(self, word_disambig_symbol):$/;"	m	class:NgramCounts
PrintConfig	nnet3/lstm/make_configs.py	/^def PrintConfig(file_name, config_lines):$/;"	f
PrintConfig	nnet3/tdnn/make_configs.py	/^def PrintConfig(file_name, config_lines):$/;"	f
PrintDebugInfoForUtterance	cleanup/internal/segment_ctm_edits.py	/^def PrintDebugInfoForUtterance(ctm_edits_out_handle,$/;"	f
PrintNonScoredStats	cleanup/internal/modify_ctm_edits.py	/^def PrintNonScoredStats():$/;"	f
PrintNonScoredStats	cleanup/internal/taint_ctm_edits.py	/^def PrintNonScoredStats():$/;"	f
PrintRepetitionStats	cleanup/internal/modify_ctm_edits.py	/^def PrintRepetitionStats():$/;"	f
PrintSegment	cleanup/create_segments_from_ctm.pl	/^sub PrintSegment {$/;"	s
PrintSegmentStats	cleanup/internal/segment_ctm_edits.py	/^def PrintSegmentStats():$/;"	f
PrintStats	cleanup/internal/taint_ctm_edits.py	/^def PrintStats():$/;"	f
PrintWordStats	cleanup/internal/segment_ctm_edits.py	/^def PrintWordStats(word_stats_out):$/;"	f
ProcessAppendDescriptor	nnet3/dot/nnet3_to_dot.py	/^def ProcessAppendDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessData	cleanup/internal/get_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessData	cleanup/internal/modify_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessData	cleanup/internal/segment_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessData	cleanup/internal/taint_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessGroupOfLines	cleanup/make_biased_lms.py	/^def ProcessGroupOfLines(group_of_lines):$/;"	f
ProcessIfDefinedDescriptor	nnet3/dot/nnet3_to_dot.py	/^def ProcessIfDefinedDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessLineForNonScoredWords	cleanup/internal/modify_ctm_edits.py	/^def ProcessLineForNonScoredWords(a):$/;"	f
ProcessOffsetDescriptor	nnet3/dot/nnet3_to_dot.py	/^def ProcessOffsetDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessOneUtterance	cleanup/internal/get_ctm_edits.py	/^def ProcessOneUtterance(utterance_id, edits_line, ctm_lines):$/;"	f
ProcessReplaceIndexDescriptor	nnet3/dot/nnet3_to_dot.py	/^def ProcessReplaceIndexDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessRoundDescriptor	nnet3/dot/nnet3_to_dot.py	/^def ProcessRoundDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessSpliceIndexes	nnet3/lstm/make_configs.py	/^def ProcessSpliceIndexes(config_dir, splice_indexes, label_delay, num_lstm_layers):$/;"	f
ProcessSumDescriptor	nnet3/dot/nnet3_to_dot.py	/^def ProcessSumDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessUtterance	cleanup/internal/modify_ctm_edits.py	/^def ProcessUtterance(split_lines_of_utt):$/;"	f
ProcessUtterance	cleanup/internal/taint_ctm_edits.py	/^def ProcessUtterance(split_lines_of_utt, remove_deletions=True):$/;"	f
ProcessUtteranceForRepetitions	cleanup/internal/modify_ctm_edits.py	/^def ProcessUtteranceForRepetitions(split_lines_of_utt):$/;"	f
ProcessWav	cleanup/create_segments_from_ctm.pl	/^sub ProcessWav {$/;"	s
PruneProns	dict/internal/prune_pron_candidates.py	/^def PruneProns(args, stats, ref_lexicon, lexicon_phonetic_decoding, lexicon_g2p, lexicon_g2p_probs):$/;"	f
PruneProns	dict/prune_pron_candidates.py	/^def PruneProns(args, stats, ref_lexicon):$/;"	f
ReadArcStats	dict/merge_learned_lexicons.py	/^def ReadArcStats(arc_stats_file_handle):$/;"	f
ReadArcStats	dict/select_prons_greedy.py	/^def ReadArcStats(arc_stats_file_handle):$/;"	f
ReadEntries	cleanup/internal/get_pron_stats.py	/^def ReadEntries(file_handle):$/;"	f
ReadLexicon	dict/apply_lexicon_edits.py	/^def ReadLexicon(lexicon_file_handle):$/;"	f
ReadLexicon	dict/internal/prune_pron_candidates.py	/^def ReadLexicon(lexicon_handle):$/;"	f
ReadLexicon	dict/merge_learned_lexicons.py	/^def ReadLexicon(args, lexicon_file_handle, counts):$/;"	f
ReadLexicon	dict/prons_to_lexicon.py	/^def ReadLexicon(lexicon_file_handle):$/;"	f
ReadLexicon	dict/prune_pron_candidates.py	/^def ReadLexicon(ref_lexicon_handle):$/;"	f
ReadLexicon	dict/select_prons_bayesian.py	/^def ReadLexicon(args, lexicon_file_handle, counts):$/;"	f
ReadLexicon	dict/select_prons_greedy.py	/^def ReadLexicon(args, lexicon_file_handle, counts):$/;"	f
ReadLexiconp	dict/internal/prune_pron_candidates.py	/^def ReadLexiconp(lexiconp_handle):$/;"	f
ReadNonScoredWords	cleanup/internal/modify_ctm_edits.py	/^def ReadNonScoredWords(non_scored_words_file):$/;"	f
ReadNonScoredWords	cleanup/internal/segment_ctm_edits.py	/^def ReadNonScoredWords(non_scored_words_file):$/;"	f
ReadPronStats	dict/select_prons_bayesian.py	/^def ReadPronStats(pron_stats_file_handle):$/;"	f
ReadStats	dict/internal/prune_pron_candidates.py	/^def ReadStats(pron_stats_handle):$/;"	f
ReadStats	dict/prons_to_lexicon.py	/^def ReadStats(args):$/;"	f
ReadStats	dict/prune_pron_candidates.py	/^def ReadStats(pron_stats_handle):$/;"	f
ReadVocab	dict/internal/get_subsegments.py	/^def ReadVocab(vocab_file_handle):$/;"	f
ReadWordCounts	dict/merge_learned_lexicons.py	/^def ReadWordCounts(word_counts_file_handle):$/;"	f
ReadWordCounts	dict/select_prons_bayesian.py	/^def ReadWordCounts(word_counts_file_handle):$/;"	f
ReadWordCounts	dict/select_prons_greedy.py	/^def ReadWordCounts(word_counts_file_handle):$/;"	f
RelaxBoundaryTruncation	cleanup/internal/segment_ctm_edits.py	/^    def RelaxBoundaryTruncation(self):$/;"	m	class:Segment
RnnlmInput	tfrnnlm/lstm.py	/^class RnnlmInput(object):$/;"	c
RnnlmInput	tfrnnlm/lstm_fast.py	/^class RnnlmInput(object):$/;"	c
RnnlmInput	tfrnnlm/vanilla_rnnlm.py	/^class RnnlmInput(object):$/;"	c
RnnlmModel	tfrnnlm/lstm.py	/^class RnnlmModel(object):$/;"	c
RnnlmModel	tfrnnlm/lstm_fast.py	/^class RnnlmModel(object):$/;"	c
RnnlmModel	tfrnnlm/vanilla_rnnlm.py	/^class RnnlmModel(object):$/;"	c
RunKaldiCommand	cleanup/combine_short_segments.py	/^def RunKaldiCommand(command, wait = True):$/;"	f
RunKaldiCommand	data/data_dir_manipulation_lib.py	/^def RunKaldiCommand(command, wait = True):$/;"	f
RunOpts	libs/nnet3/train/common.py	/^class RunOpts(object):$/;"	c
SPLICE_COMPONENTS	nnet3/convert_nnet2_to_nnet3.py	/^SPLICE_COMPONENTS = [c for c in NODE_NAMES if "Splice" in c]$/;"	v
Segment	cleanup/internal/segment_ctm_edits.py	/^class Segment(object):$/;"	c
Segment	cleanup/internal/segment_ctm_edits_mild.py	/^class Segment(object):$/;"	c
SegmentStats	cleanup/internal/segment_ctm_edits_mild.py	/^class SegmentStats(object):$/;"	c
Segmentation	segmentation/internal/sad_to_segments.py	/^class Segmentation(object):$/;"	c
SegmenterStats	segmentation/internal/sad_to_segments.py	/^class SegmenterStats(object):$/;"	c
SegmentsMerger	cleanup/internal/segment_ctm_edits_mild.py	/^class SegmentsMerger(object):$/;"	c
SelectPronsBayesian	dict/select_prons_bayesian.py	/^def SelectPronsBayesian(args, counts, posteriors, ref_lexicon, g2p_lexicon, phonetic_decoding_lexicon):$/;"	f
SelectPronsGreedy	dict/select_prons_greedy.py	/^def SelectPronsGreedy(args, stats, counts, ref_lexicon, g2p_lexicon, pd_lexicon, dianostic_info=False):$/;"	f
SelfTest	libs/nnet3/train/common.py	/^class SelfTest(unittest.TestCase):$/;"	c
SplitLongSegment	cleanup/create_segments_from_ctm.pl	/^sub SplitLongSegment {$/;"	s
StartTime	cleanup/internal/segment_ctm_edits.py	/^    def StartTime(self):$/;"	m	class:Segment
StrToBoolAction	dict/internal/sum_arc_info.py	/^class StrToBoolAction(argparse.Action):$/;"	c
StrToBoolAction	dict/prons_to_lexicon.py	/^class StrToBoolAction(argparse.Action):$/;"	c
StrToBoolAction	libs/common.py	/^class StrToBoolAction(argparse.Action):$/;"	c
TFIDF	cleanup/internal/tf_idf.py	/^class TFIDF(object):$/;"	c
TFStats	cleanup/internal/tf_idf.py	/^class TFStats(object):$/;"	c
TakeTopN	dict/prons_to_lexicon.py	/^def TakeTopN(lexicon, top_N):$/;"	f
Text	cleanup/internal/segment_ctm_edits.py	/^    def Text(self):$/;"	m	class:Segment
TimeToString	cleanup/internal/segment_ctm_edits.py	/^def TimeToString(time, frame_length):$/;"	f
Usage	cleanup/create_segments_from_ctm.pl	/^Usage: steps\/cleanup\/create_segments_from_ctm.pl [options] \\$/;"	l
Usage	cleanup/internal/ctm_to_text.pl	/^Usage: ctm_to_text.pl [--non-scored-words <file>] <ctm-file> > <text>$/;"	l
UtteranceStats	cleanup/internal/segment_ctm_edits_mild.py	/^class UtteranceStats(object):$/;"	c
WordStats	cleanup/internal/segment_ctm_edits_mild.py	/^class WordStats(object):$/;"	c
WriteCombinedDirFiles	cleanup/combine_short_segments.py	/^def WriteCombinedDirFiles(output_dir, utt2spk, spk2utt, text, feat, utt2dur, utt2uniq):$/;"	f
WriteDictToFile	cleanup/combine_short_segments.py	/^def WriteDictToFile(dict, file_name):$/;"	f
WriteEditsAndSummary	dict/merge_learned_lexicons.py	/^def WriteEditsAndSummary(args, learned_lexicon, ref_lexicon, pd_lexicon, g2p_lexicon, counts, stats, stats_summed):$/;"	f
WriteEditsAndSummary	dict/select_prons_bayesian.py	/^def WriteEditsAndSummary(args, learned_lexicon, ref_lexicon, phonetic_decoding_lexicon, g2p_lexicon, counts, stats):$/;"	f
WriteLearnedLexicon	dict/select_prons_greedy.py	/^def WriteLearnedLexicon(learned_lexicon, file_handle):$/;"	f
WriteLearnedLexiconOov	dict/merge_learned_lexicons.py	/^def WriteLearnedLexiconOov(learned_lexicon, ref_lexicon, file_handle):$/;"	f
WriteLearnedLexiconOov	dict/select_prons_bayesian.py	/^def WriteLearnedLexiconOov(learned_lexicon, ref_lexicon, file_handle):$/;"	f
WriteLexicon	dict/apply_lexicon_edits.py	/^def WriteLexicon(lexicon, out_lexicon_handle):$/;"	f
WriteLexicon	dict/prons_to_lexicon.py	/^def WriteLexicon(args, lexicon, filter_lexicon):$/;"	f
WriteSegmentsForUtterance	cleanup/internal/segment_ctm_edits.py	/^def WriteSegmentsForUtterance(text_output_handle, segments_output_handle,$/;"	f
WriteStats	cleanup/internal/get_pron_stats.py	/^def WriteStats(stats, file_handle):$/;"	f
WriteStats	dict/get_pron_stats.py	/^def WriteStats(stats, file_handle):$/;"	f
XconfigAffineComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigAffineComponent(XconfigLayerBase):$/;"	c
XconfigAffineLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigAffineLayer(XconfigLayerBase):$/;"	c
XconfigAttentionLayer	libs/nnet3/xconfig/attention.py	/^class XconfigAttentionLayer(XconfigLayerBase):$/;"	c
XconfigBasicLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigBasicLayer(XconfigLayerBase):$/;"	c
XconfigBatchnormComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigBatchnormComponent(XconfigLayerBase):$/;"	c
XconfigCombineFeatureMapsLayer	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigCombineFeatureMapsLayer(XconfigLayerBase):$/;"	c
XconfigConvLayer	libs/nnet3/xconfig/convolution.py	/^class XconfigConvLayer(XconfigLayerBase):$/;"	c
XconfigDeltaLayer	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigDeltaLayer(XconfigLayerBase):$/;"	c
XconfigDimRangeComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigDimRangeComponent(XconfigLayerBase):$/;"	c
XconfigExistingLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigExistingLayer(XconfigLayerBase):$/;"	c
XconfigFastGruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigFastGruLayer(XconfigLayerBase):$/;"	c
XconfigFastLstmLayer	libs/nnet3/xconfig/lstm.py	/^class XconfigFastLstmLayer(XconfigLayerBase):$/;"	c
XconfigFastLstmpLayer	libs/nnet3/xconfig/lstm.py	/^class XconfigFastLstmpLayer(XconfigLayerBase):$/;"	c
XconfigFastNormOpgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigFastNormOpgruLayer(XconfigLayerBase):$/;"	c
XconfigFastNormPgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigFastNormPgruLayer(XconfigLayerBase):$/;"	c
XconfigFastOpgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigFastOpgruLayer(XconfigLayerBase):$/;"	c
XconfigFastPgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigFastPgruLayer(XconfigLayerBase):$/;"	c
XconfigFixedAffineLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigFixedAffineLayer(XconfigLayerBase):$/;"	c
XconfigGruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigGruLayer(XconfigLayerBase):$/;"	c
XconfigIdctLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigIdctLayer(XconfigLayerBase):$/;"	c
XconfigInputLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigInputLayer(XconfigLayerBase):$/;"	c
XconfigLayerBase	libs/nnet3/xconfig/basic_layers.py	/^class XconfigLayerBase(object):$/;"	c
XconfigLinearComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigLinearComponent(XconfigLayerBase):$/;"	c
XconfigLstmLayer	libs/nnet3/xconfig/lstm.py	/^class XconfigLstmLayer(XconfigLayerBase):$/;"	c
XconfigLstmbLayer	libs/nnet3/xconfig/lstm.py	/^class XconfigLstmbLayer(XconfigLayerBase):$/;"	c
XconfigLstmpLayer	libs/nnet3/xconfig/lstm.py	/^class XconfigLstmpLayer(XconfigLayerBase):$/;"	c
XconfigNoOpComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigNoOpComponent(XconfigLayerBase):$/;"	c
XconfigNormOpgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigNormOpgruLayer(XconfigLayerBase):$/;"	c
XconfigNormPgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigNormPgruLayer(XconfigLayerBase):$/;"	c
XconfigOpgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigOpgruLayer(XconfigLayerBase):$/;"	c
XconfigOutputLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigOutputLayer(XconfigLayerBase):$/;"	c
XconfigPerElementOffsetComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigPerElementOffsetComponent(XconfigLayerBase):$/;"	c
XconfigPerElementScaleComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigPerElementScaleComponent(XconfigLayerBase):$/;"	c
XconfigPgruLayer	libs/nnet3/xconfig/gru.py	/^class XconfigPgruLayer(XconfigLayerBase):$/;"	c
XconfigPrefinalLayer	libs/nnet3/xconfig/composite_layers.py	/^class XconfigPrefinalLayer(XconfigLayerBase):$/;"	c
XconfigRenormComponent	libs/nnet3/xconfig/trivial_layers.py	/^class XconfigRenormComponent(XconfigLayerBase):$/;"	c
XconfigRes2Block	libs/nnet3/xconfig/convolution.py	/^class XconfigRes2Block(XconfigLayerBase):$/;"	c
XconfigResBlock	libs/nnet3/xconfig/convolution.py	/^class XconfigResBlock(XconfigLayerBase):$/;"	c
XconfigSpecAugmentLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigSpecAugmentLayer(XconfigLayerBase):$/;"	c
XconfigStatsLayer	libs/nnet3/xconfig/stats_layer.py	/^class XconfigStatsLayer(XconfigLayerBase):$/;"	c
XconfigTdnnfLayer	libs/nnet3/xconfig/composite_layers.py	/^class XconfigTdnnfLayer(XconfigLayerBase):$/;"	c
XconfigTrivialOutputLayer	libs/nnet3/xconfig/basic_layers.py	/^class XconfigTrivialOutputLayer(XconfigLayerBase):$/;"	c
__all__	libs/__init__.py	/^__all__ = ["common"]$/;"	v
__all__	libs/nnet3/report/__init__.py	/^__all__ = ["log_parse"]$/;"	v
__all__	libs/nnet3/train/chain_objf/__init__.py	/^__all__ = ["acoustic_model"]$/;"	v
__all__	libs/nnet3/train/frame_level_objf/__init__.py	/^__all__ = ["common", "raw_model", "acoustic_model"]$/;"	v
__all__	libs/nnet3/xconfig/__init__.py	/^__all__ = ["utils", "layers", "parser"]$/;"	v
__call__	dict/internal/sum_arc_info.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:StrToBoolAction	file:
__call__	dict/prons_to_lexicon.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:StrToBoolAction	file:
__call__	libs/common.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:NullstrToNoneAction	file:
__call__	libs/common.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:StrToBoolAction	file:
__enter__	libs/common.py	/^    def __enter__(self):$/;"	m	class:smart_open	file:
__exit__	libs/common.py	/^    def __exit__(self, *args):$/;"	m	class:smart_open	file:
__init__	cleanup/internal/make_one_biased_lm.py	/^    def __init__(self, ngram_order):$/;"	m	class:NgramCounts
__init__	cleanup/internal/segment_ctm_edits.py	/^    def __init__(self, split_lines_of_utt, start_index, end_index, debug_str = None):$/;"	m	class:Segment
__init__	cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self):$/;"	m	class:SegmentStats
__init__	cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self):$/;"	m	class:UtteranceStats
__init__	cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self):$/;"	m	class:WordStats
__init__	cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self, segments):$/;"	m	class:SegmentsMerger
__init__	cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self, split_lines_of_utt, start_index, end_index,$/;"	m	class:Segment
__init__	cleanup/internal/tf_idf.py	/^    def __init__(self):$/;"	m	class:IDFStats
__init__	cleanup/internal/tf_idf.py	/^    def __init__(self):$/;"	m	class:TFIDF
__init__	cleanup/internal/tf_idf.py	/^    def __init__(self):$/;"	m	class:TFStats
__init__	data/reverberate_data_dir.py	/^    def __init__(self, list):$/;"	m	class:list_cyclic_iterator
__init__	libs/common.py	/^    def __init__(self, filename, mode="r"):$/;"	m	class:smart_open
__init__	libs/nnet3/report/log_parse.py	/^    def __init__(self, line):$/;"	m	class:MalformedClippedProportionLineException
__init__	libs/nnet3/report/log_parse.py	/^    def __init__(self, message = None):$/;"	m	class:KaldiLogParseException
__init__	libs/nnet3/train/common.py	/^    def __init__(self):$/;"	m	class:RunOpts
__init__	libs/nnet3/train/common.py	/^    def __init__(self,$/;"	m	class:CommonParser
__init__	libs/nnet3/xconfig/attention.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigAttentionLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, all_layers):$/;"	m	class:XconfigLayerBase
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigAffineLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigBasicLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigExistingLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigFixedAffineLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigIdctLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigInputLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigOutputLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigSpecAugmentLayer
__init__	libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigTrivialOutputLayer
__init__	libs/nnet3/xconfig/composite_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigPrefinalLayer
__init__	libs/nnet3/xconfig/composite_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigTdnnfLayer
__init__	libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:ChannelAverageLayer
__init__	libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigConvLayer
__init__	libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigRes2Block
__init__	libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigResBlock
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastGruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastNormOpgruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastNormPgruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastOpgruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastPgruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigGruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigNormOpgruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigNormPgruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigOpgruLayer
__init__	libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigPgruLayer
__init__	libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastLstmLayer
__init__	libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastLstmpLayer
__init__	libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigLstmLayer
__init__	libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigLstmbLayer
__init__	libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigLstmpLayer
__init__	libs/nnet3/xconfig/stats_layer.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigStatsLayer
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigAffineComponent
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigBatchnormComponent
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigCombineFeatureMapsLayer
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigDeltaLayer
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigDimRangeComponent
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigLinearComponent
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigNoOpComponent
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigPerElementOffsetComponent
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigPerElementScaleComponent
__init__	libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigRenormComponent
__init__	libs/nnet3/xconfig/utils.py	/^    def __init__(self,$/;"	m	class:Descriptor
__init__	nnet3/convert_nnet2_to_nnet3.py	/^    def __init__(self):$/;"	m	class:Nnet3Model
__init__	nnet3/report/generate_plots.py	/^    def __init__(self, pdf_file):$/;"	m	class:LatexReport
__init__	segmentation/internal/sad_to_segments.py	/^    def __init__(self):$/;"	m	class:Segmentation
__init__	segmentation/internal/sad_to_segments.py	/^    def __init__(self):$/;"	m	class:SegmenterStats
__init__	tfrnnlm/lstm.py	/^  def __init__(self, config, data, name=None):$/;"	m	class:RnnlmInput
__init__	tfrnnlm/lstm.py	/^  def __init__(self, is_training, config, input_):$/;"	m	class:RnnlmModel
__init__	tfrnnlm/lstm_fast.py	/^  def __init__(self, config, data, name=None):$/;"	m	class:RnnlmInput
__init__	tfrnnlm/lstm_fast.py	/^  def __init__(self, is_training, config, input_):$/;"	m	class:RnnlmModel
__init__	tfrnnlm/vanilla_rnnlm.py	/^  def __init__(self, config, data, name=None):$/;"	m	class:RnnlmInput
__init__	tfrnnlm/vanilla_rnnlm.py	/^  def __init__(self, is_training, config, input_):$/;"	m	class:RnnlmModel
__next__	data/reverberate_data_dir.py	/^    def __next__(self):$/;"	m	class:list_cyclic_iterator	file:
__str__	cleanup/internal/segment_ctm_edits_mild.py	/^    def __str__(self):$/;"	m	class:Segment	file:
__str__	cleanup/internal/segment_ctm_edits_mild.py	/^    def __str__(self):$/;"	m	class:SegmentStats	file:
__str__	cleanup/internal/tf_idf.py	/^    def __str__(self):$/;"	m	class:TFStats	file:
__str__	libs/nnet3/xconfig/basic_layers.py	/^    def __str__(self):$/;"	m	class:XconfigLayerBase	file:
__str__	libs/nnet3/xconfig/utils.py	/^    def __str__(self):$/;"	m	class:Descriptor	file:
__str__	segmentation/internal/sad_to_segments.py	/^    def __str__(self):$/;"	m	class:SegmenterStats	file:
_add_components	libs/nnet3/xconfig/attention.py	/^    def _add_components(self, input_desc, input_dim, nonlinearities):$/;"	m	class:XconfigAttentionLayer
_add_components	libs/nnet3/xconfig/basic_layers.py	/^    def _add_components(self, input_desc, input_dim, nonlinearities):$/;"	m	class:XconfigBasicLayer
_build_vocab	tfrnnlm/reader.py	/^def _build_vocab(filename):$/;"	f
_debug_dropout	libs/nnet3/train/dropout_schedule.py	/^_debug_dropout = False$/;"	v
_file_to_word_ids	tfrnnlm/reader.py	/^def _file_to_word_ids(filename, word_to_id):$/;"	f
_generate_bottleneck_resblock_config	libs/nnet3/xconfig/convolution.py	/^    def _generate_bottleneck_resblock_config(self):$/;"	m	class:XconfigRes2Block
_generate_bottleneck_resblock_config	libs/nnet3/xconfig/convolution.py	/^    def _generate_bottleneck_resblock_config(self):$/;"	m	class:XconfigResBlock
_generate_channel_average_config	libs/nnet3/xconfig/convolution.py	/^    def _generate_channel_average_config(self):$/;"	m	class:ChannelAverageLayer
_generate_cnn_config	libs/nnet3/xconfig/convolution.py	/^    def _generate_cnn_config(self):$/;"	m	class:XconfigConvLayer
_generate_config	libs/nnet3/xconfig/attention.py	/^    def _generate_config(self):$/;"	m	class:XconfigAttentionLayer
_generate_config	libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigBasicLayer
_generate_config	libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigIdctLayer
_generate_config	libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigOutputLayer
_generate_config	libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigSpecAugmentLayer
_generate_config	libs/nnet3/xconfig/composite_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigPrefinalLayer
_generate_config	libs/nnet3/xconfig/composite_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigTdnnfLayer
_generate_config	libs/nnet3/xconfig/stats_layer.py	/^    def _generate_config(self):$/;"	m	class:XconfigStatsLayer
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigAffineComponent
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigBatchnormComponent
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigDeltaLayer
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigDimRangeComponent
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigLinearComponent
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigNoOpComponent
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigPerElementOffsetComponent
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigPerElementScaleComponent
_generate_config	libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigRenormComponent
_generate_lstm_config	libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigFastLstmLayer
_generate_lstm_config	libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigFastLstmpLayer
_generate_lstm_config	libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigLstmLayer
_generate_lstm_config	libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigLstmbLayer
_generate_lstm_config	libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigLstmpLayer
_generate_normal_resblock_config	libs/nnet3/xconfig/convolution.py	/^    def _generate_normal_resblock_config(self):$/;"	m	class:XconfigRes2Block
_generate_normal_resblock_config	libs/nnet3/xconfig/convolution.py	/^    def _generate_normal_resblock_config(self):$/;"	m	class:XconfigResBlock
_get_args	cleanup/internal/compute_tf_idf.py	/^def _get_args():$/;"	f
_get_component_dropout	libs/nnet3/train/dropout_schedule.py	/^def _get_component_dropout(dropout_schedule, data_fraction):$/;"	f
_get_dropout_proportions	libs/nnet3/train/dropout_schedule.py	/^def _get_dropout_proportions(dropout_schedule, data_fraction):$/;"	f
_get_merged_cluster	cleanup/internal/segment_ctm_edits_mild.py	/^    def _get_merged_cluster(self, cluster1, cluster2, rejected_clusters=None,$/;"	m	class:SegmentsMerger
_global_formatter	cleanup/internal/segment_ctm_edits_mild.py	/^_global_formatter = logging.Formatter($/;"	v
_global_handler	cleanup/internal/segment_ctm_edits_mild.py	/^_global_handler = logging.StreamHandler()$/;"	v
_global_logger	cleanup/internal/segment_ctm_edits_mild.py	/^_global_logger = logging.getLogger(__name__)$/;"	v
_global_non_scored_words	cleanup/internal/segment_ctm_edits_mild.py	/^_global_non_scored_words = {}$/;"	v
_parse_dropout_option	libs/nnet3/train/dropout_schedule.py	/^def _parse_dropout_option(dropout_option):$/;"	f
_parse_dropout_string	libs/nnet3/train/dropout_schedule.py	/^def _parse_dropout_string(dropout_str):$/;"	f
_read_words	tfrnnlm/reader.py	/^def _read_words(filename):$/;"	f
_run	cleanup/internal/compute_tf_idf.py	/^def _run(args):$/;"	f
_self_test	libs/nnet3/train/dropout_schedule.py	/^def _self_test():$/;"	f
a	diagnostic/analyze_lattice_depth_stats.py	/^    a = line.split()$/;"	v
a	diagnostic/analyze_phone_length_stats.py	/^    a = line.split()$/;"	v
accepted_models	nnet3/get_successful_models.py	/^    accepted_models = []$/;"	v
accumulate	cleanup/internal/tf_idf.py	/^    def accumulate(self, doc, text, ngram_order):$/;"	m	class:TFStats
accumulate	cleanup/internal/tf_idf.py	/^    def accumulate(self, term):$/;"	m	class:IDFStats
accumulate_for_utterance	cleanup/internal/segment_ctm_edits_mild.py	/^    def accumulate_for_utterance(self, split_lines_of_utt,$/;"	m	class:WordStats
accumulate_segment_stats	cleanup/internal/segment_ctm_edits_mild.py	/^    def accumulate_segment_stats(self, segment_list, text):$/;"	m	class:UtteranceStats
add	segmentation/internal/sad_to_segments.py	/^    def add(self, other):$/;"	m	class:SegmenterStats
add_component	nnet3/convert_nnet2_to_nnet3.py	/^    def add_component(self, component, pairs):$/;"	m	class:Nnet3Model
add_figure	nnet3/report/generate_plots.py	/^    def add_figure(self, figure_pdf, title):$/;"	f
add_nnet_context_info	nnet3/xconfig_to_configs.py	/^def add_nnet_context_info(config_dir, nnet_edits=None,$/;"	f
add_point_source_noise	data/reverberate_data_dir.py	/^def add_point_source_noise(noise_addition_descriptor,  # descriptor to store the information of the noise added$/;"	f
add_prefix_to_fields	data/reverberate_data_dir.py	/^def add_prefix_to_fields(input_file, output_file, num_replicas, include_original, prefix, field = [0]):$/;"	f
adjust_am_priors	libs/nnet3/train/frame_level_objf/common.py	/^def adjust_am_priors(dir, input_model, avg_posterior_vector, output_model,$/;"	f
align	libs/nnet3/train/frame_level_objf/common.py	/^def align(dir, data, lang, run_opts, iter=None,$/;"	f
all_phones	chain/gen_topo.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	chain/gen_topo2.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	chain/gen_topo3.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	chain/gen_topo4.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	chain/gen_topo5.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	chain/gen_topo_orig.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	nnet3/chain/gen_topo.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	nnet3/chain/gen_topo2.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	nnet3/chain/gen_topo3.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	nnet3/chain/gen_topo4.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	nnet3/chain/gen_topo5.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	nnet3/chain/gen_topo_orig.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
almost_equal	data/reverberate_data_dir.py	/^def almost_equal(value_1, value_2, accuracy = 10**-8):$/;"	f
args	chain/e2e/compute_biphone_stats.py	/^args = parser.parse_args()$/;"	v
args	chain/e2e/text_to_phones.py	/^args = parser.parse_args()$/;"	v
args	chain/gen_topo.py	/^args = parser.parse_args()$/;"	v
args	chain/gen_topo2.py	/^args = parser.parse_args()$/;"	v
args	chain/gen_topo3.py	/^args = parser.parse_args()$/;"	v
args	chain/gen_topo4.py	/^args = parser.parse_args()$/;"	v
args	chain/gen_topo5.py	/^args = parser.parse_args()$/;"	v
args	chain/gen_topo_orig.py	/^args = parser.parse_args()$/;"	v
args	cleanup/internal/get_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	cleanup/internal/get_non_scored_words.py	/^args = parser.parse_args()$/;"	v
args	cleanup/internal/make_one_biased_lm.py	/^args = parser.parse_args()$/;"	v
args	cleanup/internal/modify_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	cleanup/internal/segment_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	cleanup/internal/taint_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	cleanup/make_biased_lms.py	/^args = parser.parse_args()$/;"	v
args	diagnostic/analyze_lattice_depth_stats.py	/^args = parser.parse_args()$/;"	v
args	diagnostic/analyze_phone_length_stats.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/e2e/compute_biphone_stats.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/e2e/text_to_phones.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/gen_topo.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/gen_topo2.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/gen_topo3.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/gen_topo4.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/gen_topo5.py	/^args = parser.parse_args()$/;"	v
args	nnet3/chain/gen_topo_orig.py	/^args = parser.parse_args()$/;"	v
args	nnet3/dot/nnet3_to_dot.py	/^    args = parser.parse_args()$/;"	v
args	nnet3/get_successful_models.py	/^    args = parser.parse_args()$/;"	v
args	nnet3/make_tdnn_configs.py	/^args = parser.parse_args()$/;"	v
args	nnet3/report/summarize_compute_debug_timing.py	/^    args = GetArgs()$/;"	v
args	segmentation/internal/resample_targets.py	/^    args = parser.parse_args()$/;"	v
args	segmentation/internal/sad_to_segments.py	/^    args = parser.parse_args()$/;"	v
assert_approx_equal	libs/nnet3/train/dropout_schedule.py	/^    def assert_approx_equal(list1, list2):$/;"	f	function:_self_test
assert_equal	cleanup/internal/segment_ctm_edits_mild.py	/^    def assert_equal(self, other):$/;"	m	class:SegmentStats
assign_lr	tfrnnlm/lstm.py	/^  def assign_lr(self, session, lr_value):$/;"	m	class:RnnlmModel
assign_lr	tfrnnlm/lstm_fast.py	/^  def assign_lr(self, session, lr_value):$/;"	m	class:RnnlmModel
assign_lr	tfrnnlm/vanilla_rnnlm.py	/^  def assign_lr(self, session, lr_value):$/;"	m	class:RnnlmModel
attention_input_dim	libs/nnet3/xconfig/attention.py	/^    def attention_input_dim(self):$/;"	m	class:XconfigAttentionLayer
attention_output_dim	libs/nnet3/xconfig/attention.py	/^    def attention_output_dim(self):$/;"	m	class:XconfigAttentionLayer
attn_cell	tfrnnlm/lstm.py	/^      def attn_cell():$/;"	f	function:RnnlmModel.__init__.lstm_cell
attn_cell	tfrnnlm/lstm_fast.py	/^      def attn_cell():$/;"	f	function:RnnlmModel.__init__.lstm_cell
attn_cell	tfrnnlm/vanilla_rnnlm.py	/^      def attn_cell():$/;"	f	function:RnnlmModel.__init__.rnn_cell
augment_wav	data/augment_data_dir.py	/^    bg_noise_utts, noise_wavs, noise2dur, interval, num_opts):$/;"	f
auxiliary_outputs	libs/nnet3/xconfig/basic_layers.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLayerBase
auxiliary_outputs	libs/nnet3/xconfig/basic_layers.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigOutputLayer
auxiliary_outputs	libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:ChannelAverageLayer
auxiliary_outputs	libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigConvLayer
auxiliary_outputs	libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigRes2Block
auxiliary_outputs	libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigResBlock
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastNormOpgruLayer
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastNormPgruLayer
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastOpgruLayer
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastPgruLayer
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigNormOpgruLayer
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigNormPgruLayer
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigOpgruLayer
auxiliary_outputs	libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigPgruLayer
auxiliary_outputs	libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastLstmLayer
auxiliary_outputs	libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastLstmpLayer
auxiliary_outputs	libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLstmLayer
auxiliary_outputs	libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLstmbLayer
auxiliary_outputs	libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLstmpLayer
background_command	libs/common.py	/^def background_command(command, require_zero_status = False):$/;"	f
background_command_waiter	libs/common.py	/^def background_command_waiter(command, popen_object, require_zero_status):$/;"	f
backup_xconfig_file	nnet3/xconfig_to_configs.py	/^def backup_xconfig_file(xconfig_file, config_dir):$/;"	f
bad_proportion	cleanup/internal/segment_ctm_edits_mild.py	/^    def bad_proportion(self):$/;"	m	class:SegmentStats
batch_size	tfrnnlm/lstm.py	/^  batch_size = 64$/;"	v	class:Config
batch_size	tfrnnlm/lstm_fast.py	/^  batch_size = 64$/;"	v	class:Config
batch_size	tfrnnlm/vanilla_rnnlm.py	/^  batch_size = 64$/;"	v	class:Config
biphone_counts	chain/e2e/compute_biphone_stats.py	/^biphone_counts = {}$/;"	v
biphone_counts	nnet3/chain/e2e/compute_biphone_stats.py	/^biphone_counts = {}$/;"	v
boundary_to_text	diagnostic/analyze_phone_length_stats.py	/^boundary_to_text = { }$/;"	v
cat	conf/prepare_word_categories.py	/^  cat = 0 $/;"	v
chan	conf/append_prf_to_ctm.py	/^      chan = l.split()[1]$/;"	v
check_args	data/augment_data_dir.py	/^def check_args(args):$/;"	f
check_args	data/make_musan.py	/^def check_args(args):$/;"	f
check_args	data/reverberate_data_dir.py	/^def check_args(args):$/;"	f
check_args	nnet3/xconfig_to_configs.py	/^def check_args(args):$/;"	f
check_configs	libs/nnet3/xconfig/attention.py	/^    def check_configs(self):$/;"	m	class:XconfigAttentionLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigAffineLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigBasicLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigExistingLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigFixedAffineLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigIdctLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigInputLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigLayerBase
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigOutputLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigSpecAugmentLayer
check_configs	libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigTrivialOutputLayer
check_configs	libs/nnet3/xconfig/composite_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigPrefinalLayer
check_configs	libs/nnet3/xconfig/composite_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigTdnnfLayer
check_configs	libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:ChannelAverageLayer
check_configs	libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:XconfigConvLayer
check_configs	libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:XconfigRes2Block
check_configs	libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:XconfigResBlock
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastGruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastNormOpgruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastNormPgruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastOpgruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastPgruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigGruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigNormOpgruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigNormPgruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigOpgruLayer
check_configs	libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigPgruLayer
check_configs	libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigFastLstmLayer
check_configs	libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigFastLstmpLayer
check_configs	libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigLstmLayer
check_configs	libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigLstmbLayer
check_configs	libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigLstmpLayer
check_configs	libs/nnet3/xconfig/stats_layer.py	/^    def check_configs(self):$/;"	m	class:XconfigStatsLayer
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigAffineComponent
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigBatchnormComponent
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigDeltaLayer
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigDimRangeComponent
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigLinearComponent
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigNoOpComponent
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigPerElementOffsetComponent
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigPerElementScaleComponent
check_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigRenormComponent
check_for_newline	nnet3/report/convert_model.py	/^def check_for_newline(s, pos):$/;"	f
check_for_required_files	libs/nnet3/train/chain_objf/acoustic_model.py	/^def check_for_required_files(feat_dir, tree_dir, lat_dir=None):$/;"	f
check_if_cuda_compiled	libs/common.py	/^def check_if_cuda_compiled():$/;"	f
check_model_contexts	nnet3/xconfig_to_configs.py	/^def check_model_contexts(config_dir, nnet_edits=None, existing_model=None):$/;"	f
check_offsets_var	libs/nnet3/xconfig/convolution.py	/^    def check_offsets_var(self, str):$/;"	m	class:XconfigConvLayer
check_sorted_and_uniq	segmentation/validate_targets_dir.sh	/^function check_sorted_and_uniq {$/;"	f
choices	cleanup/internal/make_one_biased_lm.py	/^                    choices = [2,3,4,5,6,7],$/;"	v
choices	cleanup/internal/modify_ctm_edits.py	/^                    choices=['true','false'],$/;"	v
choices	cleanup/internal/modify_ctm_edits.py	/^                    choices=[0,1,2,3],$/;"	v
choices	cleanup/internal/taint_ctm_edits.py	/^                    choices=["true", "false"],$/;"	v
choices	cleanup/internal/taint_ctm_edits.py	/^                    choices=[0,1,2,3],$/;"	v
choose_best_ctm_lines	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def choose_best_ctm_lines(first_lines, second_lines,$/;"	f
clean_nnet_dir	libs/nnet3/train/common.py	/^def clean_nnet_dir(nnet_dir, num_iters, egs_dir,$/;"	f
cleanup	combine_ali_dirs.sh	/^cleanup() { rm -rf "$temp_dir"; }$/;"	f
cleanup	combine_lat_dirs.sh	/^cleanup() { rm -rf "$temp_dir"; }$/;"	f
cleanup	make_denlats.sh	/^cleanup() {$/;"	f
cleanup	make_denlats_sgmm2.sh	/^cleanup() {$/;"	f
cleanup	nnet/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	nnet2/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	nnet3/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	online/nnet2/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	tandem/make_denlats.sh	/^cleanup() {$/;"	f
close	nnet3/report/generate_plots.py	/^    def close(self):$/;"	f
combine	cleanup/internal/segment_ctm_edits_mild.py	/^    def combine(self, other, scale=1):$/;"	m	class:SegmentStats
combine_models	libs/nnet3/train/chain_objf/acoustic_model.py	/^def combine_models(dir, num_iters, models_to_combine, num_chunk_per_minibatch_str,$/;"	f
combine_models	libs/nnet3/train/frame_level_objf/common.py	/^def combine_models(dir, num_iters, models_to_combine, egs_dir,$/;"	f
compare	cleanup/internal/segment_ctm_edits_mild.py	/^    def compare(self, other):$/;"	m	class:SegmentStats
compile	nnet3/report/generate_plots.py	/^    def compile(self):$/;"	f
component_attributes	nnet3/dot/nnet3_to_dot.py	/^        component_attributes = args.component_attributes.split(',')$/;"	v
component_attributes	nnet3/dot/nnet3_to_dot.py	/^    component_attributes = None$/;"	v
compute_average_posterior	libs/nnet3/train/frame_level_objf/common.py	/^def compute_average_posterior(dir, iter, egs_dir, num_archives,$/;"	f
compute_derived_quantities	nnet3/report/convert_model.py	/^def compute_derived_quantities(model):$/;"	f
compute_idct_matrix	libs/common.py	/^def compute_idct_matrix(K, N, cepstral_lifter=0):$/;"	f
compute_lifter_coeffs	libs/common.py	/^def compute_lifter_coeffs(lifter, dim):$/;"	f
compute_preconditioning_matrix	libs/nnet3/train/chain_objf/acoustic_model.py	/^def compute_preconditioning_matrix(dir, egs_dir, num_lda_jobs, run_opts,$/;"	f
compute_preconditioning_matrix	libs/nnet3/train/frame_level_objf/common.py	/^def compute_preconditioning_matrix(dir, egs_dir, num_lda_jobs, run_opts,$/;"	f
compute_presoftmax_prior_scale	libs/nnet3/train/common.py	/^def compute_presoftmax_prior_scale(dir, alidir, num_jobs, run_opts,$/;"	f
compute_progress	libs/nnet3/train/chain_objf/acoustic_model.py	/^def compute_progress(dir, iter, run_opts):$/;"	f
compute_progress	libs/nnet3/train/frame_level_objf/common.py	/^def compute_progress(dir, iter, egs_dir,$/;"	f
compute_progress	nnet3/report/convert_model.py	/^def compute_progress(model1, model2):$/;"	f
compute_segment_cores	cleanup/internal/segment_ctm_edits_mild.py	/^def compute_segment_cores(split_lines_of_utt):$/;"	f
compute_similarity_scores	cleanup/internal/tf_idf.py	/^    def compute_similarity_scores(self, source_tfidf, source_docs=None,$/;"	m	class:TFIDF
compute_stats	cleanup/internal/segment_ctm_edits_mild.py	/^    def compute_stats(self):$/;"	m	class:Segment
compute_term_stats	cleanup/internal/tf_idf.py	/^    def compute_term_stats(self, idf_stats=None):$/;"	m	class:TFStats
compute_train_cv_probabilities	libs/nnet3/train/chain_objf/acoustic_model.py	/^def compute_train_cv_probabilities(dir, iter, egs_dir, l2_regularize,$/;"	f
compute_train_cv_probabilities	libs/nnet3/train/frame_level_objf/common.py	/^def compute_train_cv_probabilities(dir, iter, egs_dir, run_opts,$/;"	f
config_string	libs/nnet3/xconfig/utils.py	/^    def config_string(self, layer_to_string):$/;"	m	class:Descriptor
config_to_layer	libs/nnet3/xconfig/parser.py	/^config_to_layer = {$/;"	v
consume_token	nnet3/convert_nnet2_to_nnet3.py	/^def consume_token(token, line):$/;"	f
contains_atleast_one_scored_non_oov_word	cleanup/internal/segment_ctm_edits_mild.py	/^    def contains_atleast_one_scored_non_oov_word(self):$/;"	m	class:Segment
convert_to_descriptor	libs/nnet3/xconfig/basic_layers.py	/^    def convert_to_descriptor(self, descriptor_string, all_layers):$/;"	m	class:XconfigLayerBase
convert_value_to_type	libs/nnet3/xconfig/utils.py	/^def convert_value_to_type(key, dest_type, string_value):$/;"	f
copy	cleanup/internal/segment_ctm_edits_mild.py	/^    def copy(self, copy_stats=True):$/;"	m	class:Segment
copy_egs_properties_to_exp_dir	libs/nnet3/train/common.py	/^def copy_egs_properties_to_exp_dir(egs_dir, dir):$/;"	f
copy_file_if_exists	data/augment_data_dir.py	/^def copy_file_if_exists(input_file, output_file, utt_modifier_type,$/;"	f
cost	tfrnnlm/lstm.py	/^  def cost(self):$/;"	m	class:RnnlmModel
cost	tfrnnlm/lstm_fast.py	/^  def cost(self):$/;"	m	class:RnnlmModel
cost	tfrnnlm/vanilla_rnnlm.py	/^  def cost(self):$/;"	m	class:RnnlmModel
count	chain/e2e/compute_biphone_stats.py	/^        count = biphone_counts[shared_pair] if shared_pair in biphone_counts else 0$/;"	v
count	chain/e2e/compute_biphone_stats.py	/^    count = mono_counts[shared] if shared in mono_counts else 0$/;"	v
count	nnet3/chain/e2e/compute_biphone_stats.py	/^        count = biphone_counts[shared_pair] if shared_pair in biphone_counts else 0$/;"	v
count	nnet3/chain/e2e/compute_biphone_stats.py	/^    count = mono_counts[shared] if shared in mono_counts else 0$/;"	v
create_augmented_utt2uniq	data/augment_data_dir.py	/^def create_augmented_utt2uniq(input_dir, output_dir,$/;"	f
create_config_files	nnet2/make_multisplice_configs.py	/^def create_config_files(output_dir, params):$/;"	f
create_corrupted_utt2uniq	data/reverberate_data_dir.py	/^def create_corrupted_utt2uniq(input_dir, output_dir, num_replicas, include_original, prefix):$/;"	f
create_denominator_fst	libs/nnet3/train/chain_objf/acoustic_model.py	/^def create_denominator_fst(dir, tree_dir, run_opts):$/;"	f
create_phone_lm	libs/nnet3/train/chain_objf/acoustic_model.py	/^def create_phone_lm(dir, tree_dir, run_opts, lm_opts=None):$/;"	f
create_reverberated_copy	data/reverberate_data_dir.py	/^def create_reverberated_copy(input_dir,$/;"	f
csid	conf/append_eval_to_ctm.py	/^    csid = f.readline()$/;"	v
ctm	conf/append_eval_to_ctm.py	/^ctm = dict()$/;"	v
ctm	conf/append_prf_to_ctm.py	/^  ctm = [ l.split() for l in f ]$/;"	v
ctm	conf/prepare_calibration_data.py	/^ctm = [ l.split() for l in open(ctm_file) ]$/;"	v
ctm_edit_line_to_string	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def ctm_edit_line_to_string(line):$/;"	f
ctm_eval	conf/append_eval_to_ctm.py	/^ctm_eval = []$/;"	v
ctm_line_to_string	cleanup/internal/align_ctm_ref.py	/^def ctm_line_to_string(ctm_line):$/;"	f
ctm_out	conf/append_prf_to_ctm.py	/^ctm_out = []$/;"	v
ctm_wrd	conf/append_eval_to_ctm.py	/^      ctm_wrd = merged[j][-4]$/;"	v
cur_dim	nnet3/make_tdnn_configs.py	/^    cur_dim = (nonlin_output_dim * len(splice_array[l-1]) if l > 1 else input_dim)$/;"	v
cur_input	nnet3/make_tdnn_configs.py	/^        cur_input='Append({0})'.format(', '.join(splices))$/;"	v
cur_input	nnet3/make_tdnn_configs.py	/^        cur_input='lda'$/;"	v
damper	conf/prepare_calibration_data.py	/^    damper = 0.001 # avoid -inf,+inf from log,$/;"	v
data_lib	data/augment_data_dir.py	/^data_lib = imp.load_source('dml', 'steps\/data\/data_dir_manipulation_lib.py')$/;"	v
data_lib	data/reverberate_data_dir.py	/^data_lib = imp.load_source('dml', 'steps\/data\/data_dir_manipulation_lib.py')$/;"	v
data_type	tfrnnlm/lstm.py	/^def data_type():$/;"	f
data_type	tfrnnlm/lstm_fast.py	/^def data_type():$/;"	f
data_type	tfrnnlm/vanilla_rnnlm.py	/^def data_type():$/;"	f
debug_info	cleanup/internal/segment_ctm_edits_mild.py	/^    def debug_info(self, include_stats=True):$/;"	m	class:Segment
default	chain/e2e/compute_biphone_stats.py	/^                    default='true',$/;"	v
default	nnet3/chain/e2e/compute_biphone_stats.py	/^                    default='true',$/;"	v
default	nnet3/get_successful_models.py	/^                        default=1.0)$/;"	v
default	nnet3/make_tdnn_configs.py	/^                    default=1.0)$/;"	v
depth_mean	diagnostic/analyze_lattice_depth_stats.py	/^    depth_mean = GetMean(depths)$/;"	v
depth_percentile_10	diagnostic/analyze_lattice_depth_stats.py	/^    depth_percentile_10 = GetPercentile(depths, 0.1)$/;"	v
depth_percentile_50	diagnostic/analyze_lattice_depth_stats.py	/^    depth_percentile_50 = GetPercentile(depths, 0.5)$/;"	v
depth_percentile_90	diagnostic/analyze_lattice_depth_stats.py	/^    depth_percentile_90 = GetPercentile(depths, 0.9)$/;"	v
depth_slice	conf/prepare_calibration_data.py	/^      depth_slice = depths[utt][int(round(100.0*float(beg))):int(round(100.0*(float(beg)+float(dur))))]$/;"	v
depths	conf/prepare_calibration_data.py	/^  depths = dict()$/;"	v
description	cleanup/internal/get_ctm_edits.py	/^    description = "Append to the CTM the Levenshtein alignment of 'hypothesis' and 'reference'; "$/;"	v
description	cleanup/internal/get_non_scored_words.py	/^    description = "This program works out a reasonable guess at a list of "$/;"	v
description	cleanup/internal/modify_ctm_edits.py	/^    description = "This program modifies the reference in the ctm-edits which "$/;"	v
description	cleanup/internal/segment_ctm_edits.py	/^    description = "This program produces segmentation and text information "$/;"	v
description	cleanup/internal/taint_ctm_edits.py	/^    description = "This program modifies the ctm-edits format to identify "$/;"	v
diagnostics_are_finished_on_iter	info/chain_dir_info.pl	/^sub diagnostics_are_finished_on_iter {$/;"	s
diagnostics_are_finished_on_iter	info/nnet2_dir_info.pl	/^sub diagnostics_are_finished_on_iter {$/;"	s
diagnostics_are_finished_on_iter	info/nnet3_dir_info.pl	/^sub diagnostics_are_finished_on_iter {$/;"	s
dim	libs/nnet3/xconfig/utils.py	/^    def dim(self, layer_to_dim):$/;"	m	class:Descriptor
do_combine	combine_ali_dirs.sh	/^do_combine() {$/;"	f
do_combine	combine_lat_dirs.sh	/^do_combine() {$/;"	f
dot_graph	nnet3/dot/nnet3_to_dot.py	/^    dot_graph = ParseConfigLines(lines, component_attributes = component_attributes, node_prefixes = node_prefixes)$/;"	v
dotfile_handle	nnet3/dot/nnet3_to_dot.py	/^    dotfile_handle = open(args.dotfile, "w")$/;"	v
duration_mean	diagnostic/analyze_phone_length_stats.py	/^        duration_mean = GetMean(lengths)$/;"	v
duration_mean	diagnostic/analyze_phone_length_stats.py	/^    duration_mean = GetMean(internal_opt_sil_phone_lengths)$/;"	v
duration_median	diagnostic/analyze_phone_length_stats.py	/^        duration_median = GetPercentile(lengths, 0.5)$/;"	v
duration_median	diagnostic/analyze_phone_length_stats.py	/^    duration_median = GetPercentile(internal_opt_sil_phone_lengths, 0.5)$/;"	v
duration_percentile_95	diagnostic/analyze_phone_length_stats.py	/^        duration_percentile_95 = GetPercentile(lengths, 0.95)$/;"	v
duration_percentile_95	diagnostic/analyze_phone_length_stats.py	/^    duration_percentile_95 = GetPercentile(internal_opt_sil_phone_lengths, 0.95)$/;"	v
end_identifier	nnet3/dot/descriptor_parser.py	/^end_identifier = ")"$/;"	v
end_time	cleanup/internal/segment_ctm_edits_mild.py	/^    def end_time(self):$/;"	m	class:Segment
epilog	chain/gen_topo.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	chain/gen_topo2.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	chain/gen_topo3.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	chain/gen_topo4.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	chain/gen_topo5.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	chain/gen_topo_orig.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	nnet3/chain/gen_topo.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	nnet3/chain/gen_topo2.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	nnet3/chain/gen_topo3.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	nnet3/chain/gen_topo4.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	nnet3/chain/gen_topo5.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	nnet3/chain/gen_topo_orig.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	nnet3/dot/nnet3_to_dot.py	/^                                    epilog="See steps\/nnet3\/nnet3_to_dot.sh for example.");$/;"	v
epilog	nnet3/get_successful_models.py	/^                                     epilog="See steps\/nnet3\/lstm\/train.sh for example.")$/;"	v
epilog	nnet3/make_tdnn_configs.py	/^                                 epilog="See steps\/nnet3\/train_tdnn.sh for example.");$/;"	v
eval_vec	conf/append_eval_to_ctm.py	/^eval_vec = dict()$/;"	v
evl	conf/append_prf_to_ctm.py	/^      evl = l$/;"	v
execute_command	libs/common.py	/^def execute_command(command):$/;"	f
expect_token	libs/nnet3/xconfig/utils.py	/^def expect_token(expected_item, seen_item, what_parsing):$/;"	f
extra	nnet3/report/generate_plots.py	/^    extra = Rectangle((0, 0), 1, 1, facecolor="w", fill=False, edgecolor='none', linewidth=0)$/;"	v
f	diagnostic/analyze_lattice_depth_stats.py	/^    f = open(args.lang + "\/phones.txt", "r");$/;"	v
f	diagnostic/analyze_lattice_depth_stats.py	/^    f = open(filename, "r")$/;"	v
f	diagnostic/analyze_phone_length_stats.py	/^    f = open(args.lang + "\/phones.txt", "r");$/;"	v
f	diagnostic/analyze_phone_length_stats.py	/^    f = open(args.lang + "\/phones\/optional_silence.int", "r")$/;"	v
f	diagnostic/analyze_phone_length_stats.py	/^    f = open(filename, "r")$/;"	v
f	nnet3/make_tdnn_configs.py	/^    f = open(args.config_dir + "\/layer{0}.config".format(l), "w")$/;"	v
f	nnet3/make_tdnn_configs.py	/^f = open(args.config_dir + "\/init.config", "w")$/;"	v
f	nnet3/make_tdnn_configs.py	/^f = open(args.config_dir + "\/vars", "w")$/;"	v
f	nnet3/report/convert_model.py	/^         f = open(sys.argv[2], "wb")$/;"	v
feats	conf/prepare_calibration_data.py	/^    feats = [ logit, log_word_length, other_feats[wrd_id] ] + wrd_1_of_k$/;"	v
file	chain/e2e/compute_biphone_stats.py	/^      file=sys.stderr)$/;"	v
file	nnet3/chain/e2e/compute_biphone_stats.py	/^      file=sys.stderr)$/;"	v
file	nnet3/make_tdnn_configs.py	/^                  file=f)$/;"	v
file	nnet3/make_tdnn_configs.py	/^              file=f)$/;"	v
file_id	conf/append_prf_to_ctm.py	/^      file_id = l.split()[1]$/;"	v
filename	diagnostic/analyze_lattice_depth_stats.py	/^    filename = "{0}\/phones\/silence.csl".format(args.lang)$/;"	v
filename	diagnostic/analyze_phone_length_stats.py	/^    filename = "{0}\/phones\/silence.csl".format(args.lang)$/;"	v
fill_nonlin_stats_table_with_regex_result	libs/nnet3/report/log_parse.py	/^def fill_nonlin_stats_table_with_regex_result(groups, gate_index, stats_table):$/;"	f
filter_short_segments	segmentation/internal/sad_to_segments.py	/^    def filter_short_segments(self, min_dur):$/;"	m	class:Segmentation
final_state	tfrnnlm/lstm.py	/^  def final_state(self):$/;"	m	class:RnnlmModel
final_state	tfrnnlm/lstm_fast.py	/^  def final_state(self):$/;"	m	class:RnnlmModel
final_state	tfrnnlm/vanilla_rnnlm.py	/^  def final_state(self):$/;"	m	class:RnnlmModel
finished_training	info/chain_dir_info.pl	/^sub finished_training {$/;"	s
finished_training	info/nnet2_dir_info.pl	/^sub finished_training {$/;"	s
finished_training	info/nnet3_dir_info.pl	/^sub finished_training {$/;"	s
flags	tfrnnlm/lstm.py	/^flags = tf.flags$/;"	v
flags	tfrnnlm/lstm_fast.py	/^flags = tf.flags$/;"	v
flags	tfrnnlm/vanilla_rnnlm.py	/^flags = tf.flags$/;"	v
float_to_string	cleanup/internal/segment_ctm_edits_mild.py	/^def float_to_string(f):$/;"	f
force_symlink	libs/common.py	/^def force_symlink(file1, file2):$/;"	f
format_float_as_string	info/chain_dir_info.pl	/^sub format_float_as_string {$/;"	s
formatter	chain/e2e/train_e2e.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	chain/train.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	cleanup/internal/align_ctm_ref.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	cleanup/internal/compute_tf_idf.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	cleanup/internal/get_non_scored_words.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	cleanup/internal/modify_ctm_edits.py	/^formatter = logging.Formatter('%(asctime)s [%(filename)s:%(lineno)s - '$/;"	v
formatter	cleanup/internal/resolve_ctm_edits_overlaps.py	/^formatter = logging.Formatter($/;"	v
formatter	cleanup/internal/retrieve_similar_docs.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	cleanup/internal/stitch_documents.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	nnet3/chain/e2e/train_e2e.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	nnet3/chain/train.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	nnet3/convert_nnet2_to_nnet3.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	nnet3/multilingual/allocate_multilingual_examples.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	nnet3/train_dnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	nnet3/train_raw_dnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	nnet3/train_raw_rnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	nnet3/train_rnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	segmentation/internal/arc_info_to_targets.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	segmentation/internal/get_default_targets_for_out_of_segments.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	segmentation/internal/merge_segment_targets_to_recording.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	segmentation/internal/merge_targets.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	segmentation/internal/prepare_sad_graph.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	segmentation/internal/resample_targets.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	segmentation/internal/sad_to_segments.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter_class	cleanup/internal/segment_ctm_edits.py	/^ formatter_class=argparse.ArgumentDefaultsHelpFormatter)$/;"	v
formatter_class	segmentation/internal/sad_to_segments.py	/^        formatter_class=argparse.RawTextHelpFormatter)$/;"	v
frequency_percentage	diagnostic/analyze_lattice_depth_stats.py	/^    frequency_percentage = sum(depths.values()) * 100.0 \/ total_frames$/;"	v
frequency_percentage	diagnostic/analyze_phone_length_stats.py	/^        frequency_percentage = sum(lengths.values()) * 100.0 \/ tot_num_phones$/;"	v
frequency_percentage	diagnostic/analyze_phone_length_stats.py	/^    frequency_percentage = sum(opt_sil_lengths.values()) * 100.0 \/ num_utterances$/;"	v
g_lstm_gate	nnet3/report/generate_plots.py	/^g_lstm_gate = ['i_t_sigmoid', 'f_t_sigmoid', 'c_t_tanh', 'o_t_sigmoid', 'm_t_tanh']$/;"	v
g_lstmp_nonlin_regex_pattern	libs/nnet3/report/log_parse.py	/^g_lstmp_nonlin_regex_pattern = ''.join([".*progress.([0-9]+).log:component name=(.+) ",$/;"	v
g_normal_nonlin_regex_pattern	libs/nnet3/report/log_parse.py	/^g_normal_nonlin_regex_pattern = ''.join([".*progress.([0-9]+).log:component name=(.+) ",$/;"	v
g_normal_nonlin_regex_pattern_with_oderiv	libs/nnet3/report/log_parse.py	/^g_normal_nonlin_regex_pattern_with_oderiv = ''.join([".*progress.([0-9]+).log:component name=(.+) ",$/;"	v
g_plot	nnet3/report/generate_plots.py	/^    g_plot = False$/;"	v
g_plot	nnet3/report/generate_plots.py	/^    g_plot = True$/;"	v
g_plot_colors	nnet3/report/generate_plots.py	/^g_plot_colors = ['red', 'blue', 'green', 'black', 'magenta', 'yellow', 'cyan']$/;"	v
generate_acc_logprob_plots	nnet3/report/generate_plots.py	/^def generate_acc_logprob_plots(exp_dir, output_dir, plot, key='accuracy',$/;"	f
generate_acc_logprob_report	libs/nnet3/report/log_parse.py	/^def generate_acc_logprob_report(exp_dir, key="accuracy", output="output"):$/;"	f
generate_chain_egs	libs/nnet3/train/chain_objf/acoustic_model.py	/^def generate_chain_egs(dir, data, lat_dir, egs_dir,$/;"	f
generate_clipped_proportion_plots	nnet3/report/generate_plots.py	/^def generate_clipped_proportion_plots(exp_dir, output_dir, plot,$/;"	f
generate_egs	libs/nnet3/train/frame_level_objf/acoustic_model.py	/^def generate_egs(data, alidir, egs_dir,$/;"	f
generate_egs_using_targets	libs/nnet3/train/frame_level_objf/raw_model.py	/^def generate_egs_using_targets(data, targets_scp, egs_dir,$/;"	f
generate_gru_config	libs/nnet3/xconfig/gru.py	/^    def generate_gru_config(self):$/;"	m	class:XconfigFastGruLayer
generate_gru_config	libs/nnet3/xconfig/gru.py	/^    def generate_gru_config(self):$/;"	m	class:XconfigGruLayer
generate_nonlin_stats_plots	nnet3/report/generate_plots.py	/^def generate_nonlin_stats_plots(exp_dir, output_dir, plot, comparison_dir=None,$/;"	f
generate_parameter_diff_plots	nnet3/report/generate_plots.py	/^def generate_parameter_diff_plots(exp_dir, output_dir, plot,$/;"	f
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastNormOpgruLayer
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastNormPgruLayer
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastOpgruLayer
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastPgruLayer
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigNormOpgruLayer
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigNormPgruLayer
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigOpgruLayer
generate_pgru_config	libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigPgruLayer
generate_plots	nnet3/report/generate_plots.py	/^def generate_plots(exp_dir, output_dir, output_names, comparison_dir=None,$/;"	f
generate_reverberated_wav_scp	data/reverberate_data_dir.py	/^def generate_reverberated_wav_scp(wav_scp,  # a dictionary whose values are the Kaldi-IO strings of the speech recordings$/;"	f
generate_reverberation_opts	data/reverberate_data_dir.py	/^def generate_reverberation_opts(room_dict,  # the room dictionary, please refer to make_room_dict() for the format$/;"	f
get_action_dict	nnet3/report/convert_model.py	/^def get_action_dict(component_type):$/;"	f
get_args	chain/e2e/train_e2e.py	/^def get_args():$/;"	f
get_args	chain/train.py	/^def get_args():$/;"	f
get_args	cleanup/internal/align_ctm_ref.py	/^def get_args():$/;"	f
get_args	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def get_args():$/;"	f
get_args	cleanup/internal/retrieve_similar_docs.py	/^def get_args():$/;"	f
get_args	cleanup/internal/segment_ctm_edits_mild.py	/^def get_args():$/;"	f
get_args	cleanup/internal/stitch_documents.py	/^def get_args():$/;"	f
get_args	data/augment_data_dir.py	/^def get_args():$/;"	f
get_args	data/make_musan.py	/^def get_args():$/;"	f
get_args	data/reverberate_data_dir.py	/^def get_args():$/;"	f
get_args	nnet3/chain/e2e/train_e2e.py	/^def get_args():$/;"	f
get_args	nnet3/chain/train.py	/^def get_args():$/;"	f
get_args	nnet3/multilingual/allocate_multilingual_examples.py	/^def get_args():$/;"	f
get_args	nnet3/report/generate_plots.py	/^def get_args():$/;"	f
get_args	nnet3/train_dnn.py	/^def get_args():$/;"	f
get_args	nnet3/train_raw_dnn.py	/^def get_args():$/;"	f
get_args	nnet3/train_raw_rnn.py	/^def get_args():$/;"	f
get_args	nnet3/train_rnn.py	/^def get_args():$/;"	f
get_args	nnet3/xconfig_to_config.py	/^def get_args():$/;"	f
get_args	nnet3/xconfig_to_configs.py	/^def get_args():$/;"	f
get_args	segmentation/convert_utt2spk_and_segments_to_rttm.py	/^def get_args():$/;"	f
get_args	segmentation/internal/arc_info_to_targets.py	/^def get_args():$/;"	f
get_args	segmentation/internal/get_default_targets_for_out_of_segments.py	/^def get_args():$/;"	f
get_args	segmentation/internal/get_transform_probs_mat.py	/^def get_args():$/;"	f
get_args	segmentation/internal/merge_segment_targets_to_recording.py	/^def get_args():$/;"	f
get_args	segmentation/internal/merge_targets.py	/^def get_args():$/;"	f
get_args	segmentation/internal/prepare_sad_graph.py	/^def get_args():$/;"	f
get_args	segmentation/internal/resample_targets.py	/^def get_args():$/;"	f
get_args	segmentation/internal/sad_to_segments.py	/^def get_args():$/;"	f
get_args	segmentation/internal/verify_phones_list.py	/^def get_args():$/;"	f
get_average_nnet_model	libs/nnet3/train/common.py	/^def get_average_nnet_model(dir, iter, nnets_list, run_opts,$/;"	f
get_best_nnet_model	libs/nnet3/train/common.py	/^def get_best_nnet_model(dir, iter, best_model_index, run_opts,$/;"	f
get_combine_info	info/chain_dir_info.pl	/^sub get_combine_info {$/;"	s
get_combine_info	info/nnet2_dir_info.pl	/^sub get_combine_info {$/;"	s
get_combine_info	info/nnet3_dir_info.pl	/^sub get_combine_info {$/;"	s
get_command_stdout	libs/common.py	/^def get_command_stdout(command, require_zero_status = True):$/;"	f
get_config	tfrnnlm/lstm.py	/^def get_config():$/;"	f
get_config	tfrnnlm/lstm_fast.py	/^def get_config():$/;"	f
get_config	tfrnnlm/vanilla_rnnlm.py	/^def get_config():$/;"	f
get_config_headers	nnet3/xconfig_to_configs.py	/^def get_config_headers():$/;"	f
get_convolution_index_set	nnet2/make_multisplice_configs.py	/^def get_convolution_index_set(x, y):$/;"	f
get_ctm_edits	cleanup/internal/align_ctm_ref.py	/^def get_ctm_edits(alignment_output, ctm_array, eps_symbol="<eps>",$/;"	f
get_current_num_jobs	libs/nnet3/train/common.py	/^def get_current_num_jobs(it, num_it, start, step, end):$/;"	f
get_dim_for_descriptor	libs/nnet3/xconfig/basic_layers.py	/^    def get_dim_for_descriptor(self, descriptor, all_layers):$/;"	m	class:XconfigLayerBase
get_dim_from_layer_name	libs/nnet3/xconfig/utils.py	/^def get_dim_from_layer_name(all_layers, current_layer, full_layer_name):$/;"	f
get_document_ids	cleanup/internal/retrieve_similar_docs.py	/^def get_document_ids(source_docs, indexes):$/;"	f
get_dropout_edit_string	libs/nnet3/train/dropout_schedule.py	/^def get_dropout_edit_string(dropout_schedule, data_fraction, iter_):$/;"	f
get_edit_type	cleanup/internal/align_ctm_ref.py	/^def get_edit_type(hyp_word, ref_word, duration=-1, eps_symbol='<eps>',$/;"	f
get_effective_learning_rate_str	info/nnet3_disc_dir_info.pl	/^sub get_effective_learning_rate_str {$/;"	s
get_feat_dim	libs/common.py	/^def get_feat_dim(feat_dir):$/;"	f
get_feat_dim_from_scp	libs/common.py	/^def get_feat_dim_from_scp(feat_scp):$/;"	f
get_fmllr_info	info/gmm_dir_info.pl	/^sub get_fmllr_info {$/;"	s
get_full_config	libs/nnet3/xconfig/attention.py	/^    def get_full_config(self):$/;"	m	class:XconfigAttentionLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigAffineLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigBasicLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigExistingLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigFixedAffineLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigIdctLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigInputLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigLayerBase
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigOutputLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigSpecAugmentLayer
get_full_config	libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigTrivialOutputLayer
get_full_config	libs/nnet3/xconfig/composite_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigPrefinalLayer
get_full_config	libs/nnet3/xconfig/composite_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigTdnnfLayer
get_full_config	libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:ChannelAverageLayer
get_full_config	libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:XconfigConvLayer
get_full_config	libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:XconfigRes2Block
get_full_config	libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:XconfigResBlock
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastGruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastNormOpgruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastNormPgruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastOpgruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastPgruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigGruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigNormOpgruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigNormPgruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigOpgruLayer
get_full_config	libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigPgruLayer
get_full_config	libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastLstmLayer
get_full_config	libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastLstmpLayer
get_full_config	libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigLstmLayer
get_full_config	libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigLstmbLayer
get_full_config	libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigLstmpLayer
get_full_config	libs/nnet3/xconfig/stats_layer.py	/^    def get_full_config(self):$/;"	m	class:XconfigStatsLayer
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigAffineComponent
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigBatchnormComponent
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigDeltaLayer
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigDimRangeComponent
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigLinearComponent
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigNoOpComponent
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigPerElementOffsetComponent
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigPerElementScaleComponent
get_full_config	libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigRenormComponent
get_input_descriptor_names	libs/nnet3/xconfig/basic_layers.py	/^    def get_input_descriptor_names(self):$/;"	m	class:XconfigExistingLayer
get_input_descriptor_names	libs/nnet3/xconfig/basic_layers.py	/^    def get_input_descriptor_names(self):$/;"	m	class:XconfigInputLayer
get_input_descriptor_names	libs/nnet3/xconfig/basic_layers.py	/^    def get_input_descriptor_names(self):$/;"	m	class:XconfigLayerBase
get_input_model_info	libs/nnet3/train/common.py	/^def get_input_model_info(input_model):$/;"	f
get_inverse_document_frequency	cleanup/internal/tf_idf.py	/^    def get_inverse_document_frequency(self, term, weighting_scheme="log"):$/;"	m	class:IDFStats
get_iters_for_epochs	info/nnet3_disc_dir_info.pl	/^sub get_iters_for_epochs {$/;"	s
get_ivector_dim	libs/common.py	/^def get_ivector_dim(ivector_dir=None):$/;"	f
get_ivector_extractor_id	libs/common.py	/^def get_ivector_extractor_id(ivector_dir=None):$/;"	f
get_junk_duration	cleanup/internal/segment_ctm_edits_mild.py	/^    def get_junk_duration(self):$/;"	m	class:Segment
get_junk_proportion	cleanup/internal/segment_ctm_edits_mild.py	/^    def get_junk_proportion(self):$/;"	m	class:Segment
get_last_align_info	info/gmm_dir_info.pl	/^sub get_last_align_info {$/;"	s
get_last_update_info	info/gmm_dir_info.pl	/^sub get_last_update_info {$/;"	s
get_lda_info	info/gmm_dir_info.pl	/^sub get_lda_info {$/;"	s
get_learning_rate	libs/nnet3/train/common.py	/^def get_learning_rate(iter, num_jobs, num_iters, num_archives_processed,$/;"	f
get_loglike_and_accuracy_info	info/nnet2_dir_info.pl	/^sub get_loglike_and_accuracy_info {$/;"	s
get_loglike_and_accuracy_info	info/nnet3_dir_info.pl	/^sub get_loglike_and_accuracy_info {$/;"	s
get_logprob_and_accuracy_info	info/chain_dir_info.pl	/^sub get_logprob_and_accuracy_info {$/;"	s
get_mllt_info	info/gmm_dir_info.pl	/^sub get_mllt_info {$/;"	s
get_model_combine_iters	libs/nnet3/train/common.py	/^def get_model_combine_iters(num_iters, num_epochs,$/;"	f
get_model_component_info	libs/nnet3/xconfig/parser.py	/^def get_model_component_info(model_filename):$/;"	f
get_multitask_egs_opts	libs/nnet3/train/common.py	/^def get_multitask_egs_opts(egs_dir, egs_prefix="",$/;"	f
get_name	libs/nnet3/xconfig/basic_layers.py	/^    def get_name(self):$/;"	m	class:XconfigLayerBase
get_new_id	data/augment_data_dir.py	/^def get_new_id(utt, utt_modifier_type, utt_modifier):$/;"	f
get_new_id	data/reverberate_data_dir.py	/^def get_new_id(id, prefix=None, copy=0):$/;"	f
get_noise_list	data/augment_data_dir.py	/^def get_noise_list(noise_wav_scp_filename):$/;"	f
get_num_iters	info/chain_dir_info.pl	/^sub get_num_iters {$/;"	s
get_num_iters	info/nnet2_dir_info.pl	/^sub get_num_iters {$/;"	s
get_num_iters	info/nnet3_dir_info.pl	/^sub get_num_iters {$/;"	s
get_num_jobs	info/gmm_dir_info.pl	/^sub get_num_jobs {$/;"	s
get_num_jobs	info/nnet3_disc_dir_info.pl	/^sub get_num_jobs {$/;"	s
get_num_jobs_final	info/chain_dir_info.pl	/^sub get_num_jobs_final {  # expects $num_iters to exist as a global variable.$/;"	s
get_num_jobs_final	info/nnet2_dir_info.pl	/^sub get_num_jobs_final {  # expects $num_iters to exist as a global variable.$/;"	s
get_num_jobs_final	info/nnet3_dir_info.pl	/^sub get_num_jobs_final {  # expects $num_iters to exist as a global variable.$/;"	s
get_num_jobs_initial	info/chain_dir_info.pl	/^sub get_num_jobs_initial {$/;"	s
get_num_jobs_initial	info/nnet2_dir_info.pl	/^sub get_num_jobs_initial {$/;"	s
get_num_jobs_initial	info/nnet3_dir_info.pl	/^sub get_num_jobs_initial {$/;"	s
get_number_of_jobs	libs/common.py	/^def get_number_of_jobs(alidir):$/;"	f
get_number_of_leaves_from_model	libs/common.py	/^def get_number_of_leaves_from_model(dir):$/;"	f
get_number_of_leaves_from_tree	libs/common.py	/^def get_number_of_leaves_from_tree(alidir):$/;"	f
get_objf_str	info/nnet3_disc_dir_info.pl	/^sub get_objf_str {$/;"	s
get_outputs_list	libs/nnet3/train/common.py	/^def get_outputs_list(model_file, get_raw_nnet_from_am=True):$/;"	f
get_prev_names	libs/nnet3/xconfig/utils.py	/^def get_prev_names(all_layers, current_layer):$/;"	f
get_printed_string	info/chain_dir_info.pl	/^sub get_printed_string {$/;"	s
get_printed_string	info/nnet2_dir_info.pl	/^sub get_printed_string {$/;"	s
get_printed_string	info/nnet3_dir_info.pl	/^sub get_printed_string {$/;"	s
get_progress_info	info/chain_dir_info.pl	/^sub get_progress_info {$/;"	s
get_progress_info	info/nnet2_dir_info.pl	/^sub get_progress_info {$/;"	s
get_progress_info	info/nnet3_dir_info.pl	/^sub get_progress_info {$/;"	s
get_realign_iters	libs/nnet3/train/frame_level_objf/common.py	/^def get_realign_iters(realign_times, num_iters,$/;"	f
get_segments_for_utterance	cleanup/internal/segment_ctm_edits_mild.py	/^def get_segments_for_utterance(split_lines_of_utt, args, utterance_stats):$/;"	f
get_stdout_from_command	nnet3/report/convert_model.py	/^def get_stdout_from_command(command):$/;"	f
get_string_for_descriptor	libs/nnet3/xconfig/basic_layers.py	/^    def get_string_for_descriptor(self, descriptor, all_layers):$/;"	m	class:XconfigLayerBase
get_string_from_layer_name	libs/nnet3/xconfig/utils.py	/^def get_string_from_layer_name(all_layers, current_layer, full_layer_name):$/;"	f
get_successful_models	libs/nnet3/train/common.py	/^def get_successful_models(num_models, log_file_pattern,$/;"	f
get_term_frequency	cleanup/internal/tf_idf.py	/^    def get_term_frequency(self, term, doc, weighting_scheme="raw",$/;"	m	class:TFStats
get_train_times	libs/nnet3/report/log_parse.py	/^def get_train_times(exp_dir):$/;"	f
get_tree_info	info/gmm_dir_info.pl	/^sub get_tree_info {$/;"	s
get_value	cleanup/internal/tf_idf.py	/^    def get_value(self, term, doc):$/;"	m	class:TFIDF
global_verbose	segmentation/internal/sad_to_segments.py	/^    global_verbose = args.verbose$/;"	v
global_verbose	segmentation/internal/sad_to_segments.py	/^global_verbose = 0$/;"	v
h_t1	conf/append_prf_to_ctm.py	/^      h_t1 = l$/;"	v
halve_minibatch_size_str	libs/nnet3/train/common.py	/^def halve_minibatch_size_str(minibatch_size_str):$/;"	f
halve_range_str	libs/nnet3/train/common.py	/^def halve_range_str(range_str):$/;"	f
handler	chain/e2e/train_e2e.py	/^handler = logging.StreamHandler()$/;"	v
handler	chain/train.py	/^handler = logging.StreamHandler()$/;"	v
handler	cleanup/internal/align_ctm_ref.py	/^handler = logging.StreamHandler()$/;"	v
handler	cleanup/internal/compute_tf_idf.py	/^handler = logging.StreamHandler()$/;"	v
handler	cleanup/internal/get_non_scored_words.py	/^handler = logging.StreamHandler()$/;"	v
handler	cleanup/internal/modify_ctm_edits.py	/^handler = logging.StreamHandler()$/;"	v
handler	cleanup/internal/resolve_ctm_edits_overlaps.py	/^handler = logging.StreamHandler()$/;"	v
handler	cleanup/internal/retrieve_similar_docs.py	/^handler = logging.StreamHandler()$/;"	v
handler	cleanup/internal/stitch_documents.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/chain/e2e/train_e2e.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/chain/train.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/convert_nnet2_to_nnet3.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/multilingual/allocate_multilingual_examples.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/train_dnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/train_raw_dnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/train_raw_rnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	nnet3/train_rnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	segmentation/internal/arc_info_to_targets.py	/^handler = logging.StreamHandler()$/;"	v
handler	segmentation/internal/get_default_targets_for_out_of_segments.py	/^handler = logging.StreamHandler()$/;"	v
handler	segmentation/internal/merge_segment_targets_to_recording.py	/^handler = logging.StreamHandler()$/;"	v
handler	segmentation/internal/merge_targets.py	/^handler = logging.StreamHandler()$/;"	v
handler	segmentation/internal/prepare_sad_graph.py	/^handler = logging.StreamHandler()$/;"	v
handler	segmentation/internal/resample_targets.py	/^handler = logging.StreamHandler()$/;"	v
handler	segmentation/internal/sad_to_segments.py	/^handler = logging.StreamHandler()$/;"	v
help	chain/e2e/compute_biphone_stats.py	/^                    help="If true, stats will be collected for shared phones.")$/;"	v
help	chain/e2e/text_to_phones.py	/^                    help="Probability of optional silence between the words.")$/;"	v
help	chain/gen_topo.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	chain/gen_topo.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	chain/gen_topo2.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	chain/gen_topo2.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	chain/gen_topo3.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	chain/gen_topo3.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	chain/gen_topo4.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	chain/gen_topo4.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	chain/gen_topo5.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	chain/gen_topo5.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	chain/gen_topo_orig.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	chain/gen_topo_orig.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	cleanup/internal/get_ctm_edits.py	/^                    help = "Filename of input hypothesis in ctm format")$/;"	v
help	cleanup/internal/get_ctm_edits.py	/^                    help = "Filename of output (CTM appended with word-edit information)")$/;"	v
help	cleanup/internal/get_ctm_edits.py	/^                    help = "Filename of output of 'align-text', which this program reads. "$/;"	v
help	cleanup/internal/get_ctm_edits.py	/^                    help = "The integer representation of the OOV symbol; substitutions "$/;"	v
help	cleanup/internal/get_ctm_edits.py	/^                    help = "The words.txt your system used; if supplied, it is used to "$/;"	v
help	cleanup/internal/get_non_scored_words.py	/^                    help = "The lang\/ directory.  This program expects "$/;"	v
help	cleanup/internal/make_one_biased_lm.py	/^                    help = "Discounting constant D for standard (unmodified) Kneser-Ney; "$/;"	v
help	cleanup/internal/make_one_biased_lm.py	/^                    help = "File containing frequent words and probabilities to be added into "$/;"	v
help	cleanup/internal/make_one_biased_lm.py	/^                    help = "Integer corresponding to the disambiguation "$/;"	v
help	cleanup/internal/make_one_biased_lm.py	/^                    help = "Maximum order of n-gram to use (but see also "$/;"	v
help	cleanup/internal/make_one_biased_lm.py	/^                    help = "Minimum count below which we will completely "$/;"	v
help	cleanup/internal/modify_ctm_edits.py	/^                    help = "Filename of input ctm-edits file. "$/;"	v
help	cleanup/internal/modify_ctm_edits.py	/^                    help = "Filename of output ctm-edits file. "$/;"	v
help	cleanup/internal/modify_ctm_edits.py	/^                    help = "If true, allow repetitions in the transcript of one or "$/;"	v
help	cleanup/internal/modify_ctm_edits.py	/^                    help="Filename of file containing a list of non-scored words, "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Amount of padding with <unk> that we do if a segment boundary is "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename for output of word-level stats, of the form "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of file such as data\/lang\/oov.txt which contains "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of input ctm-edits file. "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of output segments.  This has the same format as data\/train\/segments, "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of output text file (same format as data\/train\/text, i.e. "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename to output an extended version of the ctm-edits format "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of a non-scored word (noise, cough, etc.) "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of a non-scored word (noise, etc.) if "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of any 'tainted' line.  Note: "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of silence if it appears at the "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of silence if it appears inside a segment "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum proportion of the time of the segment that may "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Minimum allowed segment length (in seconds) for any "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "Minimum allowed segment length (in seconds) for newly "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "This only affects rounding of the output times; they will "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help = "When merging segments that are found to be overlapping or "$/;"	v
help	cleanup/internal/segment_ctm_edits.py	/^                    help="Filename of file containing a list of non-scored words, "$/;"	v
help	cleanup/internal/taint_ctm_edits.py	/^                    help = "Filename of input ctm-edits file. "$/;"	v
help	cleanup/internal/taint_ctm_edits.py	/^                    help = "Filename of output ctm-edits file. "$/;"	v
help	cleanup/internal/taint_ctm_edits.py	/^                    help = "Remove deletions next to taintable lines")$/;"	v
help	cleanup/make_biased_lms.py	/^                    help = "Filename to which a map from input utterances to grouped "$/;"	v
help	cleanup/make_biased_lms.py	/^                    help = "Minimum number of words per utterance group; this program "$/;"	v
help	cleanup/make_biased_lms.py	/^                    help = "Options to pass in to make_one_biased_lm.py (which "$/;"	v
help	diagnostic/analyze_lattice_depth_stats.py	/^                    help="Language directory, e.g. data\/lang.")$/;"	v
help	diagnostic/analyze_phone_length_stats.py	/^                    help="Language directory, e.g. data\/lang.")$/;"	v
help	nnet3/chain/e2e/compute_biphone_stats.py	/^                    help="If true, stats will be collected for shared phones.")$/;"	v
help	nnet3/chain/e2e/text_to_phones.py	/^                    help="Probability of optional silence between the words.")$/;"	v
help	nnet3/chain/gen_topo.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	nnet3/chain/gen_topo.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	nnet3/chain/gen_topo2.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	nnet3/chain/gen_topo2.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	nnet3/chain/gen_topo3.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	nnet3/chain/gen_topo3.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	nnet3/chain/gen_topo4.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	nnet3/chain/gen_topo4.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	nnet3/chain/gen_topo5.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	nnet3/chain/gen_topo5.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	nnet3/chain/gen_topo_orig.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	nnet3/chain/gen_topo_orig.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	nnet3/dot/nnet3_to_dot.py	/^                        help="Attributes of the components which should be displayed in the dot-graph "$/;"	v
help	nnet3/dot/nnet3_to_dot.py	/^                        help="list of prefixes. Nnet3 components\/component-nodes with the same prefix"$/;"	v
help	nnet3/get_successful_models.py	/^                        help="Number of models.")$/;"	v
help	nnet3/get_successful_models.py	/^                        help="Pattern for identifying the log-file names. "$/;"	v
help	nnet3/get_successful_models.py	/^                        help="The threshold for discarding models, "$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="Directory to write config files and variables");$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="RMS target for final layer (set to <1 if final layer learns too fast",$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="Raw feature dimension, e.g. 13")$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="Splice indexes at each hidden layer, e.g. '-3,-2,-1,0,1,2,3 0 -2,2 0 -4,4 0 -8,8'")$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="dimension of ReLU nonlinearities")$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="if true, a presoftmax-prior-scale is added",$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="input dimension to p-norm nonlinearities")$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="number of network targets (e.g. num-pdf-ids\/num-leaves)")$/;"	v
help	nnet3/make_tdnn_configs.py	/^                    help="output dimension of p-norm nonlinearities")$/;"	v
help	segmentation/internal/resample_targets.py	/^                        help="Input targets archive")$/;"	v
help	segmentation/internal/resample_targets.py	/^                        help="Output targets archive")$/;"	v
help	segmentation/internal/resample_targets.py	/^                        help="The sampling rate is scaled by this factor")$/;"	v
help	segmentation/internal/resample_targets.py	/^                        help="Verbose level")$/;"	v
help	segmentation/internal/sad_to_segments.py	/^                        help="Additional padding on speech segments. But we "$/;"	v
help	segmentation/internal/sad_to_segments.py	/^                        help="File containing durations of utterances.")$/;"	v
help	segmentation/internal/sad_to_segments.py	/^                        help="Frame shift to convert frame indexes to time")$/;"	v
help	segmentation/internal/sad_to_segments.py	/^                        help="Input file containing alignments in "$/;"	v
help	segmentation/internal/sad_to_segments.py	/^                        help="Merge consecutive segments as long as the merged "$/;"	v
help	segmentation/internal/sad_to_segments.py	/^                        help="Minimum duration (in seconds) required for a segment "$/;"	v
help	segmentation/internal/sad_to_segments.py	/^                        help="Output kaldi segments file")$/;"	v
hidden_size	tfrnnlm/lstm.py	/^  hidden_size = 200$/;"	v	class:Config
hidden_size	tfrnnlm/lstm_fast.py	/^  hidden_size = 200$/;"	v	class:Config
hidden_size	tfrnnlm/vanilla_rnnlm.py	/^  hidden_size = 200$/;"	v	class:Config
hours_nonsil	diagnostic/analyze_phone_length_stats.py	/^    hours_nonsil = (total_frames['all'] - total_optsil_frames) \/ 360000.0$/;"	v
hours_total	diagnostic/analyze_phone_length_stats.py	/^    hours_total = total_frames['all'] \/ 360000.0;$/;"	v
hyp	conf/append_eval_to_ctm.py	/^    hyp = f.readline()$/;"	v
hyp_vec	conf/append_eval_to_ctm.py	/^    hyp_vec = hyp_vec.split()$/;"	v
hyp_wrd	conf/append_eval_to_ctm.py	/^      hyp_wrd = merged[j][-1]$/;"	v
incorrect_proportion	cleanup/internal/segment_ctm_edits_mild.py	/^    def incorrect_proportion(self):$/;"	m	class:SegmentStats
init_scale	tfrnnlm/lstm.py	/^  init_scale = 0.1$/;"	v	class:Config
init_scale	tfrnnlm/lstm_fast.py	/^  init_scale = 0.1$/;"	v	class:Config
init_scale	tfrnnlm/vanilla_rnnlm.py	/^  init_scale = 0.1$/;"	v	class:Config
initial_state	tfrnnlm/lstm.py	/^  def initial_state(self):$/;"	m	class:RnnlmModel
initial_state	tfrnnlm/lstm_fast.py	/^  def initial_state(self):$/;"	m	class:RnnlmModel
initial_state	tfrnnlm/vanilla_rnnlm.py	/^  def initial_state(self):$/;"	m	class:RnnlmModel
initialize_segments	segmentation/internal/sad_to_segments.py	/^    def initialize_segments(self, alignment, frame_shift=0.01):$/;"	m	class:Segmentation
input	tfrnnlm/lstm.py	/^  def input(self):$/;"	m	class:RnnlmModel
input	tfrnnlm/lstm_fast.py	/^  def input(self):$/;"	m	class:RnnlmModel
input	tfrnnlm/vanilla_rnnlm.py	/^  def input(self):$/;"	m	class:RnnlmModel
input_dim	nnet3/make_tdnn_configs.py	/^input_dim = len(splice_array[0]) * args.feat_dim  +  args.ivector_dim$/;"	v
insert_a_column_legend	nnet3/report/generate_plots.py	/^def insert_a_column_legend(legend_handle, legend_label, lp, mp, hp,$/;"	f
int_list	nnet3/make_tdnn_configs.py	/^        int_list = []$/;"	v
internal_frame_percent	diagnostic/analyze_phone_length_stats.py	/^    internal_frame_percent = total_frames['internal'] * 100.0 \/ total_frames['all']$/;"	v
internal_opt_sil_phone_lengths	diagnostic/analyze_phone_length_stats.py	/^internal_opt_sil_phone_lengths = dict(phone_lengths['all'][optional_silence_phone])$/;"	v
is_component_type	nnet3/report/convert_model.py	/^def is_component_type(component_type):$/;"	f
is_tainted	cleanup/internal/segment_ctm_edits_mild.py	/^def is_tainted(split_line_of_utt):$/;"	f
is_valid_line_name	libs/nnet3/xconfig/utils.py	/^def is_valid_line_name(name):$/;"	f
is_whole_utterance	cleanup/internal/segment_ctm_edits_mild.py	/^    def is_whole_utterance(self):$/;"	m	class:Segment
keep_prob	tfrnnlm/lstm.py	/^  keep_prob = 1.0$/;"	v	class:Config
keep_prob	tfrnnlm/lstm_fast.py	/^  keep_prob = 1.0$/;"	v	class:Config
keep_prob	tfrnnlm/vanilla_rnnlm.py	/^  keep_prob = 1$/;"	v	class:Config
key	chain/e2e/compute_biphone_stats.py	/^    key = line[0]$/;"	v
key	chain/e2e/text_to_phones.py	/^    key = line[0]$/;"	v
key	conf/append_prf_to_ctm.py	/^      key='%s,%s' % (f,c) # file,channel$/;"	v
key	conf/prepare_calibration_data.py	/^      key = "%s^%s^%s^%s^%s,%s,%s" % (utt, chan, beg, dur, wrd_id, conf, score_tag)$/;"	v
key	conf/prepare_calibration_data.py	/^    key = "%s^%s^%s^%s^%s,%s,%s" % (utt, chan, beg, dur, wrd_id, conf, score_tag)$/;"	v
key	nnet3/chain/e2e/compute_biphone_stats.py	/^    key = line[0]$/;"	v
key	nnet3/chain/e2e/text_to_phones.py	/^    key = line[0]$/;"	v
largest_count	diagnostic/analyze_phone_length_stats.py	/^                largest_count = this_count$/;"	v
largest_count	diagnostic/analyze_phone_length_stats.py	/^    largest_count = 0$/;"	v
latex_compliant_name	nnet3/report/generate_plots.py	/^def latex_compliant_name(name_string):$/;"	f
learning_rate	tfrnnlm/lstm.py	/^  learning_rate = 1.0$/;"	v	class:Config
learning_rate	tfrnnlm/lstm_fast.py	/^  learning_rate = 1$/;"	v	class:Config
learning_rate	tfrnnlm/vanilla_rnnlm.py	/^  learning_rate = 0.2$/;"	v	class:Config
left_context	nnet3/make_tdnn_configs.py	/^left_context = 0$/;"	v
left_context	nnet3/make_tdnn_configs.py	/^left_context = max(0, left_context)$/;"	v
length	cleanup/internal/segment_ctm_edits_mild.py	/^    def length(self):$/;"	m	class:Segment
level	nnet3/report/generate_plots.py	/^                    level=logging.INFO)$/;"	v
lexicon	chain/e2e/text_to_phones.py	/^lexicon = {}$/;"	v
lexicon	nnet3/chain/e2e/text_to_phones.py	/^lexicon = {}$/;"	v
line	chain/e2e/compute_biphone_stats.py	/^    line = line.strip().split()$/;"	v
line	chain/e2e/text_to_phones.py	/^        line = line.strip();$/;"	v
line	chain/e2e/text_to_phones.py	/^    line = line.strip().split()$/;"	v
line	cleanup/internal/segment_ctm_edits.py	/^            line = f.readline()$/;"	v
line	cleanup/make_biased_lms.py	/^    line = sys.stdin.readline();$/;"	v
line	diagnostic/analyze_lattice_depth_stats.py	/^    line = f.readline()$/;"	v
line	diagnostic/analyze_lattice_depth_stats.py	/^    line = sys.stdin.readline()$/;"	v
line	diagnostic/analyze_phone_length_stats.py	/^    line = f.readline()$/;"	v
line	diagnostic/analyze_phone_length_stats.py	/^    line = sys.stdin.readline()$/;"	v
line	nnet3/chain/e2e/compute_biphone_stats.py	/^    line = line.strip().split()$/;"	v
line	nnet3/chain/e2e/text_to_phones.py	/^        line = line.strip();$/;"	v
line	nnet3/chain/e2e/text_to_phones.py	/^    line = line.strip().split()$/;"	v
line_phones	chain/e2e/compute_biphone_stats.py	/^    line_phones = line[1:]$/;"	v
line_phones	nnet3/chain/e2e/compute_biphone_stats.py	/^    line_phones = line[1:]$/;"	v
lines	nnet3/dot/nnet3_to_dot.py	/^    lines = sys.stdin.readlines()$/;"	v
lines	nnet3/get_successful_models.py	/^        lines = open(logfile, 'r').readlines()$/;"	v
list	nnet3/make_tdnn_configs.py	/^list=[ ('Offset(input, {0})'.format(n) if n != 0 else 'input' ) for n in splice_array[0] ]$/;"	v
list_all_log_files	info/chain_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_all_log_files	info/gmm_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_all_log_files	info/nnet2_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_all_log_files	info/nnet3_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_cyclic_iterator	data/reverberate_data_dir.py	/^class list_cyclic_iterator(object):$/;"	c
log_avg_depth	conf/prepare_calibration_data.py	/^      log_avg_depth = math.log(float(sum(depth_slice))\/len(depth_slice))$/;"	v
log_word_length	conf/prepare_calibration_data.py	/^    log_word_length = math.log(word_length[wrd_id]) # i.e. number of phones in a word,$/;"	v
logfile	nnet3/get_successful_models.py	/^        logfile = re.sub('%', str(model_num), args.logfile_pattern)$/;"	v
logger	chain/e2e/train_e2e.py	/^logger = logging.getLogger('libs')$/;"	v
logger	chain/train.py	/^logger = logging.getLogger('libs')$/;"	v
logger	cleanup/internal/align_ctm_ref.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	cleanup/internal/compute_tf_idf.py	/^logger = logging.getLogger('tf_idf')$/;"	v
logger	cleanup/internal/get_non_scored_words.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	cleanup/internal/modify_ctm_edits.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	cleanup/internal/resolve_ctm_edits_overlaps.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	cleanup/internal/retrieve_similar_docs.py	/^logger = logging.getLogger('__name__')$/;"	v
logger	cleanup/internal/stitch_documents.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	cleanup/internal/tf_idf.py	/^logger = logging.getLogger('__name__')$/;"	v
logger	libs/common.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	libs/nnet3/report/log_parse.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	libs/nnet3/train/chain_objf/acoustic_model.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	libs/nnet3/train/common.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	libs/nnet3/train/dropout_schedule.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	libs/nnet3/train/frame_level_objf/acoustic_model.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	libs/nnet3/train/frame_level_objf/common.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	libs/nnet3/train/frame_level_objf/raw_model.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	nnet3/chain/e2e/train_e2e.py	/^logger = logging.getLogger('libs')$/;"	v
logger	nnet3/chain/train.py	/^logger = logging.getLogger('libs')$/;"	v
logger	nnet3/convert_nnet2_to_nnet3.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	nnet3/multilingual/allocate_multilingual_examples.py	/^logger = logging.getLogger('libs')$/;"	v
logger	nnet3/report/generate_plots.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	nnet3/train_dnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	nnet3/train_raw_dnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	nnet3/train_raw_rnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	nnet3/train_rnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	segmentation/internal/arc_info_to_targets.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	segmentation/internal/get_default_targets_for_out_of_segments.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	segmentation/internal/merge_segment_targets_to_recording.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	segmentation/internal/merge_targets.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	segmentation/internal/prepare_sad_graph.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	segmentation/internal/resample_targets.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	segmentation/internal/sad_to_segments.py	/^logger = logging.getLogger(__name__)$/;"	v
logging	tfrnnlm/lstm.py	/^logging = tf.logging$/;"	v
logging	tfrnnlm/lstm_fast.py	/^logging = tf.logging$/;"	v
logging	tfrnnlm/vanilla_rnnlm.py	/^logging = tf.logging$/;"	v
logit	conf/prepare_calibration_data.py	/^    logit = math.log(float(conf)+damper) - math.log(1.0 - float(conf)+damper)$/;"	v
loss	nnet3/get_successful_models.py	/^    loss = []$/;"	v
lr	tfrnnlm/lstm.py	/^  def lr(self):$/;"	m	class:RnnlmModel
lr	tfrnnlm/lstm_fast.py	/^  def lr(self):$/;"	m	class:RnnlmModel
lr	tfrnnlm/vanilla_rnnlm.py	/^  def lr(self):$/;"	m	class:RnnlmModel
lr_decay	tfrnnlm/lstm.py	/^  lr_decay = 0.5$/;"	v	class:Config
lr_decay	tfrnnlm/lstm_fast.py	/^  lr_decay = 0.8$/;"	v	class:Config
lr_decay	tfrnnlm/vanilla_rnnlm.py	/^  lr_decay = 0.95$/;"	v	class:Config
lstm_cell	tfrnnlm/lstm.py	/^    def lstm_cell():$/;"	f	function:RnnlmModel.__init__
lstm_cell	tfrnnlm/lstm_fast.py	/^    def lstm_cell():$/;"	f	function:RnnlmModel.__init__
m	nnet3/report/convert_model.py	/^   m = read_model(sys.argv[1])$/;"	v
main	chain/e2e/train_e2e.py	/^def main():$/;"	f
main	chain/train.py	/^def main():$/;"	f
main	cleanup/internal/align_ctm_ref.py	/^def main():$/;"	f
main	cleanup/internal/compute_tf_idf.py	/^def main():$/;"	f
main	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def main():$/;"	f
main	cleanup/internal/retrieve_similar_docs.py	/^def main():$/;"	f
main	cleanup/internal/segment_ctm_edits_mild.py	/^def main():$/;"	f
main	cleanup/internal/stitch_documents.py	/^def main():$/;"	f
main	data/augment_data_dir.py	/^def main():$/;"	f
main	data/make_musan.py	/^def main():$/;"	f
main	data/reverberate_data_dir.py	/^def main():$/;"	f
main	nnet3/chain/e2e/train_e2e.py	/^def main():$/;"	f
main	nnet3/chain/train.py	/^def main():$/;"	f
main	nnet3/multilingual/allocate_multilingual_examples.py	/^def main():$/;"	f
main	nnet3/report/generate_plots.py	/^def main():$/;"	f
main	nnet3/train_dnn.py	/^def main():$/;"	f
main	nnet3/train_raw_dnn.py	/^def main():$/;"	f
main	nnet3/train_raw_rnn.py	/^def main():$/;"	f
main	nnet3/train_rnn.py	/^def main():$/;"	f
main	nnet3/xconfig_to_config.py	/^def main():$/;"	f
main	nnet3/xconfig_to_configs.py	/^def main():$/;"	f
main	segmentation/convert_utt2spk_and_segments_to_rttm.py	/^def main():$/;"	f
main	segmentation/internal/arc_info_to_targets.py	/^def main():$/;"	f
main	segmentation/internal/find_oov_phone.py	/^def main():$/;"	f
main	segmentation/internal/get_default_targets_for_out_of_segments.py	/^def main():$/;"	f
main	segmentation/internal/get_transform_probs_mat.py	/^def main():$/;"	f
main	segmentation/internal/merge_segment_targets_to_recording.py	/^def main():$/;"	f
main	segmentation/internal/merge_targets.py	/^def main():$/;"	f
main	segmentation/internal/prepare_sad_graph.py	/^def main():$/;"	f
main	segmentation/internal/resample_targets.py	/^def main():$/;"	f
main	segmentation/internal/sad_to_segments.py	/^def main():$/;"	f
main	segmentation/internal/verify_phones_list.py	/^def main():$/;"	f
main	tfrnnlm/lstm.py	/^def main(_):$/;"	f
main	tfrnnlm/lstm_fast.py	/^def main(_):$/;"	f
main	tfrnnlm/vanilla_rnnlm.py	/^def main(_):$/;"	f
make_room_dict	data/reverberate_data_dir.py	/^def make_room_dict(rir_list):$/;"	f
make_splice_string	nnet3/convert_nnet2_to_nnet3.py	/^def make_splice_string(nodename, context, const_component_dim=0):$/;"	f
mat_obj	nnet3/get_successful_models.py	/^            mat_obj = parse_regex.search(lines[-1*line_num])$/;"	v
max_epoch	tfrnnlm/lstm.py	/^  max_epoch = 4$/;"	v	class:Config
max_epoch	tfrnnlm/lstm_fast.py	/^  max_epoch = 4$/;"	v	class:Config
max_epoch	tfrnnlm/vanilla_rnnlm.py	/^  max_epoch = 4$/;"	v	class:Config
max_grad_norm	tfrnnlm/lstm.py	/^  max_grad_norm = 5$/;"	v	class:Config
max_grad_norm	tfrnnlm/lstm_fast.py	/^  max_grad_norm = 5$/;"	v	class:Config
max_grad_norm	tfrnnlm/vanilla_rnnlm.py	/^  max_grad_norm = 1$/;"	v	class:Config
max_index	nnet3/get_successful_models.py	/^    max_index = loss.index(max(loss))$/;"	v
max_max_epoch	tfrnnlm/lstm.py	/^  max_max_epoch = 13$/;"	v	class:Config
max_max_epoch	tfrnnlm/lstm_fast.py	/^  max_max_epoch = 13$/;"	v	class:Config
max_max_epoch	tfrnnlm/vanilla_rnnlm.py	/^  max_max_epoch = 20$/;"	v	class:Config
mean	diagnostic/analyze_lattice_depth_stats.py	/^            mean = "%.1f" % depth_mean))$/;"	v
merge_adjacent_segment	cleanup/internal/segment_ctm_edits_mild.py	/^    def merge_adjacent_segment(self, other):$/;"	m	class:Segment
merge_clusters	cleanup/internal/segment_ctm_edits_mild.py	/^    def merge_clusters(self, scoring_function,$/;"	m	class:SegmentsMerger
merge_consecutive_segments	segmentation/internal/sad_to_segments.py	/^    def merge_consecutive_segments(self, max_dur):$/;"	m	class:Segmentation
merge_segments	cleanup/internal/segment_ctm_edits_mild.py	/^def merge_segments(segments, args):$/;"	f
merge_with_segment	cleanup/internal/segment_ctm_edits_mild.py	/^    def merge_with_segment(self, other, max_deleted_words):$/;"	m	class:Segment
merged	conf/append_eval_to_ctm.py	/^    merged = [ ctm_tup + evl_tup for ctm_tup,evl_tup in zip(ctm_part,eval_vec[utt]) ]$/;"	v
message	nnet3/report/generate_plots.py	/^                            message='Adding an axes using the same arguments')$/;"	v
min	cleanup/internal/split_text_into_docs.pl	/^sub min ($$) { $_[$_[0] > $_[1]] }$/;"	s
model_list	nnet3/get_successful_models.py	/^    model_list = " ".join([str(x) for x in accepted_models])$/;"	v
model_num	nnet3/get_successful_models.py	/^        model_num = i + 1$/;"	v
mono_counts	chain/e2e/compute_biphone_stats.py	/^mono_counts = {}$/;"	v
mono_counts	nnet3/chain/e2e/compute_biphone_stats.py	/^mono_counts = {}$/;"	v
n	conf/prepare_word_categories.py	/^n=1$/;"	v
n_fail	chain/e2e/text_to_phones.py	/^n_fail = 0$/;"	v
n_fail	nnet3/chain/e2e/text_to_phones.py	/^n_fail = 0$/;"	v
n_tot	chain/e2e/text_to_phones.py	/^n_tot = 0$/;"	v
n_tot	nnet3/chain/e2e/text_to_phones.py	/^n_tot = 0$/;"	v
new_softmax	tfrnnlm/lstm_fast.py	/^def new_softmax(labels, logits):$/;"	f
next	data/reverberate_data_dir.py	/^    next = __next__  # for Python 2$/;"	v	class:list_cyclic_iterator
ngram_counts	cleanup/internal/make_one_biased_lm.py	/^ngram_counts = NgramCounts(args.ngram_order)$/;"	v
node_attributes	nnet3/dot/nnet3_to_dot.py	/^node_attributes = {$/;"	v
node_prefixes	nnet3/dot/nnet3_to_dot.py	/^        node_prefixes = args.node_prefixes.split(',')$/;"	v
node_prefixes	nnet3/dot/nnet3_to_dot.py	/^    node_prefixes = []$/;"	v
nodes	nnet3/lstm/make_configs.py	/^nodes = imp.load_source('nodes', 'steps\/nnet3\/components.py')$/;"	v
nodes	nnet3/tdnn/make_configs.py	/^nodes = imp.load_source('', 'steps\/nnet3\/components.py')$/;"	v
non_scored_words	cleanup/internal/get_non_scored_words.py	/^non_scored_words = set()$/;"	v
non_scored_words	cleanup/internal/modify_ctm_edits.py	/^non_scored_words = set()$/;"	v
non_scored_words	cleanup/internal/segment_ctm_edits.py	/^non_scored_words = set()$/;"	v
non_scored_words	cleanup/internal/segment_ctm_edits_mild.py	/^def non_scored_words():$/;"	f
nonlin_input_dim	nnet3/make_tdnn_configs.py	/^    nonlin_input_dim = args.pnorm_input_dim$/;"	v
nonlin_input_dim	nnet3/make_tdnn_configs.py	/^    nonlin_input_dim = args.relu_dim$/;"	v
nonlin_output_dim	nnet3/make_tdnn_configs.py	/^    nonlin_output_dim = args.pnorm_output_dim$/;"	v
nonlin_output_dim	nnet3/make_tdnn_configs.py	/^    nonlin_output_dim = args.relu_dim$/;"	v
nonsilence	diagnostic/analyze_lattice_depth_stats.py	/^nonsilence = set(phone_int2text.keys())$/;"	v
nonsilence	diagnostic/analyze_phone_length_stats.py	/^nonsilence = set(phone_int2text.keys())$/;"	v
nonsilence_phone	diagnostic/analyze_lattice_depth_stats.py	/^            nonsilence_phone = 0$/;"	v
nonsilence_phone	diagnostic/analyze_phone_length_stats.py	/^            nonsilence_phone = 0$/;"	v
nonsilence_phones	chain/gen_topo.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	chain/gen_topo2.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	chain/gen_topo3.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	chain/gen_topo4.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	chain/gen_topo5.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	chain/gen_topo_orig.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	nnet3/chain/gen_topo.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	nnet3/chain/gen_topo2.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	nnet3/chain/gen_topo3.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	nnet3/chain/gen_topo4.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	nnet3/chain/gen_topo5.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	nnet3/chain/gen_topo_orig.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
normalize_descriptors	libs/nnet3/xconfig/basic_layers.py	/^    def normalize_descriptors(self):$/;"	m	class:XconfigLayerBase
num_correct_lines	cleanup/internal/modify_ctm_edits.py	/^num_correct_lines = 0$/;"	v
num_del_lines_giving_taint	cleanup/internal/taint_ctm_edits.py	/^num_del_lines_giving_taint = 0$/;"	v
num_hidden_layers	nnet3/make_tdnn_configs.py	/^num_hidden_layers = len(splice_array)$/;"	v
num_ins_lines_giving_taint	cleanup/internal/taint_ctm_edits.py	/^num_ins_lines_giving_taint = 0$/;"	v
num_layers	tfrnnlm/lstm.py	/^  num_layers = 2$/;"	v	class:Config
num_layers	tfrnnlm/lstm_fast.py	/^  num_layers = 2$/;"	v	class:Config
num_layers	tfrnnlm/vanilla_rnnlm.py	/^  num_layers = 1$/;"	v	class:Config
num_lines	cleanup/internal/modify_ctm_edits.py	/^num_lines = 0$/;"	v
num_lines_of_type	cleanup/internal/taint_ctm_edits.py	/^num_lines_of_type = defaultdict(int)$/;"	v
num_segments	cleanup/internal/segment_ctm_edits.py	/^num_segments = defaultdict(int)$/;"	v
num_steps	tfrnnlm/lstm.py	/^  num_steps = 20$/;"	v	class:Config
num_steps	tfrnnlm/lstm_fast.py	/^  num_steps = 20$/;"	v	class:Config
num_steps	tfrnnlm/vanilla_rnnlm.py	/^  num_steps = 20$/;"	v	class:Config
num_sub_lines_giving_taint	cleanup/internal/taint_ctm_edits.py	/^num_sub_lines_giving_taint = 0$/;"	v
num_tainted_lines	cleanup/internal/taint_ctm_edits.py	/^num_tainted_lines = 0$/;"	v
num_utterances	cleanup/internal/segment_ctm_edits.py	/^num_utterances = 0$/;"	v
num_utterances	diagnostic/analyze_phone_length_stats.py	/^    num_utterances = total_phones[boundary_type]$/;"	v
num_utterances_without_segments	cleanup/internal/segment_ctm_edits.py	/^num_utterances_without_segments = 0$/;"	v
num_words_this_group	cleanup/make_biased_lms.py	/^        num_words_this_group = 0$/;"	v
num_words_this_group	cleanup/make_biased_lms.py	/^num_words_this_group = 0$/;"	v
number_to_string	info/nnet3_dir_info.pl	/^sub number_to_string {$/;"	s
oov_symbol	cleanup/internal/segment_ctm_edits.py	/^            oov_symbol = line.split()[0]$/;"	v
oov_symbol	cleanup/internal/segment_ctm_edits.py	/^oov_symbol = None$/;"	v
oov_word	chain/e2e/text_to_phones.py	/^oov_word = open(join(args.langdir, "oov.txt")).readline().strip()$/;"	v
oov_word	nnet3/chain/e2e/text_to_phones.py	/^oov_word = open(join(args.langdir, "oov.txt")).readline().strip()$/;"	v
op	conf/append_eval_to_ctm.py	/^    op = f.readline()$/;"	v
op_vec	conf/append_eval_to_ctm.py	/^    op_vec = op_vec.split()$/;"	v
opt_sil_internal_frame_percent	diagnostic/analyze_phone_length_stats.py	/^    opt_sil_internal_frame_percent = total_internal_optsil_frames * 100.0 \/ total_frames['internal']$/;"	v
opt_sil_internal_phone_percent	diagnostic/analyze_phone_length_stats.py	/^    opt_sil_internal_phone_percent = (sum(internal_opt_sil_phone_lengths.values()) *$/;"	v
opt_sil_lengths	diagnostic/analyze_phone_length_stats.py	/^    opt_sil_lengths = phone_to_lengths[optional_silence_phone]$/;"	v
opt_sil_total_frame_percent	diagnostic/analyze_phone_length_stats.py	/^    opt_sil_total_frame_percent = total_optsil_frames * 100.0 \/ total_frames['all']$/;"	v
optional_silence_phone	diagnostic/analyze_phone_length_stats.py	/^                optional_silence_phone = p$/;"	v
optional_silence_phone	diagnostic/analyze_phone_length_stats.py	/^    optional_silence_phone = 1$/;"	v
optional_silence_phone	diagnostic/analyze_phone_length_stats.py	/^    optional_silence_phone = int(f.readline())$/;"	v
optional_silence_phone_text	diagnostic/analyze_phone_length_stats.py	/^    optional_silence_phone_text = phone_int2text[optional_silence_phone]$/;"	v
orig_input	nnet3/make_tdnn_configs.py	/^        orig_input='Append({0})'.format(', '.join(splices))$/;"	v
other_feats	conf/prepare_calibration_data.py	/^other_feats = { wrd_id:other_feats.strip() for (wrd,wrd_id,filter,length,other_feats) in word_feats }$/;"	v
output_dim	libs/nnet3/xconfig/attention.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigAttentionLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigAffineLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigBasicLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigFixedAffineLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigIdctLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigLayerBase
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigOutputLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigSpecAugmentLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigExistingLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigInputLayer
output_dim	libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigTrivialOutputLayer
output_dim	libs/nnet3/xconfig/composite_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigPrefinalLayer
output_dim	libs/nnet3/xconfig/composite_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigTdnnfLayer
output_dim	libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:ChannelAverageLayer
output_dim	libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigConvLayer
output_dim	libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigRes2Block
output_dim	libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigResBlock
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastGruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormOpgruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormPgruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastOpgruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastPgruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigGruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigNormOpgruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigNormPgruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigOpgruLayer
output_dim	libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigPgruLayer
output_dim	libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmLayer
output_dim	libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmpLayer
output_dim	libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigLstmLayer
output_dim	libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigLstmbLayer
output_dim	libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigLstmpLayer
output_dim	libs/nnet3/xconfig/stats_layer.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigStatsLayer
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigAffineComponent
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigBatchnormComponent
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigCombineFeatureMapsLayer
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigDeltaLayer
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigDimRangeComponent
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigLinearComponent
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigNoOpComponent
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementOffsetComponent
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementScaleComponent
output_dim	libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigRenormComponent
output_name	libs/nnet3/xconfig/attention.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigAttentionLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigAffineLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigBasicLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigFixedAffineLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigIdctLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigLayerBase
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigOutputLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigSpecAugmentLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_outputs=None):$/;"	m	class:XconfigExistingLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_outputs=None):$/;"	m	class:XconfigInputLayer
output_name	libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_outputs=None):$/;"	m	class:XconfigTrivialOutputLayer
output_name	libs/nnet3/xconfig/composite_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigPrefinalLayer
output_name	libs/nnet3/xconfig/composite_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigTdnnfLayer
output_name	libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:ChannelAverageLayer
output_name	libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigConvLayer
output_name	libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigRes2Block
output_name	libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigResBlock
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastGruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormOpgruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormPgruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastOpgruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastPgruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigGruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigNormOpgruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigNormPgruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigOpgruLayer
output_name	libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigPgruLayer
output_name	libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmLayer
output_name	libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmpLayer
output_name	libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigLstmLayer
output_name	libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigLstmbLayer
output_name	libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigLstmpLayer
output_name	libs/nnet3/xconfig/stats_layer.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigStatsLayer
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigAffineComponent
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigBatchnormComponent
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigCombineFeatureMapsLayer
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigDeltaLayer
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigDimRangeComponent
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigLinearComponent
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigNoOpComponent
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementOffsetComponent
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementScaleComponent
output_name	libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigRenormComponent
p10	diagnostic/analyze_lattice_depth_stats.py	/^            p10 = depth_percentile_10,$/;"	v
p50	diagnostic/analyze_lattice_depth_stats.py	/^            p50 = depth_percentile_50,$/;"	v
p90	diagnostic/analyze_lattice_depth_stats.py	/^            p90 = depth_percentile_90,$/;"	v
pad_speech_segments	segmentation/internal/sad_to_segments.py	/^    def pad_speech_segments(self, segment_padding, max_duration=float("inf")):$/;"	m	class:Segmentation
pair	chain/e2e/compute_biphone_stats.py	/^            pair = (phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
pair	chain/e2e/compute_biphone_stats.py	/^        pair = (phone1, phone2)$/;"	v
pair	nnet3/chain/e2e/compute_biphone_stats.py	/^            pair = (phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
pair	nnet3/chain/e2e/compute_biphone_stats.py	/^        pair = (phone1, phone2)$/;"	v
params	nnet2/make_multisplice_configs.py	/^  params = parser.parse_args() $/;"	v
parse_affine_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_affine_component(component, line, line_buffer):$/;"	f
parse_bias	nnet3/convert_nnet2_to_nnet3.py	/^def parse_bias(line):$/;"	f
parse_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_component(line, line_buffer):$/;"	f
parse_config_line	libs/nnet3/xconfig/utils.py	/^def parse_config_line(orig_config_line):$/;"	f
parse_difference_string	libs/nnet3/report/log_parse.py	/^def parse_difference_string(string):$/;"	f
parse_end_of_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_end_of_component(component, line, line_buffer):$/;"	f
parse_file_to_dict	data/reverberate_data_dir.py	/^def parse_file_to_dict(file, assert2fields = False, value_processor = None):$/;"	f
parse_fixed_bias_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_fixed_bias_component(component, line, line_buffer):$/;"	f
parse_fixed_scale_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_fixed_scale_component(component, line, line_buffer):$/;"	f
parse_generic_config_vars_file	libs/nnet3/train/common.py	/^def parse_generic_config_vars_file(var_file):$/;"	f
parse_new_descriptor	libs/nnet3/xconfig/utils.py	/^def parse_new_descriptor(tokens, pos, prev_names):$/;"	f
parse_nnet2_header	nnet3/convert_nnet2_to_nnet3.py	/^def parse_nnet2_header(line_buffer):$/;"	f
parse_nnet2_to_nnet3	nnet3/convert_nnet2_to_nnet3.py	/^def parse_nnet2_to_nnet3(line_buffer):$/;"	f
parse_noise_list	data/reverberate_data_dir.py	/^def parse_noise_list(noise_set_para_array, smoothing_weight, sampling_rate = None):$/;"	f
parse_priors	nnet3/convert_nnet2_to_nnet3.py	/^def parse_priors(line, line_buffer):$/;"	f
parse_prob_logs	libs/nnet3/report/log_parse.py	/^def parse_prob_logs(exp_dir, key='accuracy', output="output"):$/;"	f
parse_progress_logs_for_clipped_proportion	libs/nnet3/report/log_parse.py	/^def parse_progress_logs_for_clipped_proportion(exp_dir):$/;"	f
parse_progress_logs_for_nonlinearity_stats	libs/nnet3/report/log_parse.py	/^def parse_progress_logs_for_nonlinearity_stats(exp_dir):$/;"	f
parse_progress_logs_for_param_diff	libs/nnet3/report/log_parse.py	/^def parse_progress_logs_for_param_diff(exp_dir, pattern):$/;"	f
parse_regex	nnet3/get_successful_models.py	/^    parse_regex = re.compile("LOG .* Overall average objective function for 'output' is ([0-9e.\\-+]+) over ([0-9e.\\-+]+) frames")$/;"	v
parse_rir_list	data/reverberate_data_dir.py	/^def parse_rir_list(rir_set_para_array, smoothing_weight, sampling_rate = None):$/;"	f
parse_rnnlm_prob_logs	libs/nnet3/report/log_parse.py	/^def parse_rnnlm_prob_logs(exp_dir, key='objf'):$/;"	f
parse_set_parameter_strings	data/reverberate_data_dir.py	/^def parse_set_parameter_strings(set_para_array):$/;"	f
parse_splice_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_splice_component(component, line, line_buffer):$/;"	f
parse_splice_string	nnet2/make_multisplice_configs.py	/^def parse_splice_string(splice_string):$/;"	f
parse_standard_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_standard_component(component, line, line_buffer):$/;"	f
parse_sum_group_component	nnet3/convert_nnet2_to_nnet3.py	/^def parse_sum_group_component(component, line, line_buffer):$/;"	f
parse_transition_model	nnet3/convert_nnet2_to_nnet3.py	/^def parse_transition_model(line_buffer):$/;"	f
parse_vector	nnet3/convert_nnet2_to_nnet3.py	/^def parse_vector(line):$/;"	f
parse_weights	nnet3/convert_nnet2_to_nnet3.py	/^def parse_weights(line_buffer):$/;"	f
parser	chain/gen_topo.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	chain/gen_topo2.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	chain/gen_topo3.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	chain/gen_topo4.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	chain/gen_topo5.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	chain/gen_topo_orig.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	cleanup/internal/get_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	cleanup/internal/get_non_scored_words.py	/^parser = argparse.ArgumentParser($/;"	v
parser	cleanup/internal/modify_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	cleanup/internal/segment_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	cleanup/internal/taint_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	conf/prepare_calibration_data.py	/^parser = OptionParser(usage=usage, description=desc)$/;"	v
parser	conf/prepare_word_categories.py	/^parser = OptionParser(usage=usage, description=desc)$/;"	v
parser	diagnostic/analyze_lattice_depth_stats.py	/^parser = argparse.ArgumentParser(description="This script reads stats created in analyze_lats.sh "$/;"	v
parser	diagnostic/analyze_phone_length_stats.py	/^parser = argparse.ArgumentParser(description="This script reads stats created in analyze_alignments.sh "$/;"	v
parser	libs/nnet3/train/common.py	/^    parser = argparse.ArgumentParser(add_help=False)$/;"	v	class:CommonParser
parser	nnet2/make_multisplice_configs.py	/^  parser = argparse.ArgumentParser()$/;"	v
parser	nnet3/chain/gen_topo.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	nnet3/chain/gen_topo2.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	nnet3/chain/gen_topo3.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	nnet3/chain/gen_topo4.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	nnet3/chain/gen_topo5.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	nnet3/chain/gen_topo_orig.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	nnet3/dot/nnet3_to_dot.py	/^    parser = argparse.ArgumentParser(description="Converts the output of nnet3-am-info "$/;"	v
parser	nnet3/get_successful_models.py	/^    parser = argparse.ArgumentParser(description="Create a list of models suitable for averaging "$/;"	v
parser	nnet3/make_tdnn_configs.py	/^parser = argparse.ArgumentParser(description="Writes config files and variables "$/;"	v
parts	chain/e2e/text_to_phones.py	/^        parts = line.split()$/;"	v
parts	nnet3/chain/e2e/text_to_phones.py	/^        parts = line.split()$/;"	v
percent	diagnostic/analyze_lattice_depth_stats.py	/^            percent = "%.1f" % frequency_percentage)$/;"	v
percent	diagnostic/analyze_phone_length_stats.py	/^                percent = "%.1f" % frequency_percentage,$/;"	v
percentile95	diagnostic/analyze_phone_length_stats.py	/^                percentile95 = duration_percentile_95))$/;"	v
phone_depth_counts	diagnostic/analyze_lattice_depth_stats.py	/^phone_depth_counts = dict()$/;"	v
phone_int2text	diagnostic/analyze_lattice_depth_stats.py	/^phone_int2text = {}$/;"	v
phone_int2text	diagnostic/analyze_phone_length_stats.py	/^phone_int2text = {}$/;"	v
phone_lengths	diagnostic/analyze_phone_length_stats.py	/^phone_lengths = dict()$/;"	v
phone_set	chain/e2e/compute_biphone_stats.py	/^        phone_set = line.strip().split()$/;"	v
phone_set	nnet3/chain/e2e/compute_biphone_stats.py	/^        phone_set = line.strip().split()$/;"	v
phone_sets	chain/e2e/compute_biphone_stats.py	/^phone_sets = []$/;"	v
phone_sets	nnet3/chain/e2e/compute_biphone_stats.py	/^phone_sets = []$/;"	v
phone_text	diagnostic/analyze_lattice_depth_stats.py	/^            phone_text = phone_int2text[phone]$/;"	v
phone_text	diagnostic/analyze_phone_length_stats.py	/^            phone_text = phone_int2text[phone]$/;"	v
phone_to_lengths	diagnostic/analyze_phone_length_stats.py	/^    phone_to_lengths = phone_lengths[boundary_type]$/;"	v
phone_to_shard_phone	chain/e2e/compute_biphone_stats.py	/^phone_to_shard_phone = {}$/;"	v
phone_to_shard_phone	nnet3/chain/e2e/compute_biphone_stats.py	/^phone_to_shard_phone = {}$/;"	v
phone_trans	chain/e2e/text_to_phones.py	/^    phone_trans = []        # phone-level transcription$/;"	v
phone_trans	nnet3/chain/e2e/text_to_phones.py	/^    phone_trans = []        # phone-level transcription$/;"	v
phones	chain/e2e/compute_biphone_stats.py	/^phones = []$/;"	v
phones	nnet3/chain/e2e/compute_biphone_stats.py	/^phones = []$/;"	v
pick_item_with_probability	data/reverberate_data_dir.py	/^def pick_item_with_probability(x):$/;"	f
plot_a_nonlin_component	nnet3/report/generate_plots.py	/^def plot_a_nonlin_component(fig, dirs, stat_tables_per_component_per_dir,$/;"	f
positive_int	libs/nnet3/train/common.py	/^def positive_int(arg):$/;"	f
possibly_add_tainted_lines	cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_add_tainted_lines(self):$/;"	m	class:Segment
possibly_add_unk_padding	cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_add_unk_padding(self, max_unk_padding):$/;"	m	class:Segment
possibly_split_long_segment	cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_split_long_segment(self, max_segment_length,$/;"	m	class:Segment
possibly_split_segment	cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_split_segment(self, max_internal_silence_length,$/;"	m	class:Segment
possibly_truncate_boundaries	cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_truncate_boundaries(self, max_edge_silence_length,$/;"	m	class:Segment
preamble	diagnostic/analyze_lattice_depth_stats.py	/^            preamble = preamble,$/;"	v
preamble	diagnostic/analyze_lattice_depth_stats.py	/^        preamble = "Nonsilence phones as a group account for {percent}% of frames, with".format($/;"	v
preamble	diagnostic/analyze_lattice_depth_stats.py	/^        preamble = "Overall,";$/;"	v
preamble	diagnostic/analyze_lattice_depth_stats.py	/^        preamble = "Phone {phone_text} accounts for {percent}% of frames, with".format($/;"	v
prepare_initial_acoustic_model	libs/nnet3/train/chain_objf/acoustic_model.py	/^def prepare_initial_acoustic_model(dir, run_opts, srand=-1, input_model=None):$/;"	f
prepare_initial_acoustic_model	libs/nnet3/train/frame_level_objf/acoustic_model.py	/^def prepare_initial_acoustic_model(dir, alidir, run_opts,$/;"	f
prepare_initial_network	libs/nnet3/train/common.py	/^def prepare_initial_network(dir, run_opts, srand=-3, input_model=None):$/;"	f
prepare_music	data/make_musan.py	/^def prepare_music(root_dir, use_vocals, sampling_rate):$/;"	f
prepare_noise	data/make_musan.py	/^def prepare_noise(root_dir, sampling_rate):$/;"	f
prepare_speech	data/make_musan.py	/^def prepare_speech(root_dir, sampling_rate):$/;"	f
prf	conf/append_prf_to_ctm.py	/^prf = []$/;"	v
prf_dict	conf/append_prf_to_ctm.py	/^prf_dict = dict()$/;"	v
principal_chunk_width	libs/nnet3/train/common.py	/^def principal_chunk_width(chunk_width):$/;"	f
print	cleanup/internal/segment_ctm_edits_mild.py	/^    def print(self, word_stats_out):$/;"	m	class:WordStats
print_alignment	cleanup/internal/align_ctm_ref.py	/^def print_alignment(recording, alignment, out_file_handle):$/;"	f
print_debug_info_for_utterance	cleanup/internal/segment_ctm_edits_mild.py	/^def print_debug_info_for_utterance(ctm_edits_out_handle,$/;"	f
print_segment_stats	cleanup/internal/segment_ctm_edits_mild.py	/^    def print_segment_stats(self):$/;"	m	class:UtteranceStats
print_states	segmentation/internal/prepare_sad_graph.py	/^def print_states(args, file_handle):$/;"	f
prob	chain/e2e/text_to_phones.py	/^        prob = args.between_silprob if i < len(word_trans) - 1 else args.edge_silprob$/;"	v
prob	nnet3/chain/e2e/text_to_phones.py	/^        prob = args.between_silprob if i < len(word_trans) - 1 else args.edge_silprob$/;"	v
process_args	chain/e2e/train_e2e.py	/^def process_args(args):$/;"	f
process_args	chain/train.py	/^def process_args(args):$/;"	f
process_args	nnet3/chain/e2e/train_e2e.py	/^def process_args(args):$/;"	f
process_args	nnet3/chain/train.py	/^def process_args(args):$/;"	f
process_args	nnet3/train_dnn.py	/^def process_args(args):$/;"	f
process_args	nnet3/train_raw_dnn.py	/^def process_args(args):$/;"	f
process_args	nnet3/train_raw_rnn.py	/^def process_args(args):$/;"	f
process_args	nnet3/train_rnn.py	/^def process_args(args):$/;"	f
process_data	cleanup/internal/segment_ctm_edits_mild.py	/^def process_data(args, oov_symbol, utterance_stats, word_stats):$/;"	f
process_label	segmentation/internal/sad_to_segments.py	/^def process_label(text_label):$/;"	f
process_multilingual_egs	nnet3/multilingual/allocate_multilingual_examples.py	/^def process_multilingual_egs(args):$/;"	f
process_music_annotations	data/make_musan.py	/^def process_music_annotations(path):$/;"	f
pronunciation	chain/e2e/text_to_phones.py	/^            pronunciation = copy.deepcopy(lexicon[word])$/;"	v
pronunciation	chain/e2e/text_to_phones.py	/^            pronunciation = lexicon[oov_word]$/;"	v
pronunciation	nnet3/chain/e2e/text_to_phones.py	/^            pronunciation = copy.deepcopy(lexicon[word])$/;"	v
pronunciation	nnet3/chain/e2e/text_to_phones.py	/^            pronunciation = lexicon[oov_word]$/;"	v
read	cleanup/internal/tf_idf.py	/^    def read(self, file_handle):$/;"	m	class:IDFStats
read	cleanup/internal/tf_idf.py	/^    def read(self, file_handle, ngram_order=None, idf_stats=None):$/;"	m	class:TFStats
read	cleanup/internal/tf_idf.py	/^    def read(self, tf_idf_file):$/;"	m	class:TFIDF
read	conf/parse_arpa_unigrams.py	/^  read = False$/;"	v
read_component	nnet3/report/convert_model.py	/^def read_component(s, pos):$/;"	f
read_ctm	cleanup/internal/align_ctm_ref.py	/^def read_ctm(ctm_file, file_and_channel2reco=None):$/;"	f
read_ctm_edits	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def read_ctm_edits(ctm_edits_file, segments):$/;"	f
read_float	nnet3/report/convert_model.py	/^def read_float(s, pos):$/;"	f
read_generic	nnet3/report/convert_model.py	/^def read_generic(s, pos, terminating_token, action_dict):$/;"	f
read_int	nnet3/report/convert_model.py	/^def read_int(s, pos):$/;"	f
read_kaldi_matrix	libs/common.py	/^def read_kaldi_matrix(matrix_file):$/;"	f
read_key	cleanup/internal/tf_idf.py	/^def read_key(fd):$/;"	f
read_key	libs/common.py	/^def read_key(fd):$/;"	f
read_lang	cleanup/internal/get_non_scored_words.py	/^def read_lang(lang_dir):$/;"	f
read_lines	nnet3/multilingual/allocate_multilingual_examples.py	/^def read_lines(file_handle, num_lines):$/;"	f
read_map	cleanup/internal/retrieve_similar_docs.py	/^def read_map(file_handle, num_values_per_key=None,$/;"	f
read_mat_ark	libs/common.py	/^def read_mat_ark(file_or_fd):$/;"	f
read_matrix	nnet3/report/convert_model.py	/^def read_matrix(s, pos):$/;"	f
read_matrix_ascii	libs/common.py	/^def read_matrix_ascii(file_or_fd):$/;"	f
read_model	nnet3/report/convert_model.py	/^def read_model(filename):$/;"	f
read_next_token	nnet3/report/convert_model.py	/^def read_next_token(s, pos):$/;"	f
read_non_scored_words	cleanup/internal/segment_ctm_edits_mild.py	/^def read_non_scored_words(non_scored_words_file):$/;"	f
read_reco2num_frames_file	segmentation/internal/merge_segment_targets_to_recording.py	/^def read_reco2num_frames_file(reco2num_frames_file):$/;"	f
read_reco2utt_file	segmentation/internal/merge_segment_targets_to_recording.py	/^def read_reco2utt_file(reco2utt_file):$/;"	f
read_segments	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def read_segments(segments_file):$/;"	f
read_segments_file	segmentation/internal/merge_segment_targets_to_recording.py	/^def read_segments_file(segments_file, reco2utt):$/;"	f
read_targets_scp	segmentation/internal/merge_segment_targets_to_recording.py	/^def read_targets_scp(targets_scp, segments):$/;"	f
read_text	cleanup/internal/align_ctm_ref.py	/^def read_text(text_file):$/;"	f
read_tfidf_ark	cleanup/internal/tf_idf.py	/^def read_tfidf_ark(file_handle):$/;"	f
read_vector	nnet3/report/convert_model.py	/^def read_vector(s, pos):$/;"	f
read_xconfig_file	libs/nnet3/xconfig/parser.py	/^def read_xconfig_file(xconfig_filename, existing_layers=None):$/;"	f
realign	libs/nnet3/train/frame_level_objf/common.py	/^def realign(dir, iter, feat_dir, lang, prev_egs_dir, cur_egs_dir,$/;"	f
ref	conf/append_eval_to_ctm.py	/^    ref = f.readline()$/;"	v
ref_change_stats	cleanup/internal/modify_ctm_edits.py	/^ref_change_stats = defaultdict(int)$/;"	v
relax_boundary_truncation	cleanup/internal/segment_ctm_edits_mild.py	/^    def relax_boundary_truncation(self, min_segment_length,$/;"	m	class:Segment
remove	nnet2/get_egs.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	nnet2/train_discriminative.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	nnet2/train_discriminative2.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	nnet3/train_discriminative.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	online/nnet2/get_egs.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove_model	libs/nnet3/train/common.py	/^def remove_model(nnet_dir, iter, num_iters, models_to_combine=None,$/;"	f
remove_nnet_egs	libs/nnet3/train/common.py	/^def remove_nnet_egs(egs_dir):$/;"	f
repetition_stats	cleanup/internal/modify_ctm_edits.py	/^repetition_stats = defaultdict(int)$/;"	v
replace_bracket_expressions_in_descriptor	libs/nnet3/xconfig/utils.py	/^def replace_bracket_expressions_in_descriptor(descriptor_string,$/;"	f
resolve_overlaps	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def resolve_overlaps(ctm_edits, segments):$/;"	f
right_context	nnet3/make_tdnn_configs.py	/^right_context = 0$/;"	v
right_context	nnet3/make_tdnn_configs.py	/^right_context = max(0, right_context)$/;"	v
rnn_cell	tfrnnlm/vanilla_rnnlm.py	/^    def rnn_cell():$/;"	f	function:RnnlmModel.__init__
rnnlm_producer	tfrnnlm/reader.py	/^def rnnlm_producer(raw_data, batch_size, num_steps, name=None):$/;"	f
rnnlm_raw_data	tfrnnlm/reader.py	/^def rnnlm_raw_data(data_path, vocab_path):$/;"	f
round_robin	nnet3/get_degs.sh	/^function round_robin {$/;"	f
run	cleanup/internal/align_ctm_ref.py	/^def run(args):$/;"	f
run	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def run(args):$/;"	f
run	cleanup/internal/retrieve_similar_docs.py	/^def run(args):$/;"	f
run	cleanup/internal/stitch_documents.py	/^def run(args):$/;"	f
run	segmentation/internal/arc_info_to_targets.py	/^def run(args):$/;"	f
run	segmentation/internal/get_default_targets_for_out_of_segments.py	/^def run(args):$/;"	f
run	segmentation/internal/get_transform_probs_mat.py	/^def run(args):$/;"	f
run	segmentation/internal/merge_segment_targets_to_recording.py	/^def run(args):$/;"	f
run	segmentation/internal/merge_targets.py	/^def run(args):$/;"	f
run	segmentation/internal/resample_targets.py	/^def run(args):$/;"	f
run	segmentation/internal/sad_to_segments.py	/^def run(args):$/;"	f
run_epoch	tfrnnlm/lstm.py	/^def run_epoch(session, model, eval_op=None, verbose=False):$/;"	f
run_epoch	tfrnnlm/lstm_fast.py	/^def run_epoch(session, model, eval_op=None, verbose=False):$/;"	f
run_epoch	tfrnnlm/vanilla_rnnlm.py	/^def run_epoch(session, model, eval_op=None, verbose=False):$/;"	f
sclite_tag	conf/append_prf_to_ctm.py	/^    sclite_tag = prf_dict[('%s,%s'%(f,chan)).lower()][float(beg)]$/;"	v
sclite_tag	conf/append_prf_to_ctm.py	/^  sclite_tag = 'U' $/;"	v
scoring_function	cleanup/internal/segment_ctm_edits_mild.py	/^    def scoring_function(segment):$/;"	f	function:merge_segments
segment_total_length	cleanup/internal/segment_ctm_edits.py	/^segment_total_length = defaultdict(int)$/;"	v
segments	nnet3/dot/descriptor_parser.py	/^        segments = IdentifyNestedSegments(string)$/;"	v
send_mail	libs/common.py	/^def send_mail(message, subject, email_id):$/;"	f
set_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_configs(self, key_to_value, all_layers):$/;"	m	class:XconfigLayerBase
set_default_configs	libs/nnet3/xconfig/attention.py	/^    def set_default_configs(self):$/;"	m	class:XconfigAttentionLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigAffineLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigBasicLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigExistingLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFixedAffineLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigIdctLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigInputLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLayerBase
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigOutputLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigSpecAugmentLayer
set_default_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigTrivialOutputLayer
set_default_configs	libs/nnet3/xconfig/composite_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPrefinalLayer
set_default_configs	libs/nnet3/xconfig/composite_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigTdnnfLayer
set_default_configs	libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:ChannelAverageLayer
set_default_configs	libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:XconfigConvLayer
set_default_configs	libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:XconfigRes2Block
set_default_configs	libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:XconfigResBlock
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastGruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastNormOpgruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastNormPgruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastOpgruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastPgruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigGruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigNormOpgruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigNormPgruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigOpgruLayer
set_default_configs	libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPgruLayer
set_default_configs	libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastLstmLayer
set_default_configs	libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastLstmpLayer
set_default_configs	libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLstmLayer
set_default_configs	libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLstmbLayer
set_default_configs	libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLstmpLayer
set_default_configs	libs/nnet3/xconfig/stats_layer.py	/^    def set_default_configs(self):$/;"	m	class:XconfigStatsLayer
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigAffineComponent
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigBatchnormComponent
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigDeltaLayer
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigDimRangeComponent
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLinearComponent
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigNoOpComponent
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPerElementOffsetComponent
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPerElementScaleComponent
set_default_configs	libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigRenormComponent
set_derived_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigAffineLayer
set_derived_configs	libs/nnet3/xconfig/basic_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLayerBase
set_derived_configs	libs/nnet3/xconfig/composite_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigPrefinalLayer
set_derived_configs	libs/nnet3/xconfig/composite_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigTdnnfLayer
set_derived_configs	libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:ChannelAverageLayer
set_derived_configs	libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigConvLayer
set_derived_configs	libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigRes2Block
set_derived_configs	libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigResBlock
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastGruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastNormOpgruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastNormPgruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastOpgruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastPgruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigGruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigNormOpgruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigNormPgruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigOpgruLayer
set_derived_configs	libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigPgruLayer
set_derived_configs	libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastLstmLayer
set_derived_configs	libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastLstmpLayer
set_derived_configs	libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLstmLayer
set_derived_configs	libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLstmbLayer
set_derived_configs	libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLstmpLayer
set_derived_configs	libs/nnet3/xconfig/stats_layer.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigStatsLayer
set_target_objf_change	nnet2/retrain_fast.sh	/^function set_target_objf_change {$/;"	f
set_target_objf_change	nnet2/train_pnorm_bottleneck_fast.sh	/^function set_target_objf_change {$/;"	f
set_target_objf_change	nnet2/train_pnorm_fast.sh	/^function set_target_objf_change {$/;"	f
shared	chain/e2e/compute_biphone_stats.py	/^    shared = phone_to_shard_phone[phone] if args.shared_phones else phone$/;"	v
shared	nnet3/chain/e2e/compute_biphone_stats.py	/^    shared = phone_to_shard_phone[phone] if args.shared_phones else phone$/;"	v
shared_pair	chain/e2e/compute_biphone_stats.py	/^        shared_pair = ((phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
shared_pair	nnet3/chain/e2e/compute_biphone_stats.py	/^        shared_pair = ((phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
should_do_shrinkage	libs/nnet3/train/common.py	/^def should_do_shrinkage(iter, model_file, shrink_saturation_threshold,$/;"	f
should_remove_frame	segmentation/internal/merge_targets.py	/^def should_remove_frame(row, dim):$/;"	f
shuffle	nnet3/get_degs.sh	/^function shuffle {$/;"	f
sil	chain/e2e/text_to_phones.py	/^sil = open(join(args.langdir,$/;"	v
sil	nnet3/chain/e2e/text_to_phones.py	/^sil = open(join(args.langdir,$/;"	v
silence_phones	chain/gen_topo.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	chain/gen_topo2.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	chain/gen_topo3.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	chain/gen_topo4.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	chain/gen_topo5.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	chain/gen_topo_orig.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	nnet3/chain/gen_topo.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	nnet3/chain/gen_topo2.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	nnet3/chain/gen_topo3.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	nnet3/chain/gen_topo4.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	nnet3/chain/gen_topo5.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	nnet3/chain/gen_topo_orig.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
similarity_score_function	cleanup/internal/align_ctm_ref.py	/^    def similarity_score_function(x, y):$/;"	f	function:run
smart_open	libs/common.py	/^class smart_open(object):$/;"	c
smith_waterman_alignment	cleanup/internal/align_ctm_ref.py	/^def smith_waterman_alignment(ref, hyp, similarity_score_function,$/;"	f
smooth_presoftmax_prior_scale_vector	libs/nnet3/train/common.py	/^def smooth_presoftmax_prior_scale_vector(pdf_counts,$/;"	f
smooth_probability_distribution	data/reverberate_data_dir.py	/^def smooth_probability_distribution(set_list, smoothing_weight=0.0, target_sum=1.0):$/;"	f
splice_array	nnet3/make_tdnn_configs.py	/^splice_array = []$/;"	v
splices	nnet3/make_tdnn_configs.py	/^        splices = [ ('Offset(input, {0})'.format(n) if n != 0 else 'input') for n in splice_array[l-1] ]$/;"	v
splices	nnet3/make_tdnn_configs.py	/^        splices = [ ('Offset(renorm{0}, {1})'.format(l-1, n) if n !=0 else 'renorm{0}'.format(l-1))$/;"	v
split1	nnet3/make_tdnn_configs.py	/^split1 = args.splice_indexes.split();  # we already checked the string is nonempty.$/;"	v
split2	nnet3/make_tdnn_configs.py	/^        split2 = string.split(",")$/;"	v
split_layer_name	libs/nnet3/xconfig/utils.py	/^def split_layer_name(full_layer_name):$/;"	f
start_identifier	nnet3/dot/descriptor_parser.py	/^start_identifier = "("$/;"	v
start_time	cleanup/internal/segment_ctm_edits_mild.py	/^    def start_time(self):$/;"	m	class:Segment
str	libs/nnet3/xconfig/basic_layers.py	/^    def str(self):$/;"	m	class:XconfigLayerBase
str	libs/nnet3/xconfig/utils.py	/^    def str(self):$/;"	m	class:Descriptor
str_to_bool	libs/common.py	/^def str_to_bool(value):$/;"	f
strings	nnet3/dot/descriptor_parser.py	/^    strings= [$/;"	v
t1	conf/append_prf_to_ctm.py	/^    t1 = t[t_pos:].split(' ',1)[0] # get 1st token at 't_pos'$/;"	v
t_pos	conf/append_prf_to_ctm.py	/^  t_pos = 0 # position in the 't' string,$/;"	v
test	nnet3/report/convert_model.py	/^def test():$/;"	f
test_alignment	cleanup/internal/align_ctm_ref.py	/^def test_alignment(align_full_hyp):$/;"	f
test_get_current_num_jobs	libs/nnet3/train/common.py	/^    def test_get_current_num_jobs(self):$/;"	m	class:SelfTest
test_halve_minibatch_size_str	libs/nnet3/train/common.py	/^    def test_halve_minibatch_size_str(self):$/;"	m	class:SelfTest
test_layers	libs/nnet3/xconfig/basic_layers.py	/^def test_layers():$/;"	f
test_library	libs/nnet3/xconfig/utils.py	/^def test_library():$/;"	f
test_validate_chunk_width	libs/nnet3/train/common.py	/^    def test_validate_chunk_width(self):$/;"	m	class:SelfTest
test_validate_minibatch_size_str	libs/nnet3/train/common.py	/^    def test_validate_minibatch_size_str(self):$/;"	m	class:SelfTest
text	cleanup/internal/segment_ctm_edits_mild.py	/^    def text(self, oov_symbol, eps_symbol="<eps_symbol>"):$/;"	m	class:Segment
text	diagnostic/analyze_phone_length_stats.py	/^        text = boundary_to_text[boundary_type]  # e.g. 'At utterance begin'.$/;"	v
text_words	conf/prepare_word_categories.py	/^  text_words = [ l.split()[1:] for l in f ]$/;"	v
text_words	conf/prepare_word_categories.py	/^text_words = list(itertools.chain.from_iterable(text_words))$/;"	v
this_count	diagnostic/analyze_phone_length_stats.py	/^            this_count = sum([ l * c for l,c in phone_lengths['all'][p].items() ])$/;"	v
this_group_of_lines	cleanup/make_biased_lms.py	/^        this_group_of_lines = []$/;"	v
this_group_of_lines	cleanup/make_biased_lms.py	/^this_group_of_lines = []  # An array of strings, one per line$/;"	v
this_loss	nnet3/get_successful_models.py	/^                this_loss = float(mat_obj.groups()[0])$/;"	v
this_loss	nnet3/get_successful_models.py	/^        this_loss = -100000$/;"	v
time_to_string	cleanup/internal/segment_ctm_edits_mild.py	/^def time_to_string(time, frame_length):$/;"	f
tmpdir	nnet3/convert_nnet2_to_nnet3.py	/^tmpdir = ""$/;"	v
to_str	segmentation/internal/sad_to_segments.py	/^def to_str(segment):$/;"	f
token_to_string	nnet3/convert_nnet2_to_nnet3.py	/^def token_to_string(token):$/;"	f
tokenize_descriptor	libs/nnet3/xconfig/utils.py	/^def tokenize_descriptor(descriptor_string,$/;"	f
tot_num_phones	diagnostic/analyze_phone_length_stats.py	/^    tot_num_phones = total_phones[boundary_type]$/;"	v
total_frames	diagnostic/analyze_lattice_depth_stats.py	/^total_frames = 0$/;"	v
total_frames	diagnostic/analyze_phone_length_stats.py	/^total_frames = defaultdict(int)$/;"	v
total_internal_optsil_frames	diagnostic/analyze_phone_length_stats.py	/^    total_internal_optsil_frames = sum([ float(l * c) for l,c in internal_opt_sil_phone_lengths.items() ])$/;"	v
total_length_of_utterances	cleanup/internal/segment_ctm_edits.py	/^total_length_of_utterances = 0$/;"	v
total_optsil_frames	diagnostic/analyze_phone_length_stats.py	/^    total_optsil_frames = sum([ float(l * c)$/;"	v
total_phones	diagnostic/analyze_phone_length_stats.py	/^total_phones = defaultdict(int)$/;"	v
tra	conf/convert_ctm_to_tra.py	/^tra = dict()$/;"	v
train	chain/e2e/train_e2e.py	/^def train(args, run_opts):$/;"	f
train	chain/train.py	/^def train(args, run_opts):$/;"	f
train	nnet3/chain/e2e/train_e2e.py	/^def train(args, run_opts):$/;"	f
train	nnet3/chain/train.py	/^def train(args, run_opts):$/;"	f
train	nnet3/train_dnn.py	/^def train(args, run_opts):$/;"	f
train	nnet3/train_raw_dnn.py	/^def train(args, run_opts):$/;"	f
train	nnet3/train_raw_rnn.py	/^def train(args, run_opts):$/;"	f
train	nnet3/train_rnn.py	/^def train(args, run_opts):$/;"	f
train_new_models	libs/nnet3/train/chain_objf/acoustic_model.py	/^def train_new_models(dir, iter, srand, num_jobs,$/;"	f
train_new_models	libs/nnet3/train/frame_level_objf/common.py	/^def train_new_models(dir, iter, srand, num_jobs,$/;"	f
train_one_iteration	libs/nnet3/train/chain_objf/acoustic_model.py	/^def train_one_iteration(dir, iter, srand, egs_dir,$/;"	f
train_one_iteration	libs/nnet3/train/frame_level_objf/common.py	/^def train_one_iteration(dir, iter, srand, egs_dir,$/;"	f
train_op	tfrnnlm/lstm.py	/^  def train_op(self):$/;"	m	class:RnnlmModel
train_op	tfrnnlm/lstm_fast.py	/^  def train_op(self):$/;"	m	class:RnnlmModel
train_op	tfrnnlm/vanilla_rnnlm.py	/^  def train_op(self):$/;"	m	class:RnnlmModel
universal_phone	diagnostic/analyze_lattice_depth_stats.py	/^        universal_phone = -1$/;"	v
usage	conf/prepare_calibration_data.py	/^usage = "%prog [opts] ctm word-filter word-length unigrams depth-per-frame-ascii.ark word-categories"$/;"	v
usage	conf/prepare_word_categories.py	/^usage = "%prog [opts] words.txt ctm category_mapping"$/;"	v
use_presoftmax_prior_scale	nnet3/make_tdnn_configs.py	/^    use_presoftmax_prior_scale = False$/;"	v
use_presoftmax_prior_scale	nnet3/make_tdnn_configs.py	/^    use_presoftmax_prior_scale = True$/;"	v
utterance_map_file	cleanup/make_biased_lms.py	/^    utterance_map_file = open(args.utterance_map, "w", encoding="utf-8")$/;"	v
validate_chunk_width	libs/nnet3/train/common.py	/^def validate_chunk_width(chunk_width):$/;"	f
validate_minibatch_size_str	libs/nnet3/train/common.py	/^def validate_minibatch_size_str(minibatch_size_str):$/;"	f
validate_range_str	libs/nnet3/train/common.py	/^def validate_range_str(range_str):$/;"	f
var_file	nnet2/make_multisplice_configs.py	/^    var_file = open("{0}\/vars".format(params.output_dir), "w")$/;"	v
verbose_level	cleanup/internal/align_ctm_ref.py	/^verbose_level = 0$/;"	v
verify_egs_dir	libs/nnet3/train/common.py	/^def verify_egs_dir(egs_dir, feat_dim, ivector_dim, ivector_extractor_id,$/;"	f
wait_for_background_commands	libs/common.py	/^def wait_for_background_commands():$/;"	f
wer	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def wer(ctm_edit_lines):$/;"	f
wer	cleanup/internal/segment_ctm_edits_mild.py	/^    def wer(self):$/;"	m	class:SegmentStats
word	chain/e2e/text_to_phones.py	/^        word = word_trans[i]$/;"	v
word	nnet3/chain/e2e/text_to_phones.py	/^        word = word_trans[i]$/;"	v
word_count_pair	cleanup/internal/segment_ctm_edits.py	/^word_count_pair = defaultdict(lambda: [0, 0])$/;"	v
word_counts	conf/prepare_word_categories.py	/^word_counts = dict()$/;"	v
word_feats	conf/prepare_calibration_data.py	/^word_feats = [ l.split(None,4) for l in open(word_feats_file) ]$/;"	v
word_filter	conf/prepare_calibration_data.py	/^word_filter = { wrd_id:bool(int(filter)) for (wrd,wrd_id,filter,length,other_feats) in word_feats }$/;"	v
word_id	conf/prepare_word_categories.py	/^  word_id = [ l.split() for l in f ]$/;"	v
word_id_cat	conf/prepare_word_categories.py	/^word_id_cat=[]$/;"	v
word_length	conf/prepare_calibration_data.py	/^word_length = { wrd_id:float(length) for (wrd,wrd_id,filter,length,other_feats) in word_feats }$/;"	v
word_trans	chain/e2e/text_to_phones.py	/^    word_trans = line[1:]   # word-level transcription$/;"	v
word_trans	nnet3/chain/e2e/text_to_phones.py	/^    word_trans = line[1:]   # word-level transcription$/;"	v
words	conf/parse_arpa_unigrams.py	/^words = [ l.split() for l in open(words_txt) ]$/;"	v
words_unigram	conf/parse_arpa_unigrams.py	/^words_unigram = [[wrd, id, (wrd_log10[wrd] if wrd in wrd_log10 else -99)] for wrd,id in words ]$/;"	v
wrd_1_of_k	conf/prepare_calibration_data.py	/^    wrd_1_of_k = [0]*wrd_cat_num; $/;"	v
wrd_cat_num	conf/prepare_calibration_data.py	/^wrd_cat_num = max(wrd_to_cat.values()) + 1$/;"	v
wrd_log10	conf/parse_arpa_unigrams.py	/^wrd_log10 = dict()$/;"	v
wrd_to_cat	conf/prepare_calibration_data.py	/^wrd_to_cat = [ l.split() for l in open(word_categories_file) ]$/;"	v
wrd_to_cat	conf/prepare_calibration_data.py	/^wrd_to_cat = { wrd_id:int(category) for wrd,wrd_id,category in wrd_to_cat }$/;"	v
write	cleanup/internal/tf_idf.py	/^    def write(self, file_handle):$/;"	m	class:IDFStats
write	cleanup/internal/tf_idf.py	/^    def write(self, tf_idf_file):$/;"	m	class:TFIDF
write	segmentation/internal/sad_to_segments.py	/^    def write(self, key, file_handle):$/;"	m	class:Segmentation
write_config	nnet3/convert_nnet2_to_nnet3.py	/^    def write_config(self, filename):$/;"	m	class:Nnet3Model
write_config_file	nnet3/xconfig_to_config.py	/^def write_config_file(config_file_out, all_layers):$/;"	f
write_config_files	nnet3/xconfig_to_configs.py	/^def write_config_files(config_dir, all_layers):$/;"	f
write_ctm_edits	cleanup/internal/resolve_ctm_edits_overlaps.py	/^def write_ctm_edits(ctm_edit_lines, out_file):$/;"	f
write_dict_to_file	data/reverberate_data_dir.py	/^def write_dict_to_file(dict, file_name):$/;"	f
write_expanded_xconfig_files	nnet3/xconfig_to_configs.py	/^def write_expanded_xconfig_files(config_dir, all_layers):$/;"	f
write_idct_matrix	libs/common.py	/^def write_idct_matrix(feat_dim, cepstral_lifter, file_path):$/;"	f
write_kaldi_matrix	libs/common.py	/^def write_kaldi_matrix(output_file, matrix):$/;"	f
write_matrix_ascii	libs/common.py	/^def write_matrix_ascii(file_or_fd, mat, key=None):$/;"	f
write_model	nnet3/convert_nnet2_to_nnet3.py	/^    def write_model(self, model, binary="true"):$/;"	m	class:Nnet3Model
write_segments_for_utterance	cleanup/internal/segment_ctm_edits_mild.py	/^def write_segments_for_utterance(text_output_handle, segments_output_handle,$/;"	f
write_tfidf_from_stats	cleanup/internal/tf_idf.py	/^def write_tfidf_from_stats($/;"	f
xconfig_line_to_object	libs/nnet3/xconfig/parser.py	/^def xconfig_line_to_object(config_line, prev_layers = None):$/;"	f
