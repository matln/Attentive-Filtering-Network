!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AFFINE_COMPONENTS	steps/nnet3/convert_nnet2_to_nnet3.py	/^AFFINE_COMPONENTS = [c for c in NODE_NAMES if "Affine" in c]$/;"	v
AccWordStatsForUtterance	steps/cleanup/internal/segment_ctm_edits.py	/^def AccWordStatsForUtterance(split_lines_of_utt,$/;"	f
AccumulateSegmentStats	steps/cleanup/internal/segment_ctm_edits.py	/^def AccumulateSegmentStats(segment_list, text):$/;"	f
AddAffPnormLayer	steps/nnet3/components.py	/^def AddAffPnormLayer(config_lines, name, input, pnorm_input_dim, pnorm_output_dim, ng_affine_options = " bias-stddev=0 ", norm_target_rms = 1.0):$/;"	f
AddAffRelNormLayer	steps/nnet3/components.py	/^def AddAffRelNormLayer(config_lines, name, input, output_dim, ng_affine_options = " bias-stddev=0 ", norm_target_rms = 1.0, self_repair_scale = None, max_change_per_component = 0.75):$/;"	f
AddAffineLayer	steps/nnet3/components.py	/^def AddAffineLayer(config_lines, name, input, output_dim, ng_affine_options = "", max_change_per_component = 0.75):$/;"	f
AddBLstmLayer	steps/nnet3/components.py	/^def AddBLstmLayer(config_lines,$/;"	f
AddBlockAffineLayer	steps/nnet3/components.py	/^def AddBlockAffineLayer(config_lines, name, input, output_dim, num_blocks):$/;"	f
AddCnnLayers	steps/nnet3/tdnn/make_configs.py	/^def AddCnnLayers(config_lines, cnn_layer, cnn_bottleneck_dim, cepstral_lifter, config_dir, feat_dim, splice_indexes=[0], ivector_dim=0):$/;"	f
AddConvMaxpLayer	steps/nnet3/tdnn/make_configs.py	/^def AddConvMaxpLayer(config_lines, name, input, args):$/;"	f
AddConvolutionLayer	steps/nnet3/components.py	/^def AddConvolutionLayer(config_lines, name, input,$/;"	f
AddCount	steps/cleanup/internal/make_one_biased_lm.py	/^    def AddCount(self, history, predicted_word, count):$/;"	m	class:NgramCounts
AddCount	utils/lang/make_phone_lm.py	/^    def AddCount(self, history, predicted_word, count):$/;"	m	class:NgramCounts
AddCount	utils/lang/make_phone_lm.py	/^    def AddCount(self, predicted_word, count):$/;"	m	class:CountsForHistory
AddFinalLayer	steps/nnet3/components.py	/^def AddFinalLayer(config_lines, input, output_dim,$/;"	f
AddFixedAffineLayer	steps/nnet3/components.py	/^def AddFixedAffineLayer(config_lines, name, input, matrix_file):$/;"	f
AddInputLayer	steps/nnet3/components.py	/^def AddInputLayer(config_lines, feat_dim, splice_indexes=[0], ivector_dim=0):$/;"	f
AddLdaLayer	steps/nnet3/components.py	/^def AddLdaLayer(config_lines, name, input, lda_file):$/;"	f
AddLstmLayer	steps/nnet3/components.py	/^def AddLstmLayer(config_lines,$/;"	f
AddMaxpoolingLayer	steps/nnet3/components.py	/^def AddMaxpoolingLayer(config_lines, name, input,$/;"	f
AddNoOpLayer	steps/nnet3/components.py	/^def AddNoOpLayer(config_lines, name, input):$/;"	f
AddOutputLayer	steps/nnet3/components.py	/^def AddOutputLayer(config_lines, input, label_delay = None, suffix=None, objective_type = "linear"):$/;"	f
AddPermuteLayer	steps/nnet3/components.py	/^def AddPermuteLayer(config_lines, name, input, column_map):$/;"	f
AddRawCountsFromLine	steps/cleanup/internal/make_one_biased_lm.py	/^    def AddRawCountsFromLine(self, line):$/;"	m	class:NgramCounts
AddRawCountsFromLine	utils/lang/make_phone_lm.py	/^    def AddRawCountsFromLine(self, line):$/;"	m	class:NgramCounts
AddRawCountsFromStandardInput	steps/cleanup/internal/make_one_biased_lm.py	/^    def AddRawCountsFromStandardInput(self):$/;"	m	class:NgramCounts
AddRawCountsFromStandardInput	utils/lang/make_phone_lm.py	/^    def AddRawCountsFromStandardInput(self):$/;"	m	class:NgramCounts
AddSigmoidLayer	steps/nnet3/components.py	/^def AddSigmoidLayer(config_lines, name, input, self_repair_scale = None):$/;"	f
AddSoftmaxLayer	steps/nnet3/components.py	/^def AddSoftmaxLayer(config_lines, name, input):$/;"	f
AddTopWords	steps/cleanup/internal/make_one_biased_lm.py	/^    def AddTopWords(self, top_words_file):$/;"	m	class:NgramCounts
ApplyBackoff	steps/cleanup/internal/make_one_biased_lm.py	/^    def ApplyBackoff(self, D):$/;"	m	class:NgramCounts
ApplyBackoff	utils/lang/make_phone_lm.py	/^    def ApplyBackoff(self):$/;"	m	class:NgramCounts
ApplyLexiconEdits	steps/dict/apply_lexicon_edits.py	/^def ApplyLexiconEdits(lexicon, lexicon_edits_file_handle):$/;"	f
ArpaModel	utils/lang/internal/arpa2fst_constrained.py	/^class ArpaModel(object):$/;"	c
AttenResNet	src/attention_neuro/simple_attention_network.py	/^class AttenResNet(nn.Module):$/;"	c
AttenResNet2	src/attention_neuro/simple_attention_network.py	/^class AttenResNet2(nn.Module):$/;"	c
AttenResNet3	src/attention_neuro/simple_attention_network.py	/^class AttenResNet3(nn.Module):$/;"	c
AttenResNet4	src/attention_neuro/simple_attention_network.py	/^class AttenResNet4(nn.Module):$/;"	c
AttenResNet5	src/attention_neuro/simple_attention_network.py	/^class AttenResNet5(nn.Module):$/;"	c
AttentionModule_stg0	src/attention_neuro/attention_module.py	/^class AttentionModule_stg0(nn.Module):$/;"	c
BGRU	src/attention_neuro/recurrent_attention.py	/^class BGRU(nn.Module):$/;"	c
BLSTM	src/attention_neuro/recurrent_attention.py	/^class BLSTM(nn.Module):$/;"	c
BPE	utils/lang/bpe/apply_bpe.py	/^class BPE(object):$/;"	c
BadInputFormat	src/data_reader/kaldi_io.py	/^class BadInputFormat(Exception):$/;"	c
BadSampleSize	src/data_reader/kaldi_io.py	/^class BadSampleSize(Exception):$/;"	c
CAttenResNet1	src/attention_neuro/complex_attention_network.py	/^class CAttenResNet1(nn.Module):$/;"	c
CRResidualBlock	src/attention_neuro/basic_layers.py	/^class CRResidualBlock(nn.Module):$/;"	c
ChannelAverageLayer	steps/libs/nnet3/xconfig/convolution.py	/^class ChannelAverageLayer(XconfigLayerBase):$/;"	c
CheckArgs	steps/cleanup/internal/get_pron_stats.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/apply_lexicon_edits.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/get_pron_stats.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/internal/get_subsegments.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/internal/prune_pron_candidates.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/internal/sum_arc_info.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/merge_learned_lexicons.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/prons_to_lexicon.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/prune_pron_candidates.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/select_prons_bayesian.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/dict/select_prons_greedy.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/nnet3/lstm/make_configs.py	/^def CheckArgs(args):$/;"	f
CheckArgs	steps/nnet3/tdnn/make_configs.py	/^def CheckArgs(args):$/;"	f
CheckFiles	steps/cleanup/combine_short_segments.py	/^def CheckFiles(input_data_dir):$/;"	f
CombineList	utils/data/internal/choose_utts_to_combine.py	/^def CombineList(min_duration, durations):$/;"	f
CombineSegments	steps/cleanup/combine_short_segments.py	/^def CombineSegments(input_dir, output_dir, minimum_duration):$/;"	f
CommonParser	steps/libs/nnet3/train/common.py	/^class CommonParser(object):$/;"	c
CompletelyDiscountLowCountStates	steps/cleanup/internal/make_one_biased_lm.py	/^    def CompletelyDiscountLowCountStates(self, min_count):$/;"	m	class:NgramCounts
ComputePosteriors	steps/dict/select_prons_bayesian.py	/^def ComputePosteriors(args, stats, ref_lexicon, g2p_lexicon, phonetic_decoding_lexicon, prior_counts):$/;"	f
ComputePriorCounts	steps/dict/select_prons_bayesian.py	/^def ComputePriorCounts(args, counts, ref_lexicon, g2p_lexicon, phonetic_decoding_lexicon):$/;"	f
ComputeSegmentCores	steps/cleanup/internal/segment_ctm_edits.py	/^def ComputeSegmentCores(split_lines_of_utt):$/;"	f
Config	steps/tfrnnlm/lstm.py	/^class Config(object):$/;"	c
Config	steps/tfrnnlm/lstm_fast.py	/^class Config(object):$/;"	c
Config	steps/tfrnnlm/vanilla_rnnlm.py	/^class Config(object):$/;"	c
ContainsAtLeastOneScoredNonOovWord	steps/cleanup/internal/segment_ctm_edits.py	/^    def ContainsAtLeastOneScoredNonOovWord(self):$/;"	m	class:Segment
ConvGRU	src/v1_neuro.py	/^class ConvGRU(nn.Module):$/;"	c
ConvNet	src/v1_neuro.py	/^class ConvNet(nn.Module):$/;"	c
ConvNet	src/v2_neuro.py	/^class ConvNet(nn.Module):$/;"	c
ConvRes	src/v2_neuro.py	/^class ConvRes(nn.Module):$/;"	c
ConvSmall	src/v2_neuro.py	/^class ConvSmall(nn.Module):$/;"	c
ConvertWordCountsToProbs	steps/dict/prons_to_lexicon.py	/^def ConvertWordCountsToProbs(args, lexicon, word_count):$/;"	f
ConvertWordProbsToLexicon	steps/dict/prons_to_lexicon.py	/^def ConvertWordProbsToLexicon(word_probs):$/;"	f
CountsForHistory	utils/lang/make_kn_lm.py	/^class CountsForHistory:$/;"	c
CountsForHistory	utils/lang/make_phone_lm.py	/^class CountsForHistory(object):$/;"	c
DebugInfo	steps/cleanup/internal/segment_ctm_edits.py	/^    def DebugInfo(self):$/;"	m	class:Segment
Deltas	CQCC_v1.0/cqcc.m	/^function D = Deltas(x,hlen)$/;"	f
Descriptor	steps/libs/nnet3/xconfig/utils.py	/^class Descriptor(object):$/;"	c
DescriptorSegmentToDot	steps/nnet3/dot/nnet3_to_dot.py	/^def DescriptorSegmentToDot(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
EndTime	steps/cleanup/internal/segment_ctm_edits.py	/^    def EndTime(self):$/;"	m	class:Segment
EnsureStructurallyNeededNgramsExist	utils/lang/make_phone_lm.py	/^    def EnsureStructurallyNeededNgramsExist(self):$/;"	m	class:NgramCounts
ExtractCommandName	steps/nnet3/report/summarize_compute_debug_timing.py	/^def ExtractCommandName(command_string):$/;"	f
FCResNet	src/v5_neuro.py	/^class FCResNet(nn.Module):$/;"	c
FConv	src/v4_neuro.py	/^class FConv(nn.Module):$/;"	c
FLAGS	steps/tfrnnlm/lstm.py	/^FLAGS = flags.FLAGS$/;"	v
FLAGS	steps/tfrnnlm/lstm_fast.py	/^FLAGS = flags.FLAGS$/;"	v
FLAGS	steps/tfrnnlm/vanilla_rnnlm.py	/^FLAGS = flags.FLAGS$/;"	v
FeedForward	src/v1_neuro.py	/^class FeedForward(nn.Module):$/;"	c
FilterPhoneticDecodingLexicon	steps/dict/select_prons_bayesian.py	/^def FilterPhoneticDecodingLexicon(args, phonetic_decoding_lexicon, stats):$/;"	f
FilterPhoneticDecodingLexicon	steps/dict/select_prons_greedy.py	/^def FilterPhoneticDecodingLexicon(args, pd_lexicon):$/;"	f
FindOpenParanthesisPosition	steps/nnet3/report/summarize_compute_debug_timing.py	/^def FindOpenParanthesisPosition(string):$/;"	f
FloatToString	steps/cleanup/internal/get_ctm_edits.py	/^def FloatToString(f):$/;"	f
FloatToString	steps/cleanup/internal/segment_ctm_edits.py	/^def FloatToString(f):$/;"	f
FloatToString	utils/data/extend_segment_times.py	/^def FloatToString(f):$/;"	f
GetArgs	steps/cleanup/combine_short_segments.py	/^def GetArgs():$/;"	f
GetArgs	steps/cleanup/internal/get_pron_stats.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/apply_lexicon_edits.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/get_pron_stats.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/internal/get_subsegments.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/internal/prune_pron_candidates.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/internal/sum_arc_info.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/merge_learned_lexicons.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/prons_to_lexicon.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/prune_pron_candidates.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/select_prons_bayesian.py	/^def GetArgs():$/;"	f
GetArgs	steps/dict/select_prons_greedy.py	/^def GetArgs():$/;"	f
GetArgs	steps/nnet3/convert_nnet2_to_nnet3.py	/^def GetArgs():$/;"	f
GetArgs	steps/nnet3/lstm/make_configs.py	/^def GetArgs():$/;"	f
GetArgs	steps/nnet3/report/summarize_compute_debug_timing.py	/^def GetArgs():$/;"	f
GetArgs	steps/nnet3/tdnn/make_configs.py	/^def GetArgs():$/;"	f
GetCombinedUttIndexRange	steps/cleanup/combine_short_segments.py	/^def GetCombinedUttIndexRange(utt_index, utts, utt_durs, minimum_duration):$/;"	f
GetDotNodeName	steps/nnet3/dot/nnet3_to_dot.py	/^def GetDotNodeName(name_string, is_component = False):$/;"	f
GetEditType	steps/cleanup/internal/get_ctm_edits.py	/^def GetEditType(hyp_word, ref_word, duration):$/;"	f
GetFormatString	utils/data/internal/modify_speaker_info.py	/^def GetFormatString(d):$/;"	f
GetGCD	utils/create_data_link.pl	/^sub GetGCD {$/;"	s
GetHistToStateMap	steps/cleanup/internal/make_one_biased_lm.py	/^    def GetHistToStateMap(self):$/;"	m	class:NgramCounts
GetHistToStateMap	utils/lang/internal/arpa2fst_constrained.py	/^    def GetHistToStateMap(self):$/;"	m	class:ArpaModel
GetHistToStateMap	utils/lang/make_phone_lm.py	/^    def GetHistToStateMap(self):$/;"	m	class:NgramCounts
GetHistToTotalCount	steps/cleanup/internal/make_one_biased_lm.py	/^    def GetHistToTotalCount(self):$/;"	m	class:NgramCounts
GetLikeChangeFromPruningNgram	utils/lang/make_phone_lm.py	/^    def GetLikeChangeFromPruningNgram(self, hist, word):$/;"	m	class:NgramCounts
GetMean	steps/diagnostic/analyze_lattice_depth_stats.py	/^def GetMean(depth_to_count):$/;"	f
GetMean	steps/diagnostic/analyze_phone_length_stats.py	/^def GetMean(length_to_count):$/;"	f
GetNumExtraNgrams	utils/lang/make_phone_lm.py	/^    def GetNumExtraNgrams(self):$/;"	m	class:NgramCounts
GetNumNgrams	utils/lang/make_phone_lm.py	/^    def GetNumNgrams(self, hist_len = None):$/;"	m	class:NgramCounts
GetPercentile	steps/diagnostic/analyze_lattice_depth_stats.py	/^def GetPercentile(depth_to_count, fraction):$/;"	f
GetPercentile	steps/diagnostic/analyze_phone_length_stats.py	/^def GetPercentile(length_to_count, fraction):$/;"	f
GetProb	steps/cleanup/internal/make_one_biased_lm.py	/^    def GetProb(self, hist, word, total_count_map):$/;"	m	class:NgramCounts
GetProb	utils/lang/internal/arpa2fst_constrained.py	/^    def GetProb(self, hist, word):$/;"	m	class:ArpaModel
GetProb	utils/lang/make_phone_lm.py	/^    def GetProb(self, hist, word):$/;"	m	class:NgramCounts
GetProtectedNgrams	utils/lang/make_phone_lm.py	/^    def GetProtectedNgrams(self):$/;"	m	class:NgramCounts
GetSegmentLengthNoSil	steps/cleanup/create_segments_from_ctm.pl	/^sub GetSegmentLengthNoSil {$/;"	s
GetSegmentsForUtterance	steps/cleanup/internal/segment_ctm_edits.py	/^def GetSegmentsForUtterance(split_lines_of_utt):$/;"	f
GetSplitPoint	steps/cleanup/create_segments_from_ctm.pl	/^sub GetSplitPoint {$/;"	s
GetStateForHist	utils/lang/internal/arpa2fst_constrained.py	/^    def GetStateForHist(self, hist_to_state, hist):$/;"	m	class:ArpaModel
GetStatsFromArcInfo	steps/dict/get_pron_stats.py	/^def GetStatsFromArcInfo(arc_info_file_handle, phone_map_handle):$/;"	f
GetStatsFromCtmProns	steps/cleanup/internal/get_pron_stats.py	/^def GetStatsFromCtmProns(silphones, optional_silence, non_scored_words, ctm_prons_file_handle):$/;"	f
GetSubsegments	steps/dict/internal/get_subsegments.py	/^def GetSubsegments(args, vocab):$/;"	f
GetSumDescriptor	steps/nnet3/components.py	/^def GetSumDescriptor(inputs):$/;"	f
GetTotalCountMap	steps/cleanup/internal/make_one_biased_lm.py	/^    def GetTotalCountMap(self):$/;"	m	class:NgramCounts
GetUtteranceGroups	utils/data/internal/choose_utts_to_combine.py	/^def GetUtteranceGroups(min_duration, spk2utt, utt2dur):$/;"	f
Glorot	utils/nnet/make_nnet_proto.py	/^def Glorot(dim1, dim2):$/;"	f
GroupConfigs	steps/nnet3/dot/nnet3_to_dot.py	/^def GroupConfigs(configs, node_prefixes = None):$/;"	f
HistoryState	utils/lang/internal/arpa2fst_constrained.py	/^class HistoryState(object):$/;"	c
IDFStats	steps/cleanup/internal/tf_idf.py	/^class IDFStats(object):$/;"	c
IdentifyNestedSegments	steps/nnet3/dot/descriptor_parser.py	/^def IdentifyNestedSegments(input_string):$/;"	f
InsertSilence	steps/cleanup/create_segments_from_ctm.pl	/^sub InsertSilence {$/;"	s
IntToString	utils/lang/make_phone_lm.py	/^    def IntToString(self, i):$/;"	m	class:NgramCounts
IsTainted	steps/cleanup/internal/segment_ctm_edits.py	/^def IsTainted(split_line_of_utt):$/;"	f
IsWholeUtterance	steps/cleanup/internal/segment_ctm_edits.py	/^    def IsWholeUtterance(self):$/;"	m	class:Segment
JunkProportion	steps/cleanup/internal/segment_ctm_edits.py	/^    def JunkProportion(self):$/;"	m	class:Segment
KNOWN_COMPONENTS	steps/nnet3/convert_nnet2_to_nnet3.py	/^KNOWN_COMPONENTS = list(NODE_NAMES.keys())$/;"	v
KaldiLogParseException	steps/libs/nnet3/report/log_parse.py	/^class KaldiLogParseException(Exception):$/;"	c
KwslistDupSort	utils/kwslist_post_process.pl	/^sub KwslistDupSort {$/;"	s
KwslistDupSort	utils/write_kwslist.pl	/^sub KwslistDupSort {$/;"	s
KwslistOutputSort	utils/kwslist_post_process.pl	/^sub KwslistOutputSort {$/;"	s
KwslistOutputSort	utils/write_kwslist.pl	/^sub KwslistOutputSort {$/;"	s
L1Penalty	src/attention_neuro/basic_layers.py	/^class L1Penalty(Function):$/;"	c
LatexReport	steps/nnet3/report/generate_plots.py	/^class LatexReport(object):$/;"	c
Length	steps/cleanup/internal/segment_ctm_edits.py	/^    def Length(self):$/;"	m	class:Segment
LessThan	utils/data/internal/choose_utts_to_combine.py	/^def LessThan(x, y):$/;"	f
LightCNN_9Layers	src/v3_neuro.py	/^def LightCNN_9Layers(**kwargs):$/;"	f
LightCNN_9Layers	src/v7_neuro.py	/^def LightCNN_9Layers(**kwargs):$/;"	f
LightCNN_9Layers	src/v8_neuro.py	/^def LightCNN_9Layers(**kwargs):$/;"	f
LightCNN_9Layers_v2	src/v3_neuro.py	/^def LightCNN_9Layers_v2(**kwargs):$/;"	f
LocalAttenBlock	src/attention_neuro/basic_layers.py	/^class LocalAttenBlock(nn.Module):$/;"	c
M	main.py	/^M = 1091$/;"	v
M_2PI	utils/nnet/gen_hamm_mat.py	/^M_2PI = 6.283185307179586476925286766559005$/;"	v
M_PI	utils/nnet/gen_dct_mat.py	/^M_PI = 3.1415926535897932384626433832795$/;"	v
M_SQRT2	utils/nnet/gen_dct_mat.py	/^M_SQRT2 = 1.4142135623730950488016887$/;"	v
Main	steps/cleanup/combine_short_segments.py	/^def Main():$/;"	f
Main	steps/cleanup/internal/get_pron_stats.py	/^def Main():$/;"	f
Main	steps/dict/apply_lexicon_edits.py	/^def Main():$/;"	f
Main	steps/dict/get_pron_stats.py	/^def Main():$/;"	f
Main	steps/dict/internal/get_subsegments.py	/^def Main():$/;"	f
Main	steps/dict/internal/prune_pron_candidates.py	/^def Main():$/;"	f
Main	steps/dict/internal/sum_arc_info.py	/^def Main():$/;"	f
Main	steps/dict/merge_learned_lexicons.py	/^def Main():$/;"	f
Main	steps/dict/prons_to_lexicon.py	/^def Main():$/;"	f
Main	steps/dict/prune_pron_candidates.py	/^def Main():$/;"	f
Main	steps/dict/select_prons_bayesian.py	/^def Main():$/;"	f
Main	steps/dict/select_prons_greedy.py	/^def Main():$/;"	f
Main	steps/nnet3/convert_nnet2_to_nnet3.py	/^def Main():$/;"	f
Main	steps/nnet3/lstm/make_configs.py	/^def Main():$/;"	f
Main	steps/nnet3/report/summarize_compute_debug_timing.py	/^def Main():$/;"	f
Main	steps/nnet3/tdnn/make_configs.py	/^def Main():$/;"	f
MakeConfigs	steps/nnet3/lstm/make_configs.py	/^def MakeConfigs(config_dir, feat_dim, ivector_dim, num_targets,$/;"	f
MakeConfigs	steps/nnet3/tdnn/make_configs.py	/^def MakeConfigs(config_dir, splice_indexes_string,$/;"	f
MakeDir	steps/cleanup/combine_short_segments.py	/^def MakeDir(dir):$/;"	f
MalformedClippedProportionLineException	steps/libs/nnet3/report/log_parse.py	/^class MalformedClippedProportionLineException(Exception):$/;"	c
MergeWithSegment	steps/cleanup/internal/segment_ctm_edits.py	/^    def MergeWithSegment(self, other):$/;"	m	class:Segment
NODE_NAMES	steps/nnet3/convert_nnet2_to_nnet3.py	/^NODE_NAMES = {$/;"	v
NgramCounts	steps/cleanup/internal/make_one_biased_lm.py	/^class NgramCounts(object):$/;"	c
NgramCounts	utils/lang/make_kn_lm.py	/^class NgramCounts:$/;"	c
NgramCounts	utils/lang/make_phone_lm.py	/^class NgramCounts(object):$/;"	c
Nnet3ComponentNodeToDot	steps/nnet3/dot/nnet3_to_dot.py	/^def Nnet3ComponentNodeToDot(parsed_config):$/;"	f
Nnet3ComponentToDot	steps/nnet3/dot/nnet3_to_dot.py	/^def Nnet3ComponentToDot(component_config, component_attributes = None):$/;"	f
Nnet3DescriptorToDot	steps/nnet3/dot/nnet3_to_dot.py	/^def Nnet3DescriptorToDot(descriptor, parent_node_name):$/;"	f
Nnet3DimrangeToDot	steps/nnet3/dot/nnet3_to_dot.py	/^def Nnet3DimrangeToDot(parsed_config):$/;"	f
Nnet3InputToDot	steps/nnet3/dot/nnet3_to_dot.py	/^def Nnet3InputToDot(parsed_config):$/;"	f
Nnet3Model	steps/nnet3/convert_nnet2_to_nnet3.py	/^class Nnet3Model(object):$/;"	c
Nnet3OutputToDot	steps/nnet3/dot/nnet3_to_dot.py	/^def Nnet3OutputToDot(parsed_config):$/;"	f
NormalizeLexicon	steps/dict/prons_to_lexicon.py	/^def NormalizeLexicon(lexicon, set_max_to_one = True,$/;"	f
Note	utils/apply_map.pl	/^ Note: <field-range> can look like 4-5, or 4-, or 5-, or 1, it means the field$/;"	l
NullstrToNoneAction	steps/libs/common.py	/^class NullstrToNoneAction(argparse.Action):$/;"	c
OneEMIter	steps/dict/select_prons_greedy.py	/^def OneEMIter(args, word, stats, prons, pron_probs, debug=False):$/;"	f
OpenFiles	steps/cleanup/internal/get_ctm_edits.py	/^def OpenFiles():$/;"	f
Options	utils/nnet-cpu/make_nnet_config.pl	/^Options:$/;"	l
Options	utils/nnet-cpu/make_nnet_config_block.pl	/^Options:$/;"	l
Options	utils/nnet-cpu/make_nnet_config_preconditioned.pl	/^Options:$/;"	l
Options	utils/nnet-cpu/update_learning_rates.pl	/^Options:$/;"	l
OutputCtm	steps/cleanup/internal/get_ctm_edits.py	/^def OutputCtm(utterance_id, edits_array, ctm_array):$/;"	f
PadArrays	steps/cleanup/internal/get_ctm_edits.py	/^def PadArrays(edits_array, ctm_array):$/;"	f
ParseCnnString	steps/nnet3/tdnn/make_configs.py	/^def ParseCnnString(cnn_param_string_list):$/;"	f
ParseConfigLines	steps/nnet3/dot/nnet3_to_dot.py	/^def ParseConfigLines(lines, node_prefixes = None, component_attributes = None ):$/;"	f
ParseDataDirInfo	steps/cleanup/combine_short_segments.py	/^def ParseDataDirInfo(data_dir):$/;"	f
ParseFileToDict	steps/cleanup/combine_short_segments.py	/^def ParseFileToDict(file, assert2fields = False, value_processor = None):$/;"	f
ParseLstmDelayString	steps/nnet3/lstm/make_configs.py	/^def ParseLstmDelayString(lstm_delay):$/;"	f
ParseNnet3String	steps/nnet3/dot/nnet3_to_dot.py	/^def ParseNnet3String(string):$/;"	f
ParseSpliceString	steps/nnet3/lstm/make_configs.py	/^def ParseSpliceString(splice_indexes, label_delay=None):$/;"	f
ParseSpliceString	steps/nnet3/tdnn/make_configs.py	/^def ParseSpliceString(splice_indexes):$/;"	f
ParseSubsegmentsAndArguments	steps/nnet3/dot/descriptor_parser.py	/^def ParseSubsegmentsAndArguments(segment_endpoints, sub_segments, arguments, input_string):$/;"	f
PlainConvBlock	src/attention_neuro/basic_layers.py	/^class PlainConvBlock(nn.Module):$/;"	c
PossiblyAddTaintedLines	steps/cleanup/internal/segment_ctm_edits.py	/^    def PossiblyAddTaintedLines(self):$/;"	m	class:Segment
PossiblyAddUnkPadding	steps/cleanup/internal/segment_ctm_edits.py	/^    def PossiblyAddUnkPadding(self):$/;"	m	class:Segment
PossiblySplitSegment	steps/cleanup/internal/segment_ctm_edits.py	/^    def PossiblySplitSegment(self):$/;"	m	class:Segment
PossiblyTruncateBoundaries	steps/cleanup/internal/segment_ctm_edits.py	/^    def PossiblyTruncateBoundaries(self):$/;"	m	class:Segment
PossiblyTruncateEndForJunkProportion	steps/cleanup/internal/segment_ctm_edits.py	/^    def PossiblyTruncateEndForJunkProportion(self):$/;"	m	class:Segment
PossiblyTruncateStartForJunkProportion	steps/cleanup/internal/segment_ctm_edits.py	/^    def PossiblyTruncateStartForJunkProportion(self):$/;"	m	class:Segment
PreAttenResNet	src/attention_neuro/simple_attention_network.py	/^class PreAttenResNet(nn.Module):$/;"	c
Print	steps/cleanup/internal/make_one_biased_lm.py	/^    def Print(self, info_string):$/;"	m	class:NgramCounts
Print	utils/lang/make_phone_lm.py	/^    def Print(self, info_string):$/;"	m	class:NgramCounts
PrintAsArpa	utils/lang/make_phone_lm.py	/^    def PrintAsArpa(self):$/;"	m	class:NgramCounts
PrintAsFst	steps/cleanup/internal/make_one_biased_lm.py	/^    def PrintAsFst(self, word_disambig_symbol):$/;"	m	class:NgramCounts
PrintAsFst	utils/lang/internal/arpa2fst_constrained.py	/^    def PrintAsFst(self, disambig_symbol, bigram_map):$/;"	m	class:ArpaModel
PrintAsFst	utils/lang/make_phone_lm.py	/^    def PrintAsFst(self, word_disambig_symbol):$/;"	m	class:NgramCounts
PrintConfig	steps/nnet3/lstm/make_configs.py	/^def PrintConfig(file_name, config_lines):$/;"	f
PrintConfig	steps/nnet3/tdnn/make_configs.py	/^def PrintConfig(file_name, config_lines):$/;"	f
PrintDebugInfoForUtterance	steps/cleanup/internal/segment_ctm_edits.py	/^def PrintDebugInfoForUtterance(ctm_edits_out_handle,$/;"	f
PrintKwslist	utils/kwslist_post_process.pl	/^sub PrintKwslist {$/;"	s
PrintKwslist	utils/write_kwslist.pl	/^sub PrintKwslist {$/;"	s
PrintNonScoredStats	steps/cleanup/internal/modify_ctm_edits.py	/^def PrintNonScoredStats():$/;"	f
PrintNonScoredStats	steps/cleanup/internal/taint_ctm_edits.py	/^def PrintNonScoredStats():$/;"	f
PrintRepetitionStats	steps/cleanup/internal/modify_ctm_edits.py	/^def PrintRepetitionStats():$/;"	f
PrintSegment	steps/cleanup/create_segments_from_ctm.pl	/^sub PrintSegment {$/;"	s
PrintSegmentStats	steps/cleanup/internal/segment_ctm_edits.py	/^def PrintSegmentStats():$/;"	f
PrintStats	steps/cleanup/internal/taint_ctm_edits.py	/^def PrintStats():$/;"	f
PrintWordStats	steps/cleanup/internal/segment_ctm_edits.py	/^def PrintWordStats(word_stats_out):$/;"	f
ProcessAppendDescriptor	steps/nnet3/dot/nnet3_to_dot.py	/^def ProcessAppendDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessData	steps/cleanup/internal/get_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessData	steps/cleanup/internal/modify_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessData	steps/cleanup/internal/segment_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessData	steps/cleanup/internal/taint_ctm_edits.py	/^def ProcessData():$/;"	f
ProcessGroupOfLines	steps/cleanup/make_biased_lms.py	/^def ProcessGroupOfLines(group_of_lines):$/;"	f
ProcessIfDefinedDescriptor	steps/nnet3/dot/nnet3_to_dot.py	/^def ProcessIfDefinedDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessLineForNonScoredWords	steps/cleanup/internal/modify_ctm_edits.py	/^def ProcessLineForNonScoredWords(a):$/;"	f
ProcessOffsetDescriptor	steps/nnet3/dot/nnet3_to_dot.py	/^def ProcessOffsetDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessOneUtterance	steps/cleanup/internal/get_ctm_edits.py	/^def ProcessOneUtterance(utterance_id, edits_line, ctm_lines):$/;"	f
ProcessReplaceIndexDescriptor	steps/nnet3/dot/nnet3_to_dot.py	/^def ProcessReplaceIndexDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessRoundDescriptor	steps/nnet3/dot/nnet3_to_dot.py	/^def ProcessRoundDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessSpliceIndexes	steps/nnet3/lstm/make_configs.py	/^def ProcessSpliceIndexes(config_dir, splice_indexes, label_delay, num_lstm_layers):$/;"	f
ProcessSumDescriptor	steps/nnet3/dot/nnet3_to_dot.py	/^def ProcessSumDescriptor(segment, parent_node_name, affix, edge_attributes = None):$/;"	f
ProcessUtterance	steps/cleanup/internal/modify_ctm_edits.py	/^def ProcessUtterance(split_lines_of_utt):$/;"	f
ProcessUtterance	steps/cleanup/internal/taint_ctm_edits.py	/^def ProcessUtterance(split_lines_of_utt, remove_deletions=True):$/;"	f
ProcessUtteranceForRepetitions	steps/cleanup/internal/modify_ctm_edits.py	/^def ProcessUtteranceForRepetitions(split_lines_of_utt):$/;"	f
ProcessWav	steps/cleanup/create_segments_from_ctm.pl	/^sub ProcessWav {$/;"	s
PruneEmptyStates	utils/lang/make_phone_lm.py	/^    def PruneEmptyStates(self):$/;"	m	class:NgramCounts
PruneNgram	utils/lang/make_phone_lm.py	/^    def PruneNgram(self, hist, word):$/;"	m	class:NgramCounts
PruneProns	steps/dict/internal/prune_pron_candidates.py	/^def PruneProns(args, stats, ref_lexicon, lexicon_phonetic_decoding, lexicon_g2p, lexicon_g2p_probs):$/;"	f
PruneProns	steps/dict/prune_pron_candidates.py	/^def PruneProns(args, stats, ref_lexicon):$/;"	f
PruneToFinalTarget	utils/lang/make_phone_lm.py	/^    def PruneToFinalTarget(self, num_extra_ngrams):$/;"	m	class:NgramCounts
PruneToIntermediateTarget	utils/lang/make_phone_lm.py	/^    def PruneToIntermediateTarget(self, num_extra_ngrams):$/;"	m	class:NgramCounts
PruningLogprobChange	utils/lang/make_phone_lm.py	/^    def PruningLogprobChange(self, count, discount, backoff_count, backoff_total):$/;"	m	class:NgramCounts
Read	utils/lang/internal/arpa2fst_constrained.py	/^    def Read(self, arpa_in):$/;"	m	class:ArpaModel
ReadArcStats	steps/dict/merge_learned_lexicons.py	/^def ReadArcStats(arc_stats_file_handle):$/;"	f
ReadArcStats	steps/dict/select_prons_greedy.py	/^def ReadArcStats(arc_stats_file_handle):$/;"	f
ReadBigramMap	utils/lang/internal/arpa2fst_constrained.py	/^def ReadBigramMap(bigrams_file):$/;"	f
ReadEntries	steps/cleanup/internal/get_pron_stats.py	/^def ReadEntries(file_handle):$/;"	f
ReadKwslist	utils/kwslist_post_process.pl	/^sub ReadKwslist {$/;"	s
ReadLexicon	steps/dict/apply_lexicon_edits.py	/^def ReadLexicon(lexicon_file_handle):$/;"	f
ReadLexicon	steps/dict/internal/prune_pron_candidates.py	/^def ReadLexicon(lexicon_handle):$/;"	f
ReadLexicon	steps/dict/merge_learned_lexicons.py	/^def ReadLexicon(args, lexicon_file_handle, counts):$/;"	f
ReadLexicon	steps/dict/prons_to_lexicon.py	/^def ReadLexicon(lexicon_file_handle):$/;"	f
ReadLexicon	steps/dict/prune_pron_candidates.py	/^def ReadLexicon(ref_lexicon_handle):$/;"	f
ReadLexicon	steps/dict/select_prons_bayesian.py	/^def ReadLexicon(args, lexicon_file_handle, counts):$/;"	f
ReadLexicon	steps/dict/select_prons_greedy.py	/^def ReadLexicon(args, lexicon_file_handle, counts):$/;"	f
ReadLexiconp	steps/dict/internal/prune_pron_candidates.py	/^def ReadLexiconp(lexiconp_handle):$/;"	f
ReadNonScoredWords	steps/cleanup/internal/modify_ctm_edits.py	/^def ReadNonScoredWords(non_scored_words_file):$/;"	f
ReadNonScoredWords	steps/cleanup/internal/segment_ctm_edits.py	/^def ReadNonScoredWords(non_scored_words_file):$/;"	f
ReadPronStats	steps/dict/select_prons_bayesian.py	/^def ReadPronStats(pron_stats_file_handle):$/;"	f
ReadStats	steps/dict/internal/prune_pron_candidates.py	/^def ReadStats(pron_stats_handle):$/;"	f
ReadStats	steps/dict/prons_to_lexicon.py	/^def ReadStats(args):$/;"	f
ReadStats	steps/dict/prune_pron_candidates.py	/^def ReadStats(pron_stats_handle):$/;"	f
ReadVocab	steps/dict/internal/get_subsegments.py	/^def ReadVocab(vocab_file_handle):$/;"	f
ReadWordCounts	steps/dict/merge_learned_lexicons.py	/^def ReadWordCounts(word_counts_file_handle):$/;"	f
ReadWordCounts	steps/dict/select_prons_bayesian.py	/^def ReadWordCounts(word_counts_file_handle):$/;"	f
ReadWordCounts	steps/dict/select_prons_greedy.py	/^def ReadWordCounts(word_counts_file_handle):$/;"	f
RelaxBoundaryTruncation	steps/cleanup/internal/segment_ctm_edits.py	/^    def RelaxBoundaryTruncation(self):$/;"	m	class:Segment
ResNet	src/v2_neuro.py	/^class ResNet(nn.Module):$/;"	c
ResNet	src/v5_neuro.py	/^class ResNet(nn.Module):$/;"	c
ResNet	src/v6_neuro.py	/^class ResNet(nn.Module):$/;"	c
ResNet2	src/v2_neuro.py	/^class ResNet2(nn.Module):$/;"	c
ResNet2	src/v5_neuro.py	/^class ResNet2(nn.Module):$/;"	c
ResNet3	src/v5_neuro.py	/^class ResNet3(nn.Module):$/;"	c
ResNet4	src/v5_neuro.py	/^class ResNet4(nn.Module):$/;"	c
ResidualAttentionModel	src/attention_neuro/residual_attention_network.py	/^class ResidualAttentionModel(nn.Module):$/;"	c
ResidualBlock	src/attention_neuro/basic_layers.py	/^class ResidualBlock(nn.Module):$/;"	c
RnnlmInput	steps/tfrnnlm/lstm.py	/^class RnnlmInput(object):$/;"	c
RnnlmInput	steps/tfrnnlm/lstm_fast.py	/^class RnnlmInput(object):$/;"	c
RnnlmInput	steps/tfrnnlm/vanilla_rnnlm.py	/^class RnnlmInput(object):$/;"	c
RnnlmModel	steps/tfrnnlm/lstm.py	/^class RnnlmModel(object):$/;"	c
RnnlmModel	steps/tfrnnlm/lstm_fast.py	/^class RnnlmModel(object):$/;"	c
RnnlmModel	steps/tfrnnlm/vanilla_rnnlm.py	/^class RnnlmModel(object):$/;"	c
RunKaldiCommand	steps/cleanup/combine_short_segments.py	/^def RunKaldiCommand(command, wait = True):$/;"	f
RunKaldiCommand	steps/data/data_dir_manipulation_lib.py	/^def RunKaldiCommand(command, wait = True):$/;"	f
RunOpts	steps/libs/nnet3/train/common.py	/^class RunOpts(object):$/;"	c
SPLICE_COMPONENTS	steps/nnet3/convert_nnet2_to_nnet3.py	/^SPLICE_COMPONENTS = [c for c in NODE_NAMES if "Splice" in c]$/;"	v
Segment	steps/cleanup/internal/segment_ctm_edits.py	/^class Segment(object):$/;"	c
Segment	steps/cleanup/internal/segment_ctm_edits_mild.py	/^class Segment(object):$/;"	c
SegmentStats	steps/cleanup/internal/segment_ctm_edits_mild.py	/^class SegmentStats(object):$/;"	c
Segmentation	steps/segmentation/internal/sad_to_segments.py	/^class Segmentation(object):$/;"	c
SegmenterStats	steps/segmentation/internal/sad_to_segments.py	/^class SegmenterStats(object):$/;"	c
SegmentsMerger	steps/cleanup/internal/segment_ctm_edits_mild.py	/^class SegmentsMerger(object):$/;"	c
SelectPronsBayesian	steps/dict/select_prons_bayesian.py	/^def SelectPronsBayesian(args, counts, posteriors, ref_lexicon, g2p_lexicon, phonetic_decoding_lexicon):$/;"	f
SelectPronsGreedy	steps/dict/select_prons_greedy.py	/^def SelectPronsGreedy(args, stats, counts, ref_lexicon, g2p_lexicon, pd_lexicon, dianostic_info=False):$/;"	f
SelfTest	steps/libs/nnet3/train/common.py	/^class SelfTest(unittest.TestCase):$/;"	c
SelfTest	utils/data/internal/choose_utts_to_combine.py	/^def SelfTest():$/;"	f
SplitIntoGroups	utils/data/internal/modify_speaker_info.py	/^def SplitIntoGroups(uttlist):$/;"	f
SplitLongSegment	steps/cleanup/create_segments_from_ctm.pl	/^sub SplitLongSegment {$/;"	s
SpoofDataset	src/data_reader/v1_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v2_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v3_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v4_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v5_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v6_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v7_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v8_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
SpoofDataset	src/data_reader/v9_dataset.py	/^class SpoofDataset(data.Dataset):$/;"	c
StartTime	steps/cleanup/internal/segment_ctm_edits.py	/^    def StartTime(self):$/;"	m	class:Segment
StrToBoolAction	steps/dict/internal/sum_arc_info.py	/^class StrToBoolAction(argparse.Action):$/;"	c
StrToBoolAction	steps/dict/prons_to_lexicon.py	/^class StrToBoolAction(argparse.Action):$/;"	c
StrToBoolAction	steps/libs/common.py	/^class StrToBoolAction(argparse.Action):$/;"	c
SubprocessFailed	src/data_reader/kaldi_io.py	/^class SubprocessFailed(Exception):$/;"	c
TFIDF	steps/cleanup/internal/tf_idf.py	/^class TFIDF(object):$/;"	c
TFStats	steps/cleanup/internal/tf_idf.py	/^class TFStats(object):$/;"	c
TakeTopN	steps/dict/prons_to_lexicon.py	/^def TakeTopN(lexicon, top_N):$/;"	f
Text	steps/cleanup/internal/segment_ctm_edits.py	/^    def Text(self):$/;"	m	class:Segment
TimeToString	steps/cleanup/internal/segment_ctm_edits.py	/^def TimeToString(time, frame_length):$/;"	f
UnknownMatrixHeader	src/data_reader/kaldi_io.py	/^class UnknownMatrixHeader(Exception):$/;"	c
UnknownVectorHeader	src/data_reader/kaldi_io.py	/^class UnknownVectorHeader(Exception):$/;"	c
UnsupportedDataType	src/data_reader/kaldi_io.py	/^class UnsupportedDataType(Exception):$/;"	c
Usage	steps/cleanup/create_segments_from_ctm.pl	/^Usage: steps\/cleanup\/create_segments_from_ctm.pl [options] \\$/;"	l
Usage	steps/cleanup/internal/ctm_to_text.pl	/^Usage: ctm_to_text.pl [--non-scored-words <file>] <ctm-file> > <text>$/;"	l
Usage	utils/apply_map.pl	/^Usage: apply_map.pl [options] map <input >output$/;"	l
Usage	utils/create_data_link.pl	/^Usage: utils\/create_data_link.pl <data-archive1> [<data-archive2> ... ]$/;"	l
Usage	utils/create_split_dir.pl	/^Usage: utils\/create_split_dir.pl <actual_storage_dirs> <pseudo_storage_dir>$/;"	l
Usage	utils/data/fix_subsegment_feats.pl	/^Usage: $0 <utt2max-frames> < feats.scp > fixed_feats.scp$/;"	l
Usage	utils/kwslist_post_process.pl	/^Usage: kwslist_post_process.pl [options] <kwslist_in|-> <kwslist_out|->$/;"	l
Usage	utils/lang/add_unigrams_arpa.pl	/^Usage: utils\/lang\/add_unigrams_arpa.pl [options] <oov-prob-file> <scale> <input-arpa >output-arpa$/;"	l
Usage	utils/lang/adjust_unk_arpa.pl	/^Usage: utils\/lang\/adjust_unk_arpa.pl [options] <oov-dict-entry> <unk-scale> <input-arpa >output-arpa$/;"	l
Usage	utils/lang/get_word_position_phone_map.pl	/^Usage: utils\/lang\/get_word_position_phone_map.pl <lang-dir> <output-dir>$/;"	l
Usage	utils/lang/validate_disambig_sym_file.pl	/^Usage:  validate_disambig_sym_file.pl [options] disambig_syms.txt$/;"	l
Usage	utils/map_arpa_lm.pl	/^Usage: utils\/map_arpa_lm.pl [options] <vocab-file> < input-arpa >output-arpa$/;"	l
Usage	utils/write_kwslist.pl	/^Usage: utils\/write_kwslist.pl [options] <raw_result_in|-> <kwslist_out|->$/;"	l
Utterance	utils/data/perturb_speed_to_allowed_lengths.py	/^class Utterance(object):$/;"	c
UtteranceStats	steps/cleanup/internal/segment_ctm_edits_mild.py	/^class UtteranceStats(object):$/;"	c
WordStats	steps/cleanup/internal/segment_ctm_edits_mild.py	/^class WordStats(object):$/;"	c
Words	utils/lang/make_phone_lm.py	/^    def Words(self):$/;"	m	class:CountsForHistory
WriteCombinedDirFiles	steps/cleanup/combine_short_segments.py	/^def WriteCombinedDirFiles(output_dir, utt2spk, spk2utt, text, feat, utt2dur, utt2uniq):$/;"	f
WriteDictToFile	steps/cleanup/combine_short_segments.py	/^def WriteDictToFile(dict, file_name):$/;"	f
WriteEditsAndSummary	steps/dict/merge_learned_lexicons.py	/^def WriteEditsAndSummary(args, learned_lexicon, ref_lexicon, pd_lexicon, g2p_lexicon, counts, stats, stats_summed):$/;"	f
WriteEditsAndSummary	steps/dict/select_prons_bayesian.py	/^def WriteEditsAndSummary(args, learned_lexicon, ref_lexicon, phonetic_decoding_lexicon, g2p_lexicon, counts, stats):$/;"	f
WriteLearnedLexicon	steps/dict/select_prons_greedy.py	/^def WriteLearnedLexicon(learned_lexicon, file_handle):$/;"	f
WriteLearnedLexiconOov	steps/dict/merge_learned_lexicons.py	/^def WriteLearnedLexiconOov(learned_lexicon, ref_lexicon, file_handle):$/;"	f
WriteLearnedLexiconOov	steps/dict/select_prons_bayesian.py	/^def WriteLearnedLexiconOov(learned_lexicon, ref_lexicon, file_handle):$/;"	f
WriteLexicon	steps/dict/apply_lexicon_edits.py	/^def WriteLexicon(lexicon, out_lexicon_handle):$/;"	f
WriteLexicon	steps/dict/prons_to_lexicon.py	/^def WriteLexicon(args, lexicon, filter_lexicon):$/;"	f
WriteSegmentsForUtterance	steps/cleanup/internal/segment_ctm_edits.py	/^def WriteSegmentsForUtterance(text_output_handle, segments_output_handle,$/;"	f
WriteStats	steps/cleanup/internal/get_pron_stats.py	/^def WriteStats(stats, file_handle):$/;"	f
WriteStats	steps/dict/get_pron_stats.py	/^def WriteStats(stats, file_handle):$/;"	f
XconfigAffineComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigAffineComponent(XconfigLayerBase):$/;"	c
XconfigAffineLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigAffineLayer(XconfigLayerBase):$/;"	c
XconfigAttentionLayer	steps/libs/nnet3/xconfig/attention.py	/^class XconfigAttentionLayer(XconfigLayerBase):$/;"	c
XconfigBasicLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigBasicLayer(XconfigLayerBase):$/;"	c
XconfigBatchnormComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigBatchnormComponent(XconfigLayerBase):$/;"	c
XconfigCombineFeatureMapsLayer	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigCombineFeatureMapsLayer(XconfigLayerBase):$/;"	c
XconfigConvLayer	steps/libs/nnet3/xconfig/convolution.py	/^class XconfigConvLayer(XconfigLayerBase):$/;"	c
XconfigDeltaLayer	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigDeltaLayer(XconfigLayerBase):$/;"	c
XconfigDimRangeComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigDimRangeComponent(XconfigLayerBase):$/;"	c
XconfigExistingLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigExistingLayer(XconfigLayerBase):$/;"	c
XconfigFastGruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigFastGruLayer(XconfigLayerBase):$/;"	c
XconfigFastLstmLayer	steps/libs/nnet3/xconfig/lstm.py	/^class XconfigFastLstmLayer(XconfigLayerBase):$/;"	c
XconfigFastLstmpLayer	steps/libs/nnet3/xconfig/lstm.py	/^class XconfigFastLstmpLayer(XconfigLayerBase):$/;"	c
XconfigFastNormOpgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigFastNormOpgruLayer(XconfigLayerBase):$/;"	c
XconfigFastNormPgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigFastNormPgruLayer(XconfigLayerBase):$/;"	c
XconfigFastOpgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigFastOpgruLayer(XconfigLayerBase):$/;"	c
XconfigFastPgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigFastPgruLayer(XconfigLayerBase):$/;"	c
XconfigFixedAffineLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigFixedAffineLayer(XconfigLayerBase):$/;"	c
XconfigGruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigGruLayer(XconfigLayerBase):$/;"	c
XconfigIdctLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigIdctLayer(XconfigLayerBase):$/;"	c
XconfigInputLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigInputLayer(XconfigLayerBase):$/;"	c
XconfigLayerBase	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigLayerBase(object):$/;"	c
XconfigLinearComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigLinearComponent(XconfigLayerBase):$/;"	c
XconfigLstmLayer	steps/libs/nnet3/xconfig/lstm.py	/^class XconfigLstmLayer(XconfigLayerBase):$/;"	c
XconfigLstmbLayer	steps/libs/nnet3/xconfig/lstm.py	/^class XconfigLstmbLayer(XconfigLayerBase):$/;"	c
XconfigLstmpLayer	steps/libs/nnet3/xconfig/lstm.py	/^class XconfigLstmpLayer(XconfigLayerBase):$/;"	c
XconfigNoOpComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigNoOpComponent(XconfigLayerBase):$/;"	c
XconfigNormOpgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigNormOpgruLayer(XconfigLayerBase):$/;"	c
XconfigNormPgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigNormPgruLayer(XconfigLayerBase):$/;"	c
XconfigOpgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigOpgruLayer(XconfigLayerBase):$/;"	c
XconfigOutputLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigOutputLayer(XconfigLayerBase):$/;"	c
XconfigPerElementOffsetComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigPerElementOffsetComponent(XconfigLayerBase):$/;"	c
XconfigPerElementScaleComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigPerElementScaleComponent(XconfigLayerBase):$/;"	c
XconfigPgruLayer	steps/libs/nnet3/xconfig/gru.py	/^class XconfigPgruLayer(XconfigLayerBase):$/;"	c
XconfigPrefinalLayer	steps/libs/nnet3/xconfig/composite_layers.py	/^class XconfigPrefinalLayer(XconfigLayerBase):$/;"	c
XconfigRenormComponent	steps/libs/nnet3/xconfig/trivial_layers.py	/^class XconfigRenormComponent(XconfigLayerBase):$/;"	c
XconfigRes2Block	steps/libs/nnet3/xconfig/convolution.py	/^class XconfigRes2Block(XconfigLayerBase):$/;"	c
XconfigResBlock	steps/libs/nnet3/xconfig/convolution.py	/^class XconfigResBlock(XconfigLayerBase):$/;"	c
XconfigSpecAugmentLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigSpecAugmentLayer(XconfigLayerBase):$/;"	c
XconfigStatsLayer	steps/libs/nnet3/xconfig/stats_layer.py	/^class XconfigStatsLayer(XconfigLayerBase):$/;"	c
XconfigTdnnfLayer	steps/libs/nnet3/xconfig/composite_layers.py	/^class XconfigTdnnfLayer(XconfigLayerBase):$/;"	c
XconfigTrivialOutputLayer	steps/libs/nnet3/xconfig/basic_layers.py	/^class XconfigTrivialOutputLayer(XconfigLayerBase):$/;"	c
__all__	steps/libs/__init__.py	/^__all__ = ["common"]$/;"	v
__all__	steps/libs/nnet3/report/__init__.py	/^__all__ = ["log_parse"]$/;"	v
__all__	steps/libs/nnet3/train/chain_objf/__init__.py	/^__all__ = ["acoustic_model"]$/;"	v
__all__	steps/libs/nnet3/train/frame_level_objf/__init__.py	/^__all__ = ["common", "raw_model", "acoustic_model"]$/;"	v
__all__	steps/libs/nnet3/xconfig/__init__.py	/^__all__ = ["utils", "layers", "parser"]$/;"	v
__call__	steps/dict/internal/sum_arc_info.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:StrToBoolAction	file:
__call__	steps/dict/prons_to_lexicon.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:StrToBoolAction	file:
__call__	steps/libs/common.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:NullstrToNoneAction	file:
__call__	steps/libs/common.py	/^    def __call__(self, parser, namespace, values, option_string=None):$/;"	m	class:StrToBoolAction	file:
__enter__	steps/libs/common.py	/^    def __enter__(self):$/;"	m	class:smart_open	file:
__exit__	steps/libs/common.py	/^    def __exit__(self, *args):$/;"	m	class:smart_open	file:
__getitem__	src/data_reader/v1_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v2_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v3_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v4_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v5_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v6_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v7_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v8_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__getitem__	src/data_reader/v9_dataset.py	/^    def __getitem__(self, index):$/;"	m	class:SpoofDataset	file:
__init__	src/attention_neuro/attention_module.py	/^    def __init__(self, in_channels, out_channels, size1=(128,545), size2=(120,529), size3=(104,497), size4=(72,186), l1weight=0.2):$/;"	m	class:AttentionModule_stg0
__init__	src/attention_neuro/basic_layers.py	/^    def __init__(self, in_channels, dilation=1):$/;"	m	class:LocalAttenBlock
__init__	src/attention_neuro/basic_layers.py	/^    def __init__(self, in_channels, dilation=1):$/;"	m	class:PlainConvBlock
__init__	src/attention_neuro/basic_layers.py	/^    def __init__(self, in_channels, dilation=1):$/;"	m	class:ResidualBlock
__init__	src/attention_neuro/basic_layers.py	/^    def __init__(self, in_channels, out_channels, dilation=1):$/;"	m	class:CRResidualBlock
__init__	src/attention_neuro/complex_attention_network.py	/^    def __init__(self, atten_width=1, atten_channel=16, size1=(257,1091), size2=(249,1075), size3=(233,1043), size4=(201,979), size5=(137,851)):$/;"	m	class:CAttenResNet1
__init__	src/attention_neuro/recurrent_attention.py	/^    def __init__(self, batch=32, bidirectional=True):$/;"	m	class:BLSTM
__init__	src/attention_neuro/recurrent_attention.py	/^    def __init__(self, bidirectional=True):$/;"	m	class:BGRU
__init__	src/attention_neuro/residual_attention_network.py	/^    def __init__(self):$/;"	m	class:ResidualAttentionModel
__init__	src/attention_neuro/simple_attention_network.py	/^    def __init__(self, atten_activation, atten_channel=16, size1=(257,1091), size2=(249,1075), size3=(233,1043), size4=(201,979), size5=(137,851)):$/;"	m	class:AttenResNet
__init__	src/attention_neuro/simple_attention_network.py	/^    def __init__(self, atten_activation, atten_channel=16, size1=(257,1091), size2=(249,1075), size3=(233,1043), size4=(201,979), size5=(137,851)):$/;"	m	class:AttenResNet2
__init__	src/attention_neuro/simple_attention_network.py	/^    def __init__(self, atten_activation, atten_channel=16, size1=(257,1091), size2=(249,1075), size3=(233,1043), size4=(201,979), size5=(137,851)):$/;"	m	class:AttenResNet3
__init__	src/attention_neuro/simple_attention_network.py	/^    def __init__(self, atten_activation, atten_channel=16, size1=(257,1091), size2=(249,1075), size3=(233,1043), size4=(201,979), size5=(137,851)):$/;"	m	class:AttenResNet4
__init__	src/attention_neuro/simple_attention_network.py	/^    def __init__(self, atten_activation, atten_channel=16, temperature=1, size1=(257,1091), size2=(249,1075), size3=(233,1043), size4=(201,979), size5=(137,851)):$/;"	m	class:AttenResNet5
__init__	src/attention_neuro/simple_attention_network.py	/^    def __init__(self, pretrain_resnet, atten_activation, atten_channel=16, size1=(257,1091), size2=(249,1075), size3=(233,1043), size4=(201,979), size5=(137,851)):$/;"	m	class:PreAttenResNet
__init__	src/data_reader/v1_dataset.py	/^    def __init__(self, scp_file, utt2label_file, M):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v2_dataset.py	/^    def __init__(self, scp_file, utt2label_file):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v3_dataset.py	/^    def __init__(self, scp_file, utt2label_file):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v4_dataset.py	/^    def __init__(self, scp_file, utt2label_file, M):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v5_dataset.py	/^    def __init__(self, scp_file, utt2label_file, M):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v6_dataset.py	/^    def __init__(self, scp_file, utt2label_file, M):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v7_dataset.py	/^    def __init__(self, scp_file, utt2label_file):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v8_dataset.py	/^    def __init__(self, scp_file, utt2label_file):$/;"	m	class:SpoofDataset
__init__	src/data_reader/v9_dataset.py	/^    def __init__(self, scp_file, utt2label_file):$/;"	m	class:SpoofDataset
__init__	src/v1_neuro.py	/^    def __init__(self):$/;"	m	class:ConvGRU
__init__	src/v1_neuro.py	/^    def __init__(self, input_dim):$/;"	m	class:FeedForward
__init__	src/v1_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ConvNet
__init__	src/v2_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ConvNet
__init__	src/v2_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ConvRes
__init__	src/v2_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ConvSmall
__init__	src/v2_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ResNet
__init__	src/v2_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ResNet2
__init__	src/v3_neuro.py	/^    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, dilation=1):$/;"	m	class:group
__init__	src/v3_neuro.py	/^    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1, type=1, dilation=1):$/;"	m	class:mfm
__init__	src/v3_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:network_9layers
__init__	src/v3_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:network_9layers_v2
__init__	src/v4_neuro.py	/^    def __init__(self):$/;"	m	class:FConv
__init__	src/v5_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ResNet
__init__	src/v5_neuro.py	/^    def __init__(self, input_size=(1,257,1091)):$/;"	m	class:ResNet4
__init__	src/v5_neuro.py	/^    def __init__(self, input_size=(1,40,1091)):$/;"	m	class:FCResNet
__init__	src/v5_neuro.py	/^    def __init__(self, input_size=(1,40,1091)):$/;"	m	class:ResNet2
__init__	src/v5_neuro.py	/^    def __init__(self, input_size=(1,40,1091)):$/;"	m	class:ResNet3
__init__	src/v6_neuro.py	/^    def __init__(self, input_size=(1,863,1278)):$/;"	m	class:ResNet
__init__	src/v7_neuro.py	/^    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, dilation=1):$/;"	m	class:group
__init__	src/v7_neuro.py	/^    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1, type=1, dilation=1):$/;"	m	class:mfm
__init__	src/v7_neuro.py	/^    def __init__(self, input_1=(1,257,1091), input_2=(1,129,1091)):$/;"	m	class:network_9layers
__init__	src/v8_neuro.py	/^    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, dilation=1):$/;"	m	class:group
__init__	src/v8_neuro.py	/^    def __init__(self, in_channels, out_channels, kernel_size=3, stride=1, padding=1, type=1, dilation=1):$/;"	m	class:mfm
__init__	src/v8_neuro.py	/^    def __init__(self, input_1=(1,257,1091), input_2=(1,129,1091)):$/;"	m	class:network_9layers
__init__	steps/cleanup/internal/make_one_biased_lm.py	/^    def __init__(self, ngram_order):$/;"	m	class:NgramCounts
__init__	steps/cleanup/internal/segment_ctm_edits.py	/^    def __init__(self, split_lines_of_utt, start_index, end_index, debug_str = None):$/;"	m	class:Segment
__init__	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self):$/;"	m	class:SegmentStats
__init__	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self):$/;"	m	class:UtteranceStats
__init__	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self):$/;"	m	class:WordStats
__init__	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self, segments):$/;"	m	class:SegmentsMerger
__init__	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def __init__(self, split_lines_of_utt, start_index, end_index,$/;"	m	class:Segment
__init__	steps/cleanup/internal/tf_idf.py	/^    def __init__(self):$/;"	m	class:IDFStats
__init__	steps/cleanup/internal/tf_idf.py	/^    def __init__(self):$/;"	m	class:TFIDF
__init__	steps/cleanup/internal/tf_idf.py	/^    def __init__(self):$/;"	m	class:TFStats
__init__	steps/data/reverberate_data_dir.py	/^    def __init__(self, list):$/;"	m	class:list_cyclic_iterator
__init__	steps/libs/common.py	/^    def __init__(self, filename, mode="r"):$/;"	m	class:smart_open
__init__	steps/libs/nnet3/report/log_parse.py	/^    def __init__(self, line):$/;"	m	class:MalformedClippedProportionLineException
__init__	steps/libs/nnet3/report/log_parse.py	/^    def __init__(self, message = None):$/;"	m	class:KaldiLogParseException
__init__	steps/libs/nnet3/train/common.py	/^    def __init__(self):$/;"	m	class:RunOpts
__init__	steps/libs/nnet3/train/common.py	/^    def __init__(self,$/;"	m	class:CommonParser
__init__	steps/libs/nnet3/xconfig/attention.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigAttentionLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, all_layers):$/;"	m	class:XconfigLayerBase
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigAffineLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigBasicLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigExistingLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigFixedAffineLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigIdctLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigInputLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigOutputLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigSpecAugmentLayer
__init__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigTrivialOutputLayer
__init__	steps/libs/nnet3/xconfig/composite_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigPrefinalLayer
__init__	steps/libs/nnet3/xconfig/composite_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigTdnnfLayer
__init__	steps/libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:ChannelAverageLayer
__init__	steps/libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigConvLayer
__init__	steps/libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigRes2Block
__init__	steps/libs/nnet3/xconfig/convolution.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigResBlock
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastGruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastNormOpgruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastNormPgruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastOpgruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastPgruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigGruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigNormOpgruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigNormPgruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigOpgruLayer
__init__	steps/libs/nnet3/xconfig/gru.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigPgruLayer
__init__	steps/libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastLstmLayer
__init__	steps/libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigFastLstmpLayer
__init__	steps/libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigLstmLayer
__init__	steps/libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigLstmbLayer
__init__	steps/libs/nnet3/xconfig/lstm.py	/^    def __init__(self, first_token, key_to_value, prev_names = None):$/;"	m	class:XconfigLstmpLayer
__init__	steps/libs/nnet3/xconfig/stats_layer.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigStatsLayer
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigAffineComponent
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigBatchnormComponent
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigCombineFeatureMapsLayer
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigDeltaLayer
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigDimRangeComponent
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigLinearComponent
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigNoOpComponent
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigPerElementOffsetComponent
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigPerElementScaleComponent
__init__	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def __init__(self, first_token, key_to_value, prev_names=None):$/;"	m	class:XconfigRenormComponent
__init__	steps/libs/nnet3/xconfig/utils.py	/^    def __init__(self,$/;"	m	class:Descriptor
__init__	steps/nnet3/convert_nnet2_to_nnet3.py	/^    def __init__(self):$/;"	m	class:Nnet3Model
__init__	steps/nnet3/report/generate_plots.py	/^    def __init__(self, pdf_file):$/;"	m	class:LatexReport
__init__	steps/segmentation/internal/sad_to_segments.py	/^    def __init__(self):$/;"	m	class:Segmentation
__init__	steps/segmentation/internal/sad_to_segments.py	/^    def __init__(self):$/;"	m	class:SegmenterStats
__init__	steps/tfrnnlm/lstm.py	/^  def __init__(self, config, data, name=None):$/;"	m	class:RnnlmInput
__init__	steps/tfrnnlm/lstm.py	/^  def __init__(self, is_training, config, input_):$/;"	m	class:RnnlmModel
__init__	steps/tfrnnlm/lstm_fast.py	/^  def __init__(self, config, data, name=None):$/;"	m	class:RnnlmInput
__init__	steps/tfrnnlm/lstm_fast.py	/^  def __init__(self, is_training, config, input_):$/;"	m	class:RnnlmModel
__init__	steps/tfrnnlm/vanilla_rnnlm.py	/^  def __init__(self, config, data, name=None):$/;"	m	class:RnnlmInput
__init__	steps/tfrnnlm/vanilla_rnnlm.py	/^  def __init__(self, is_training, config, input_):$/;"	m	class:RnnlmModel
__init__	utils/data/perturb_speed_to_allowed_lengths.py	/^    def __init__(self, uid, wavefile, speaker, transcription, dur):$/;"	m	class:Utterance
__init__	utils/lang/bpe/apply_bpe.py	/^    def __init__(self, codes, merges=-1, separator='@@', vocab=None, glossaries=None):$/;"	m	class:BPE
__init__	utils/lang/internal/arpa2fst_constrained.py	/^    def __init__(self):$/;"	m	class:ArpaModel
__init__	utils/lang/internal/arpa2fst_constrained.py	/^    def __init__(self):$/;"	m	class:HistoryState
__init__	utils/lang/make_kn_lm.py	/^    def __init__(self):$/;"	m	class:CountsForHistory
__init__	utils/lang/make_kn_lm.py	/^    def __init__(self, ngram_order, bos_symbol='<s>', eos_symbol='<\/s>'):$/;"	m	class:NgramCounts
__init__	utils/lang/make_phone_lm.py	/^    def __init__(self):$/;"	m	class:CountsForHistory
__init__	utils/lang/make_phone_lm.py	/^    def __init__(self, ngram_order):$/;"	m	class:NgramCounts
__len__	src/data_reader/v1_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v2_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v3_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v4_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v5_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v6_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v7_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v8_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__len__	src/data_reader/v9_dataset.py	/^    def __len__(self):$/;"	m	class:SpoofDataset	file:
__next__	steps/data/reverberate_data_dir.py	/^    def __next__(self):$/;"	m	class:list_cyclic_iterator	file:
__str__	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def __str__(self):$/;"	m	class:Segment	file:
__str__	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def __str__(self):$/;"	m	class:SegmentStats	file:
__str__	steps/cleanup/internal/tf_idf.py	/^    def __str__(self):$/;"	m	class:TFStats	file:
__str__	steps/libs/nnet3/xconfig/basic_layers.py	/^    def __str__(self):$/;"	m	class:XconfigLayerBase	file:
__str__	steps/libs/nnet3/xconfig/utils.py	/^    def __str__(self):$/;"	m	class:Descriptor	file:
__str__	steps/segmentation/internal/sad_to_segments.py	/^    def __str__(self):$/;"	m	class:SegmenterStats	file:
__str__	utils/lang/make_kn_lm.py	/^    def __str__(self):$/;"	m	class:CountsForHistory	file:
__str__	utils/lang/make_phone_lm.py	/^    def __str__(self):$/;"	m	class:CountsForHistory	file:
_add_components	steps/libs/nnet3/xconfig/attention.py	/^    def _add_components(self, input_desc, input_dim, nonlinearities):$/;"	m	class:XconfigAttentionLayer
_add_components	steps/libs/nnet3/xconfig/basic_layers.py	/^    def _add_components(self, input_desc, input_dim, nonlinearities):$/;"	m	class:XconfigBasicLayer
_build_vocab	steps/tfrnnlm/reader.py	/^def _build_vocab(filename):$/;"	f
_debug_dropout	steps/libs/nnet3/train/dropout_schedule.py	/^_debug_dropout = False$/;"	v
_file_to_word_ids	steps/tfrnnlm/reader.py	/^def _file_to_word_ids(filename, word_to_id):$/;"	f
_generate_bottleneck_resblock_config	steps/libs/nnet3/xconfig/convolution.py	/^    def _generate_bottleneck_resblock_config(self):$/;"	m	class:XconfigRes2Block
_generate_bottleneck_resblock_config	steps/libs/nnet3/xconfig/convolution.py	/^    def _generate_bottleneck_resblock_config(self):$/;"	m	class:XconfigResBlock
_generate_channel_average_config	steps/libs/nnet3/xconfig/convolution.py	/^    def _generate_channel_average_config(self):$/;"	m	class:ChannelAverageLayer
_generate_cnn_config	steps/libs/nnet3/xconfig/convolution.py	/^    def _generate_cnn_config(self):$/;"	m	class:XconfigConvLayer
_generate_config	steps/libs/nnet3/xconfig/attention.py	/^    def _generate_config(self):$/;"	m	class:XconfigAttentionLayer
_generate_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigBasicLayer
_generate_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigIdctLayer
_generate_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigOutputLayer
_generate_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigSpecAugmentLayer
_generate_config	steps/libs/nnet3/xconfig/composite_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigPrefinalLayer
_generate_config	steps/libs/nnet3/xconfig/composite_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigTdnnfLayer
_generate_config	steps/libs/nnet3/xconfig/stats_layer.py	/^    def _generate_config(self):$/;"	m	class:XconfigStatsLayer
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigAffineComponent
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigBatchnormComponent
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigDeltaLayer
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigDimRangeComponent
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigLinearComponent
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigNoOpComponent
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigPerElementOffsetComponent
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigPerElementScaleComponent
_generate_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def _generate_config(self):$/;"	m	class:XconfigRenormComponent
_generate_lstm_config	steps/libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigFastLstmLayer
_generate_lstm_config	steps/libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigFastLstmpLayer
_generate_lstm_config	steps/libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigLstmLayer
_generate_lstm_config	steps/libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigLstmbLayer
_generate_lstm_config	steps/libs/nnet3/xconfig/lstm.py	/^    def _generate_lstm_config(self):$/;"	m	class:XconfigLstmpLayer
_generate_normal_resblock_config	steps/libs/nnet3/xconfig/convolution.py	/^    def _generate_normal_resblock_config(self):$/;"	m	class:XconfigRes2Block
_generate_normal_resblock_config	steps/libs/nnet3/xconfig/convolution.py	/^    def _generate_normal_resblock_config(self):$/;"	m	class:XconfigResBlock
_get_args	steps/cleanup/internal/compute_tf_idf.py	/^def _get_args():$/;"	f
_get_component_dropout	steps/libs/nnet3/train/dropout_schedule.py	/^def _get_component_dropout(dropout_schedule, data_fraction):$/;"	f
_get_dropout_proportions	steps/libs/nnet3/train/dropout_schedule.py	/^def _get_dropout_proportions(dropout_schedule, data_fraction):$/;"	f
_get_flat_feats	src/v1_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:ConvNet
_get_flat_feats	src/v2_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:ConvNet
_get_flat_feats	src/v2_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:ConvRes
_get_flat_feats	src/v2_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:ConvSmall
_get_flat_feats	src/v3_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:network_9layers
_get_flat_feats	src/v3_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:network_9layers_v2
_get_flat_feats	src/v7_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:network_9layers
_get_flat_feats	src/v8_neuro.py	/^    def _get_flat_feats(self, in_size, feats):$/;"	m	class:network_9layers
_get_merged_cluster	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def _get_merged_cluster(self, cluster1, cluster2, rejected_clusters=None,$/;"	m	class:SegmentsMerger
_global_formatter	steps/cleanup/internal/segment_ctm_edits_mild.py	/^_global_formatter = logging.Formatter($/;"	v
_global_handler	steps/cleanup/internal/segment_ctm_edits_mild.py	/^_global_handler = logging.StreamHandler()$/;"	v
_global_logger	steps/cleanup/internal/segment_ctm_edits_mild.py	/^_global_logger = logging.getLogger(__name__)$/;"	v
_global_non_scored_words	steps/cleanup/internal/segment_ctm_edits_mild.py	/^_global_non_scored_words = {}$/;"	v
_isolate_glossaries	utils/lang/bpe/apply_bpe.py	/^    def _isolate_glossaries(self, word):$/;"	m	class:BPE
_parse_dropout_option	steps/libs/nnet3/train/dropout_schedule.py	/^def _parse_dropout_option(dropout_option):$/;"	f
_parse_dropout_string	steps/libs/nnet3/train/dropout_schedule.py	/^def _parse_dropout_string(dropout_str):$/;"	f
_read_compressed_mat	src/data_reader/kaldi_io.py	/^def _read_compressed_mat(fd, format):$/;"	f
_read_mat_ascii	src/data_reader/kaldi_io.py	/^def _read_mat_ascii(fd):$/;"	f
_read_mat_binary	src/data_reader/kaldi_io.py	/^def _read_mat_binary(fd):$/;"	f
_read_words	steps/tfrnnlm/reader.py	/^def _read_words(filename):$/;"	f
_run	steps/cleanup/internal/compute_tf_idf.py	/^def _run(args):$/;"	f
_self_test	steps/libs/nnet3/train/dropout_schedule.py	/^def _self_test():$/;"	f
_weights_init	src/attention_neuro/basic_layers.py	/^        def _weights_init(m):$/;"	f	function:LocalAttenBlock.__init__
_weights_init	src/attention_neuro/basic_layers.py	/^        def _weights_init(m):$/;"	f	function:PlainConvBlock.__init__
_weights_init	src/attention_neuro/complex_attention_network.py	/^        def _weights_init(m):$/;"	f	function:CAttenResNet1.__init__
_weights_init	src/attention_neuro/recurrent_attention.py	/^        def _weights_init(m):$/;"	f	function:BGRU.__init__
_weights_init	src/attention_neuro/recurrent_attention.py	/^        def _weights_init(m):$/;"	f	function:BLSTM.__init__
_weights_init	src/attention_neuro/residual_attention_network.py	/^        def _weights_init(m):$/;"	f	function:ResidualAttentionModel.__init__
_weights_init	src/attention_neuro/simple_attention_network.py	/^        def _weights_init(m):$/;"	f	function:AttenResNet.__init__
_weights_init	src/attention_neuro/simple_attention_network.py	/^        def _weights_init(m):$/;"	f	function:AttenResNet2.__init__
_weights_init	src/attention_neuro/simple_attention_network.py	/^        def _weights_init(m):$/;"	f	function:AttenResNet3.__init__
_weights_init	src/attention_neuro/simple_attention_network.py	/^        def _weights_init(m):$/;"	f	function:AttenResNet4.__init__
_weights_init	src/attention_neuro/simple_attention_network.py	/^        def _weights_init(m):$/;"	f	function:AttenResNet5.__init__
_weights_init	src/attention_neuro/simple_attention_network.py	/^        def _weights_init(m):$/;"	f	function:PreAttenResNet.__init__
_weights_init	src/v1_neuro.py	/^        def _weights_init(m):$/;"	f	function:ConvNet.__init__
_weights_init	src/v2_neuro.py	/^        def _weights_init(m):$/;"	f	function:ConvNet.__init__
_weights_init	src/v2_neuro.py	/^        def _weights_init(m):$/;"	f	function:ConvRes.__init__
_weights_init	src/v2_neuro.py	/^        def _weights_init(m):$/;"	f	function:ConvSmall.__init__
_weights_init	src/v2_neuro.py	/^        def _weights_init(m):$/;"	f	function:ResNet.__init__
_weights_init	src/v2_neuro.py	/^        def _weights_init(m):$/;"	f	function:ResNet2.__init__
_weights_init	src/v3_neuro.py	/^        def _weights_init(m):$/;"	f	function:network_9layers.__init__
_weights_init	src/v4_neuro.py	/^        def _weights_init(m):$/;"	f	function:FConv.__init__
_weights_init	src/v5_neuro.py	/^        def _weights_init(m):$/;"	f	function:FCResNet.__init__
_weights_init	src/v5_neuro.py	/^        def _weights_init(m):$/;"	f	function:ResNet.__init__
_weights_init	src/v5_neuro.py	/^        def _weights_init(m):$/;"	f	function:ResNet2.__init__
_weights_init	src/v5_neuro.py	/^        def _weights_init(m):$/;"	f	function:ResNet3.__init__
_weights_init	src/v5_neuro.py	/^        def _weights_init(m):$/;"	f	function:ResNet4.__init__
_weights_init	src/v6_neuro.py	/^        def _weights_init(m):$/;"	f	function:ResNet.__init__
a	steps/diagnostic/analyze_lattice_depth_stats.py	/^    a = line.split()$/;"	v
a	steps/diagnostic/analyze_phone_length_stats.py	/^    a = line.split()$/;"	v
a	utils/data/internal/choose_utts_to_combine.py	/^    a = line.split()$/;"	v
a	utils/data/internal/modify_speaker_info.py	/^            a = line.split()$/;"	v
a	utils/data/internal/modify_speaker_info.py	/^    a = line.split()$/;"	v
accepted_models	steps/nnet3/get_successful_models.py	/^    accepted_models = []$/;"	v
accumulate	steps/cleanup/internal/tf_idf.py	/^    def accumulate(self, doc, text, ngram_order):$/;"	m	class:TFStats
accumulate	steps/cleanup/internal/tf_idf.py	/^    def accumulate(self, term):$/;"	m	class:IDFStats
accumulate_for_utterance	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def accumulate_for_utterance(self, split_lines_of_utt,$/;"	m	class:WordStats
accumulate_segment_stats	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def accumulate_segment_stats(self, segment_list, text):$/;"	m	class:UtteranceStats
add	steps/segmentation/internal/sad_to_segments.py	/^    def add(self, other):$/;"	m	class:SegmenterStats
add_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^    def add_component(self, component, pairs):$/;"	m	class:Nnet3Model
add_count	utils/lang/make_kn_lm.py	/^    def add_count(self, history, predicted_word, context_word, count):$/;"	m	class:NgramCounts
add_count	utils/lang/make_kn_lm.py	/^    def add_count(self, predicted_word, context_word, count):$/;"	m	class:CountsForHistory
add_figure	steps/nnet3/report/generate_plots.py	/^    def add_figure(self, figure_pdf, title):$/;"	f
add_nnet_context_info	steps/nnet3/xconfig_to_configs.py	/^def add_nnet_context_info(config_dir, nnet_edits=None,$/;"	f
add_point_source_noise	steps/data/reverberate_data_dir.py	/^def add_point_source_noise(noise_addition_descriptor,  # descriptor to store the information of the noise added$/;"	f
add_prefix_to_fields	steps/data/reverberate_data_dir.py	/^def add_prefix_to_fields(input_file, output_file, num_replicas, include_original, prefix, field = [0]):$/;"	f
add_raw_counts_from_file	utils/lang/make_kn_lm.py	/^    def add_raw_counts_from_file(self, filename):$/;"	m	class:NgramCounts
add_raw_counts_from_line	utils/lang/make_kn_lm.py	/^    def add_raw_counts_from_line(self, line):$/;"	m	class:NgramCounts
add_raw_counts_from_standard_input	utils/lang/make_kn_lm.py	/^    def add_raw_counts_from_standard_input(self):$/;"	m	class:NgramCounts
adjust_am_priors	steps/libs/nnet3/train/frame_level_objf/common.py	/^def adjust_am_priors(dir, input_model, avg_posterior_vector, output_model,$/;"	f
align	steps/libs/nnet3/train/frame_level_objf/common.py	/^def align(dir, data, lang, run_opts, iter=None,$/;"	f
all_key	src/data_reader/test_kaldi_io.py	/^all_key = ako.read_all_key(test_scp)$/;"	v
all_phones	steps/chain/gen_topo.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/chain/gen_topo2.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/chain/gen_topo3.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/chain/gen_topo4.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/chain/gen_topo5.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/chain/gen_topo_orig.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/nnet3/chain/gen_topo.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/nnet3/chain/gen_topo2.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/nnet3/chain/gen_topo3.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/nnet3/chain/gen_topo4.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/nnet3/chain/gen_topo5.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
all_phones	steps/nnet3/chain/gen_topo_orig.py	/^all_phones = silence_phones +  nonsilence_phones$/;"	v
almost_equal	steps/data/reverberate_data_dir.py	/^def almost_equal(value_1, value_2, accuracy = 10**-8):$/;"	f
args	steps/chain/e2e/compute_biphone_stats.py	/^args = parser.parse_args()$/;"	v
args	steps/chain/e2e/text_to_phones.py	/^args = parser.parse_args()$/;"	v
args	steps/chain/gen_topo.py	/^args = parser.parse_args()$/;"	v
args	steps/chain/gen_topo2.py	/^args = parser.parse_args()$/;"	v
args	steps/chain/gen_topo3.py	/^args = parser.parse_args()$/;"	v
args	steps/chain/gen_topo4.py	/^args = parser.parse_args()$/;"	v
args	steps/chain/gen_topo5.py	/^args = parser.parse_args()$/;"	v
args	steps/chain/gen_topo_orig.py	/^args = parser.parse_args()$/;"	v
args	steps/cleanup/internal/get_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	steps/cleanup/internal/get_non_scored_words.py	/^args = parser.parse_args()$/;"	v
args	steps/cleanup/internal/make_one_biased_lm.py	/^args = parser.parse_args()$/;"	v
args	steps/cleanup/internal/modify_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	steps/cleanup/internal/segment_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	steps/cleanup/internal/taint_ctm_edits.py	/^args = parser.parse_args()$/;"	v
args	steps/cleanup/make_biased_lms.py	/^args = parser.parse_args()$/;"	v
args	steps/diagnostic/analyze_lattice_depth_stats.py	/^args = parser.parse_args()$/;"	v
args	steps/diagnostic/analyze_phone_length_stats.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/e2e/text_to_phones.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/gen_topo.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/gen_topo2.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/gen_topo3.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/gen_topo4.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/gen_topo5.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/chain/gen_topo_orig.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/dot/nnet3_to_dot.py	/^    args = parser.parse_args()$/;"	v
args	steps/nnet3/get_successful_models.py	/^    args = parser.parse_args()$/;"	v
args	steps/nnet3/make_tdnn_configs.py	/^args = parser.parse_args()$/;"	v
args	steps/nnet3/report/summarize_compute_debug_timing.py	/^    args = GetArgs()$/;"	v
args	steps/segmentation/internal/resample_targets.py	/^    args = parser.parse_args()$/;"	v
args	steps/segmentation/internal/sad_to_segments.py	/^    args = parser.parse_args()$/;"	v
args	utils/data/extend_segment_times.py	/^args = parser.parse_args()$/;"	v
args	utils/data/internal/choose_utts_to_combine.py	/^args = parser.parse_args()$/;"	v
args	utils/data/internal/modify_speaker_info.py	/^args = parser.parse_args()$/;"	v
args	utils/lang/bpe/apply_bpe.py	/^    args = parser.parse_args()$/;"	v
args	utils/lang/bpe/learn_bpe.py	/^    args = parser.parse_args()$/;"	v
args	utils/lang/compute_sentence_probs_arpa.py	/^args = parser.parse_args()$/;"	v
args	utils/lang/internal/arpa2fst_constrained.py	/^args = parser.parse_args()$/;"	v
args	utils/lang/internal/modify_unk_pron.py	/^args = parser.parse_args()$/;"	v
args	utils/lang/limit_arpa_unk_history.py	/^args = parser.parse_args()$/;"	v
args	utils/lang/make_kn_lm.py	/^args = parser.parse_args()$/;"	v
args	utils/lang/make_phone_lm.py	/^args = parser.parse_args()$/;"	v
arpa_model	utils/lang/internal/arpa2fst_constrained.py	/^arpa_model = ArpaModel()$/;"	v
arpaname	utils/reverse_arpa.py	/^arpaname = sys.argv[1]$/;"	v
assert_approx_equal	steps/libs/nnet3/train/dropout_schedule.py	/^    def assert_approx_equal(list1, list2):$/;"	f	function:_self_test
assert_equal	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def assert_equal(self, other):$/;"	m	class:SegmentStats
assign_lr	steps/tfrnnlm/lstm.py	/^  def assign_lr(self, session, lr_value):$/;"	m	class:RnnlmModel
assign_lr	steps/tfrnnlm/lstm_fast.py	/^  def assign_lr(self, session, lr_value):$/;"	m	class:RnnlmModel
assign_lr	steps/tfrnnlm/vanilla_rnnlm.py	/^  def assign_lr(self, session, lr_value):$/;"	m	class:RnnlmModel
atten_activation	feature_plot.py	/^atten_activation = 'sigmoid'$/;"	v
atten_activation	main.py	/^atten_activation = 'sigmoid'$/;"	v
atten_activation	predict_only.py	/^atten_activation = 'sigmoid' $/;"	v
atten_channel	feature_plot.py	/^atten_channel = 16$/;"	v
atten_channel	main.py	/^atten_channel = 16$/;"	v
atten_channel	predict_only.py	/^atten_channel = 16$/;"	v
attention_input_dim	steps/libs/nnet3/xconfig/attention.py	/^    def attention_input_dim(self):$/;"	m	class:XconfigAttentionLayer
attention_output_dim	steps/libs/nnet3/xconfig/attention.py	/^    def attention_output_dim(self):$/;"	m	class:XconfigAttentionLayer
attn_cell	steps/tfrnnlm/lstm.py	/^      def attn_cell():$/;"	f	function:RnnlmModel.__init__.lstm_cell
attn_cell	steps/tfrnnlm/lstm_fast.py	/^      def attn_cell():$/;"	f	function:RnnlmModel.__init__.lstm_cell
attn_cell	steps/tfrnnlm/vanilla_rnnlm.py	/^      def attn_cell():$/;"	f	function:RnnlmModel.__init__.rnn_cell
augment_wav	steps/data/augment_data_dir.py	/^    bg_noise_utts, noise_wavs, noise2dur, interval, num_opts):$/;"	f
auxiliary_outputs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLayerBase
auxiliary_outputs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigOutputLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:ChannelAverageLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigConvLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigRes2Block
auxiliary_outputs	steps/libs/nnet3/xconfig/convolution.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigResBlock
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastNormOpgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastNormPgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastOpgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastPgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigNormOpgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigNormPgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigOpgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/gru.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigPgruLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastLstmLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigFastLstmpLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLstmLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLstmbLayer
auxiliary_outputs	steps/libs/nnet3/xconfig/lstm.py	/^    def auxiliary_outputs(self):$/;"	m	class:XconfigLstmpLayer
avg_len	feat_slicing.py	/^    avg_len = 312$/;"	v
avg_len	src/data_reader/feat_slicing.py	/^    avg_len = 365$/;"	v
back	utils/reverse_arpa.py	/^          back = offset$/;"	v
back	utils/reverse_arpa.py	/^      back = 0.0$/;"	v
back	utils/reverse_arpa.py	/^      back = float(entry[-1])$/;"	v
background_command	steps/libs/common.py	/^def background_command(command, require_zero_status = False):$/;"	f
background_command_waiter	steps/libs/common.py	/^def background_command_waiter(command, popen_object, require_zero_status):$/;"	f
backup_xconfig_file	steps/nnet3/xconfig_to_configs.py	/^def backup_xconfig_file(xconfig_file, config_dir):$/;"	f
backward	src/attention_neuro/basic_layers.py	/^    def backward(ctx, grad_output):$/;"	m	class:L1Penalty
bad_proportion	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def bad_proportion(self):$/;"	m	class:SegmentStats
basename	utils/lang/internal/modify_unk_pron.py	/^basename = os.path.basename(args.lexicon_file)$/;"	v
batch_size	steps/tfrnnlm/lstm.py	/^  batch_size = 64$/;"	v	class:Config
batch_size	steps/tfrnnlm/lstm_fast.py	/^  batch_size = 64$/;"	v	class:Config
batch_size	steps/tfrnnlm/vanilla_rnnlm.py	/^  batch_size = 64$/;"	v	class:Config
best_eer	src/v1_validation.py	/^def best_eer(true_labels, predictions):$/;"	f
best_eer	src/v2_validation.py	/^def best_eer(val_scores, utt2len, utt2label, key_list):$/;"	f
bigrams_map	utils/lang/internal/arpa2fst_constrained.py	/^bigrams_map = ReadBigramMap(args.allowed_bigrams_in)$/;"	v
biphone_counts	steps/chain/e2e/compute_biphone_stats.py	/^biphone_counts = {}$/;"	v
biphone_counts	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^biphone_counts = {}$/;"	v
boundary_to_text	steps/diagnostic/analyze_phone_length_stats.py	/^boundary_to_text = { }$/;"	v
bounds	src/v1_validation.py	/^    def bounds(**kwargs):$/;"	f	function:best_eer
bounds	src/v2_validation.py	/^    def bounds(**kwargs):$/;"	f	function:best_eer
bpe	utils/lang/bpe/apply_bpe.py	/^    bpe = BPE(args.codes, args.merges, args.separator, vocabulary, args.glossaries)$/;"	v
cal_bow	utils/lang/make_kn_lm.py	/^    def cal_bow(self):$/;"	m	class:NgramCounts
cal_discounting_constants	utils/lang/make_kn_lm.py	/^    def cal_discounting_constants(self):$/;"	m	class:NgramCounts
cal_f	utils/lang/make_kn_lm.py	/^    def cal_f(self):$/;"	m	class:NgramCounts
calculate_len	feat_slicing.py	/^def calculate_len(train_scp, dev_scp, eval_scp):$/;"	f
calculate_len	src/data_reader/feat_slicing.py	/^def calculate_len(train_scp, dev_scp, eval_scp):$/;"	f
cat	steps/conf/prepare_word_categories.py	/^  cat = 0 $/;"	v
caught_signal	utils/parallel/queue.pl	/^sub caught_signal {$/;"	s
caught_signal	utils/queue.pl	/^sub caught_signal {$/;"	s
chan	steps/conf/append_prf_to_ctm.py	/^      chan = l.split()[1]$/;"	v
check_allowed_whitespace	utils/lang/validate_lang.pl	/^sub check_allowed_whitespace {$/;"	s
check_allowed_whitespace	utils/validate_dict_dir.pl	/^sub check_allowed_whitespace {$/;"	s
check_allowed_whitespace	utils/validate_lang.pl	/^sub check_allowed_whitespace {$/;"	s
check_allowed_whitespace	utils/validate_text.pl	/^sub check_allowed_whitespace {$/;"	s
check_args	steps/data/augment_data_dir.py	/^def check_args(args):$/;"	f
check_args	steps/data/make_musan.py	/^def check_args(args):$/;"	f
check_args	steps/data/reverberate_data_dir.py	/^def check_args(args):$/;"	f
check_args	steps/nnet3/xconfig_to_configs.py	/^def check_args(args):$/;"	f
check_args	utils/lang/compute_sentence_probs_arpa.py	/^def check_args(args):$/;"	f
check_configs	steps/libs/nnet3/xconfig/attention.py	/^    def check_configs(self):$/;"	m	class:XconfigAttentionLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigAffineLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigBasicLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigExistingLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigFixedAffineLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigIdctLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigInputLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigLayerBase
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigOutputLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigSpecAugmentLayer
check_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigTrivialOutputLayer
check_configs	steps/libs/nnet3/xconfig/composite_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigPrefinalLayer
check_configs	steps/libs/nnet3/xconfig/composite_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigTdnnfLayer
check_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:ChannelAverageLayer
check_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:XconfigConvLayer
check_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:XconfigRes2Block
check_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def check_configs(self):$/;"	m	class:XconfigResBlock
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastGruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastNormOpgruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastNormPgruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastOpgruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigFastPgruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigGruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigNormOpgruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigNormPgruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigOpgruLayer
check_configs	steps/libs/nnet3/xconfig/gru.py	/^    def check_configs(self):$/;"	m	class:XconfigPgruLayer
check_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigFastLstmLayer
check_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigFastLstmpLayer
check_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigLstmLayer
check_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigLstmbLayer
check_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def check_configs(self):$/;"	m	class:XconfigLstmpLayer
check_configs	steps/libs/nnet3/xconfig/stats_layer.py	/^    def check_configs(self):$/;"	m	class:XconfigStatsLayer
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigAffineComponent
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigBatchnormComponent
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigDeltaLayer
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigDimRangeComponent
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigLinearComponent
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigNoOpComponent
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigPerElementOffsetComponent
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigPerElementScaleComponent
check_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def check_configs(self):$/;"	m	class:XconfigRenormComponent
check_disjoint	utils/lang/validate_lang.pl	/^sub check_disjoint {$/;"	s
check_disjoint	utils/validate_lang.pl	/^sub check_disjoint {$/;"	s
check_for_newline	steps/nnet3/report/convert_model.py	/^def check_for_newline(s, pos):$/;"	f
check_for_required_files	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def check_for_required_files(feat_dir, tree_dir, lat_dir=None):$/;"	f
check_if_cuda_compiled	steps/libs/common.py	/^def check_if_cuda_compiled():$/;"	f
check_lexicon	utils/validate_dict_dir.pl	/^sub check_lexicon {$/;"	s
check_lexicon_pair	utils/validate_dict_dir.pl	/^sub check_lexicon_pair {$/;"	s
check_model_contexts	steps/nnet3/xconfig_to_configs.py	/^def check_model_contexts(config_dir, nnet_edits=None, existing_model=None):$/;"	f
check_number	utils/lang/compute_sentence_probs_arpa.py	/^def check_number(model_file, tot_num):$/;"	f
check_offsets_var	steps/libs/nnet3/xconfig/convolution.py	/^    def check_offsets_var(self, str):$/;"	m	class:XconfigConvLayer
check_sorted	utils/data/fix_data_dir.sh	/^function check_sorted {$/;"	f
check_sorted	utils/fix_data_dir.sh	/^function check_sorted {$/;"	f
check_sorted_and_uniq	steps/segmentation/validate_targets_dir.sh	/^function check_sorted_and_uniq {$/;"	f
check_sorted_and_uniq	utils/data/validate_data_dir.sh	/^function check_sorted_and_uniq {$/;"	f
check_sorted_and_uniq	utils/validate_data_dir.sh	/^function check_sorted_and_uniq {$/;"	f
check_summation	utils/lang/validate_lang.pl	/^sub check_summation {$/;"	s
check_summation	utils/validate_lang.pl	/^sub check_summation {$/;"	s
check_txt_int	utils/lang/validate_lang.pl	/^sub check_txt_int {$/;"	s
check_txt_int	utils/validate_lang.pl	/^sub check_txt_int {$/;"	s
check_txt_int_csl	utils/lang/validate_lang.pl	/^sub check_txt_int_csl {$/;"	s
check_txt_int_csl	utils/validate_lang.pl	/^sub check_txt_int_csl {$/;"	s
check_vocab_and_split	utils/lang/bpe/apply_bpe.py	/^def check_vocab_and_split(orig, bpe_codes, vocab, separator):$/;"	f
choices	steps/cleanup/internal/make_one_biased_lm.py	/^                    choices = [2,3,4,5,6,7],$/;"	v
choices	steps/cleanup/internal/modify_ctm_edits.py	/^                    choices=['true','false'],$/;"	v
choices	steps/cleanup/internal/modify_ctm_edits.py	/^                    choices=[0,1,2,3],$/;"	v
choices	steps/cleanup/internal/taint_ctm_edits.py	/^                    choices=["true", "false"],$/;"	v
choices	steps/cleanup/internal/taint_ctm_edits.py	/^                    choices=[0,1,2,3],$/;"	v
choices	utils/data/internal/modify_speaker_info.py	/^                    choices = ['true', 'false'],$/;"	v
choices	utils/lang/make_phone_lm.py	/^                    choices = ["true", "false"],$/;"	v
choices	utils/lang/make_phone_lm.py	/^                    choices = [1,2,3,4,5],$/;"	v
choices	utils/lang/make_phone_lm.py	/^                    choices = [2,3,4,5,6,7],$/;"	v
choose_best_ctm_lines	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def choose_best_ctm_lines(first_lines, second_lines,$/;"	f
cjustify	utils/scoring/wer_per_utt_details.pl	/^sub cjustify {$/;"	s
clean_nnet_dir	steps/libs/nnet3/train/common.py	/^def clean_nnet_dir(nnet_dir, num_iters, egs_dir,$/;"	f
cleanup	src/data_reader/kaldi_io.py	/^    def cleanup(proc, cmd):$/;"	f	function:popen
cleanup	steps/combine_ali_dirs.sh	/^cleanup() { rm -rf "$temp_dir"; }$/;"	f
cleanup	steps/combine_lat_dirs.sh	/^cleanup() { rm -rf "$temp_dir"; }$/;"	f
cleanup	steps/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	steps/make_denlats_sgmm2.sh	/^cleanup() {$/;"	f
cleanup	steps/nnet/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	steps/nnet2/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	steps/nnet3/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	steps/online/nnet2/make_denlats.sh	/^cleanup() {$/;"	f
cleanup	steps/tandem/make_denlats.sh	/^cleanup() {$/;"	f
close	steps/nnet3/report/generate_plots.py	/^    def close(self):$/;"	f
cngrams	utils/reverse_arpa.py	/^cngrams=[]$/;"	v
combine	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def combine(self, other, scale=1):$/;"	m	class:SegmentStats
combine_models	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def combine_models(dir, num_iters, models_to_combine, num_chunk_per_minibatch_str,$/;"	f
combine_models	steps/libs/nnet3/train/frame_level_objf/common.py	/^def combine_models(dir, num_iters, models_to_combine, egs_dir,$/;"	f
combine_ranges	utils/data/normalize_data_range.pl	/^sub combine_ranges {$/;"	s
compare	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def compare(self, other):$/;"	m	class:SegmentStats
compile	steps/nnet3/report/generate_plots.py	/^    def compile(self):$/;"	f
component_attributes	steps/nnet3/dot/nnet3_to_dot.py	/^        component_attributes = args.component_attributes.split(',')$/;"	v
component_attributes	steps/nnet3/dot/nnet3_to_dot.py	/^    component_attributes = None$/;"	v
compute_average_posterior	steps/libs/nnet3/train/frame_level_objf/common.py	/^def compute_average_posterior(dir, iter, egs_dir, num_archives,$/;"	f
compute_begin_prob	utils/lang/compute_sentence_probs_arpa.py	/^def compute_begin_prob(sub_list):$/;"	f
compute_confuse	src/v1_metrics.py	/^def compute_confuse(y_true, y_pred):$/;"	f
compute_derived_quantities	steps/nnet3/report/convert_model.py	/^def compute_derived_quantities(model):$/;"	f
compute_eer	src/v1_metrics.py	/^def compute_eer(y_true, y_pred):$/;"	f
compute_idct_matrix	steps/libs/common.py	/^def compute_idct_matrix(K, N, cepstral_lifter=0):$/;"	f
compute_lifter_coeffs	steps/libs/common.py	/^def compute_lifter_coeffs(lifter, dim):$/;"	f
compute_loss	src/v1_validation.py	/^def compute_loss(model, device, data_loader, threshold=0.5):$/;"	f
compute_loss	src/v2_validation.py	/^def compute_loss(model, device, data_loader, threshold=0.5):$/;"	f
compute_loss	src/v3_validation.py	/^def compute_loss(model, device, data_loader):$/;"	f
compute_loss	src/v4_validation.py	/^def compute_loss(model, device, data_loader, rnn):$/;"	f
compute_loss	src/v7_validation.py	/^def compute_loss(model, device, data_loader):$/;"	f
compute_loss	src/v8_validation.py	/^def compute_loss(model, device, data_loader):$/;"	f
compute_preconditioning_matrix	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def compute_preconditioning_matrix(dir, egs_dir, num_lda_jobs, run_opts,$/;"	f
compute_preconditioning_matrix	steps/libs/nnet3/train/frame_level_objf/common.py	/^def compute_preconditioning_matrix(dir, egs_dir, num_lda_jobs, run_opts,$/;"	f
compute_presoftmax_prior_scale	steps/libs/nnet3/train/common.py	/^def compute_presoftmax_prior_scale(dir, alidir, num_jobs, run_opts,$/;"	f
compute_progress	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def compute_progress(dir, iter, run_opts):$/;"	f
compute_progress	steps/libs/nnet3/train/frame_level_objf/common.py	/^def compute_progress(dir, iter, egs_dir,$/;"	f
compute_progress	steps/nnet3/report/convert_model.py	/^def compute_progress(model1, model2):$/;"	f
compute_segment_cores	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def compute_segment_cores(split_lines_of_utt):$/;"	f
compute_sentence_prob	utils/lang/compute_sentence_probs_arpa.py	/^def compute_sentence_prob(sentence, ngram_order):$/;"	f
compute_similarity_scores	steps/cleanup/internal/tf_idf.py	/^    def compute_similarity_scores(self, source_tfidf, source_docs=None,$/;"	m	class:TFIDF
compute_stats	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def compute_stats(self):$/;"	m	class:Segment
compute_sublist_prob	utils/lang/compute_sentence_probs_arpa.py	/^def compute_sublist_prob(sub_list):$/;"	f
compute_term_stats	steps/cleanup/internal/tf_idf.py	/^    def compute_term_stats(self, idf_stats=None):$/;"	m	class:TFStats
compute_train_cv_probabilities	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def compute_train_cv_probabilities(dir, iter, egs_dir, l2_regularize,$/;"	f
compute_train_cv_probabilities	steps/libs/nnet3/train/frame_level_objf/common.py	/^def compute_train_cv_probabilities(dir, iter, egs_dir, run_opts,$/;"	f
compute_utt_eer	src/v1_prediction.py	/^def compute_utt_eer(scores, scp, utt2label, threshold):$/;"	f
config_string	steps/libs/nnet3/xconfig/utils.py	/^    def config_string(self, layer_to_string):$/;"	m	class:Descriptor
config_to_layer	steps/libs/nnet3/xconfig/parser.py	/^config_to_layer = {$/;"	v
consume_token	steps/nnet3/convert_nnet2_to_nnet3.py	/^def consume_token(token, line):$/;"	f
contain_disambig_symbol	utils/lang/make_subword_lexicon_fst.py	/^def contain_disambig_symbol(phones):$/;"	f
contains_atleast_one_scored_non_oov_word	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def contains_atleast_one_scored_non_oov_word(self):$/;"	m	class:Segment
convert_to_descriptor	steps/libs/nnet3/xconfig/basic_layers.py	/^    def convert_to_descriptor(self, descriptor_string, all_layers):$/;"	m	class:XconfigLayerBase
convert_value_to_type	steps/libs/nnet3/xconfig/utils.py	/^def convert_value_to_type(key, dest_type, string_value):$/;"	f
convolution_proto	utils/nnet/make_cnn_proto.py	/^convolution_proto = ''  $/;"	v
copy	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def copy(self, copy_stats=True):$/;"	m	class:Segment
copy_egs_properties_to_exp_dir	steps/libs/nnet3/train/common.py	/^def copy_egs_properties_to_exp_dir(egs_dir, dir):$/;"	f
copy_file_if_exists	steps/data/augment_data_dir.py	/^def copy_file_if_exists(input_file, output_file, utt_modifier_type,$/;"	f
cost	steps/tfrnnlm/lstm.py	/^  def cost(self):$/;"	m	class:RnnlmModel
cost	steps/tfrnnlm/lstm_fast.py	/^  def cost(self):$/;"	m	class:RnnlmModel
cost	steps/tfrnnlm/vanilla_rnnlm.py	/^  def cost(self):$/;"	m	class:RnnlmModel
count	steps/chain/e2e/compute_biphone_stats.py	/^        count = biphone_counts[shared_pair] if shared_pair in biphone_counts else 0$/;"	v
count	steps/chain/e2e/compute_biphone_stats.py	/^    count = mono_counts[shared] if shared in mono_counts else 0$/;"	v
count	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^        count = biphone_counts[shared_pair] if shared_pair in biphone_counts else 0$/;"	v
count	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^    count = mono_counts[shared] if shared in mono_counts else 0$/;"	v
counts	utils/reverse_arpa.py	/^  counts = int(ind[1].strip())$/;"	v
cqt	CQCC_v1.0/CQT_toolbox_2013/cqt.m	/^function Xcq = cqt(x, B, fs, fmin, fmax, varargin)$/;"	f
cqtCell2Sparse	CQCC_v1.0/CQT_toolbox_2013/cqtCell2Sparse.m	/^function cSparse = cqtCell2Sparse(c,M)$/;"	f
cqtFillSparse	CQCC_v1.0/CQT_toolbox_2013/cqtFillSparse.m	/^function c = cqtFillSparse(c,M,B)$/;"	f
cqtSparse2Cell	CQCC_v1.0/CQT_toolbox_2013/cqtSparse2Cell.m	/^function cCell = cqtSparse2Cell(cSparse,M,cDC,cNyq)$/;"	f
create_augmented_utt2uniq	steps/data/augment_data_dir.py	/^def create_augmented_utt2uniq(input_dir, output_dir,$/;"	f
create_config_files	steps/nnet2/make_multisplice_configs.py	/^def create_config_files(output_dir, params):$/;"	f
create_corrupted_utt2uniq	steps/data/reverberate_data_dir.py	/^def create_corrupted_utt2uniq(input_dir, output_dir, num_replicas, include_original, prefix):$/;"	f
create_denominator_fst	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def create_denominator_fst(dir, tree_dir, run_opts):$/;"	f
create_parser	utils/lang/bpe/apply_bpe.py	/^def create_parser():$/;"	f
create_parser	utils/lang/bpe/learn_bpe.py	/^def create_parser():$/;"	f
create_phone_lm	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def create_phone_lm(dir, tree_dir, run_opts, lm_opts=None):$/;"	f
create_reverberated_copy	steps/data/reverberate_data_dir.py	/^def create_reverberated_copy(input_dir,$/;"	f
csid	steps/conf/append_eval_to_ctm.py	/^    csid = f.readline()$/;"	v
ctm	steps/conf/append_eval_to_ctm.py	/^ctm = dict()$/;"	v
ctm	steps/conf/append_prf_to_ctm.py	/^  ctm = [ l.split() for l in f ]$/;"	v
ctm	steps/conf/prepare_calibration_data.py	/^ctm = [ l.split() for l in open(ctm_file) ]$/;"	v
ctm_edit_line_to_string	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def ctm_edit_line_to_string(line):$/;"	f
ctm_eval	steps/conf/append_eval_to_ctm.py	/^ctm_eval = []$/;"	v
ctm_line_to_string	steps/cleanup/internal/align_ctm_ref.py	/^def ctm_line_to_string(ctm_line):$/;"	f
ctm_line_to_string	utils/ctm/resolve_ctm_overlaps.py	/^def ctm_line_to_string(line):$/;"	f
ctm_out	steps/conf/append_prf_to_ctm.py	/^ctm_out = []$/;"	v
ctm_wrd	steps/conf/append_eval_to_ctm.py	/^      ctm_wrd = merged[j][-4]$/;"	v
cur_dim	steps/nnet3/make_tdnn_configs.py	/^    cur_dim = (nonlin_output_dim * len(splice_array[l-1]) if l > 1 else input_dim)$/;"	v
cur_input	steps/nnet3/make_tdnn_configs.py	/^        cur_input='Append({0})'.format(', '.join(splices))$/;"	v
cur_input	steps/nnet3/make_tdnn_configs.py	/^        cur_input='lda'$/;"	v
curr_wd	feat_slicing.py	/^    curr_wd = os.getcwd()$/;"	v
curr_wd	src/data_reader/feat_plot.py	/^    curr_wd = os.getcwd()$/;"	v
curr_wd	src/data_reader/feat_slicing.py	/^    curr_wd = os.getcwd()$/;"	v
damper	steps/conf/prepare_calibration_data.py	/^    damper = 0.001 # avoid -inf,+inf from log,$/;"	v
data_lib	steps/data/augment_data_dir.py	/^data_lib = imp.load_source('dml', 'steps\/data\/data_dir_manipulation_lib.py')$/;"	v
data_lib	steps/data/reverberate_data_dir.py	/^data_lib = imp.load_source('dml', 'steps\/data\/data_dir_manipulation_lib.py')$/;"	v
data_type	steps/tfrnnlm/lstm.py	/^def data_type():$/;"	f
data_type	steps/tfrnnlm/lstm_fast.py	/^def data_type():$/;"	f
data_type	steps/tfrnnlm/vanilla_rnnlm.py	/^def data_type():$/;"	f
data_wd	feat_slicing.py	/^    data_wd = 'data\/'$/;"	v
data_wd	src/data_reader/feat_plot.py	/^    data_wd = 'spec\/'$/;"	v
data_wd	src/data_reader/feat_slicing.py	/^    data_wd = 'cqcc\/'$/;"	v
dct_basis	utils/nnet/gen_dct_mat.py	/^dct_basis=int(options.dct_basis)$/;"	v
debug_info	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def debug_info(self, include_stats=True):$/;"	m	class:Segment
default	steps/chain/e2e/compute_biphone_stats.py	/^                    default='true',$/;"	v
default	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^                    default='true',$/;"	v
default	steps/nnet3/get_successful_models.py	/^                        default=1.0)$/;"	v
default	steps/nnet3/make_tdnn_configs.py	/^                    default=1.0)$/;"	v
default_encoding	utils/lang/make_kn_lm.py	/^default_encoding = "latin-1"  # For encoding-agnostic scripts, we assume byte stream as input.$/;"	v
depth_mean	steps/diagnostic/analyze_lattice_depth_stats.py	/^    depth_mean = GetMean(depths)$/;"	v
depth_percentile_10	steps/diagnostic/analyze_lattice_depth_stats.py	/^    depth_percentile_10 = GetPercentile(depths, 0.1)$/;"	v
depth_percentile_50	steps/diagnostic/analyze_lattice_depth_stats.py	/^    depth_percentile_50 = GetPercentile(depths, 0.5)$/;"	v
depth_percentile_90	steps/diagnostic/analyze_lattice_depth_stats.py	/^    depth_percentile_90 = GetPercentile(depths, 0.9)$/;"	v
depth_slice	steps/conf/prepare_calibration_data.py	/^      depth_slice = depths[utt][int(round(100.0*float(beg))):int(round(100.0*(float(beg)+float(dur))))]$/;"	v
depths	steps/conf/prepare_calibration_data.py	/^  depths = dict()$/;"	v
description	steps/cleanup/internal/get_ctm_edits.py	/^    description = "Append to the CTM the Levenshtein alignment of 'hypothesis' and 'reference'; "$/;"	v
description	steps/cleanup/internal/get_non_scored_words.py	/^    description = "This program works out a reasonable guess at a list of "$/;"	v
description	steps/cleanup/internal/modify_ctm_edits.py	/^    description = "This program modifies the reference in the ctm-edits which "$/;"	v
description	steps/cleanup/internal/segment_ctm_edits.py	/^    description = "This program produces segmentation and text information "$/;"	v
description	steps/cleanup/internal/taint_ctm_edits.py	/^    description = "This program modifies the ctm-edits format to identify "$/;"	v
determine_text_direction	utils/lang/bpe/bidi.py	/^def determine_text_direction(text):$/;"	f
dev_utt2label	src/data_reader/test_data_loader.py	/^dev_utt2label  = ako.read_key_label(validation_utt2label)$/;"	v
diagnostics_are_finished_on_iter	steps/info/chain_dir_info.pl	/^sub diagnostics_are_finished_on_iter {$/;"	s
diagnostics_are_finished_on_iter	steps/info/nnet2_dir_info.pl	/^sub diagnostics_are_finished_on_iter {$/;"	s
diagnostics_are_finished_on_iter	steps/info/nnet3_dir_info.pl	/^sub diagnostics_are_finished_on_iter {$/;"	s
dim	steps/libs/nnet3/xconfig/utils.py	/^    def dim(self, layer_to_dim):$/;"	m	class:Descriptor
dim	utils/nnet/gen_dct_mat.py	/^dim=int(options.dim)$/;"	v
dim	utils/nnet/gen_hamm_mat.py	/^dim=int(options.dim)$/;"	v
dim_in	utils/nnet/gen_splice.py	/^dim_in=int(options.dim_in)$/;"	v
dim_mat	utils/nnet/gen_hamm_mat.py	/^dim_mat=(2*splice+1)*dim$/;"	v
dim_out	utils/nnet/gen_splice.py	/^dim_out=(2*splice+1)*dim_in$/;"	v
do_combine	steps/combine_ali_dirs.sh	/^do_combine() {$/;"	f
do_combine	steps/combine_lat_dirs.sh	/^do_combine() {$/;"	f
dot_graph	steps/nnet3/dot/nnet3_to_dot.py	/^    dot_graph = ParseConfigLines(lines, component_attributes = component_attributes, node_prefixes = node_prefixes)$/;"	v
dotfile_handle	steps/nnet3/dot/nnet3_to_dot.py	/^    dotfile_handle = open(args.dotfile, "w")$/;"	v
dur	utils/data/internal/choose_utts_to_combine.py	/^        dur = float(dur)$/;"	v
duration	utils/data/internal/choose_utts_to_combine.py	/^            duration = sum([ utt2dur[utt] for utt in utt_groups[i]])$/;"	v
duration_mean	steps/diagnostic/analyze_phone_length_stats.py	/^        duration_mean = GetMean(lengths)$/;"	v
duration_mean	steps/diagnostic/analyze_phone_length_stats.py	/^    duration_mean = GetMean(internal_opt_sil_phone_lengths)$/;"	v
duration_median	steps/diagnostic/analyze_phone_length_stats.py	/^        duration_median = GetPercentile(lengths, 0.5)$/;"	v
duration_median	steps/diagnostic/analyze_phone_length_stats.py	/^    duration_median = GetPercentile(internal_opt_sil_phone_lengths, 0.5)$/;"	v
duration_percentile_95	steps/diagnostic/analyze_phone_length_stats.py	/^        duration_percentile_95 = GetPercentile(lengths, 0.95)$/;"	v
duration_percentile_95	steps/diagnostic/analyze_phone_length_stats.py	/^    duration_percentile_95 = GetPercentile(internal_opt_sil_phone_lengths, 0.95)$/;"	v
encode	utils/lang/bpe/apply_bpe.py	/^def encode(orig, bpe_codes, bpe_codes_reverse, vocab, separator, version, cache, glossaries=None):$/;"	f
end_identifier	steps/nnet3/dot/descriptor_parser.py	/^end_identifier = ")"$/;"	v
end_padding	utils/data/extend_segment_times.py	/^    end_padding = args.end_padding$/;"	v
end_time	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def end_time(self):$/;"	m	class:Segment
end_time	utils/data/extend_segment_times.py	/^        end_time = float(end_time)$/;"	v
entries	utils/data/extend_segment_times.py	/^entries = []$/;"	v
entry	utils/reverse_arpa.py	/^    entry = text.split()$/;"	v
epilog	steps/chain/gen_topo.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/chain/gen_topo2.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/chain/gen_topo3.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/chain/gen_topo4.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/chain/gen_topo5.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/chain/gen_topo_orig.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/nnet3/chain/gen_topo.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/nnet3/chain/gen_topo2.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/nnet3/chain/gen_topo3.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/nnet3/chain/gen_topo4.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/nnet3/chain/gen_topo5.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/nnet3/chain/gen_topo_orig.py	/^                                 epilog="See egs\/swbd\/s5c\/local\/chain\/train_tdnn_a.sh for example of usage.");$/;"	v
epilog	steps/nnet3/dot/nnet3_to_dot.py	/^                                    epilog="See steps\/nnet3\/nnet3_to_dot.sh for example.");$/;"	v
epilog	steps/nnet3/get_successful_models.py	/^                                     epilog="See steps\/nnet3\/lstm\/train.sh for example.")$/;"	v
epilog	steps/nnet3/make_tdnn_configs.py	/^                                 epilog="See steps\/nnet3\/train_tdnn.sh for example.");$/;"	v
epilog	utils/lang/make_phone_lm.py	/^                                 epilog="See also utils\/lang\/make_phone_bigram_lang.sh")$/;"	v
eval_utt2label	src/data_reader/test_data_loader.py	/^eval_utt2label = ako.read_key_label(evaluation_utt2label)$/;"	v
eval_vec	steps/conf/append_eval_to_ctm.py	/^eval_vec = dict()$/;"	v
evaluation_generator	src/data_reader/test_data_loader.py	/^evaluation_generator = data.DataLoader(evaluation_set, **params)$/;"	v
evaluation_scp	src/data_reader/test_data_loader.py	/^evaluation_scp = '\/export\/b19\/jlai\/cstr\/spoof\/model\/src\/data_reader\/spec\/eval_spec_cmvn_tensor.scp'$/;"	v
evaluation_utt2label	src/data_reader/test_data_loader.py	/^evaluation_utt2label = '\/export\/b19\/jlai\/cstr\/spoof\/model\/src\/data_reader\/spec\/utt2label\/eval_utt2label'$/;"	v
evl	steps/conf/append_prf_to_ctm.py	/^      evl = l$/;"	v
exec_command	utils/parallel/slurm.pl	/^sub exec_command {$/;"	s
exec_command	utils/slurm.pl	/^sub exec_command {$/;"	s
execute_command	steps/libs/common.py	/^def execute_command(command):$/;"	f
expect_token	steps/libs/nnet3/xconfig/utils.py	/^def expect_token(expected_item, seen_item, what_parsing):$/;"	f
extra	steps/nnet3/report/generate_plots.py	/^    extra = Rectangle((0, 0), 1, 1, facecolor="w", fill=False, edgecolor='none', linewidth=0)$/;"	v
f	steps/diagnostic/analyze_lattice_depth_stats.py	/^    f = open(args.lang + "\/phones.txt", "r");$/;"	v
f	steps/diagnostic/analyze_lattice_depth_stats.py	/^    f = open(filename, "r")$/;"	v
f	steps/diagnostic/analyze_phone_length_stats.py	/^    f = open(args.lang + "\/phones.txt", "r");$/;"	v
f	steps/diagnostic/analyze_phone_length_stats.py	/^    f = open(args.lang + "\/phones\/optional_silence.int", "r")$/;"	v
f	steps/diagnostic/analyze_phone_length_stats.py	/^    f = open(filename, "r")$/;"	v
f	steps/nnet3/make_tdnn_configs.py	/^    f = open(args.config_dir + "\/layer{0}.config".format(l), "w")$/;"	v
f	steps/nnet3/make_tdnn_configs.py	/^f = open(args.config_dir + "\/init.config", "w")$/;"	v
f	steps/nnet3/make_tdnn_configs.py	/^f = open(args.config_dir + "\/vars", "w")$/;"	v
f	steps/nnet3/report/convert_model.py	/^         f = open(sys.argv[2], "wb")$/;"	v
f	utils/data/internal/choose_utts_to_combine.py	/^    f = open(args.spk2utt_in)$/;"	v
f	utils/data/internal/choose_utts_to_combine.py	/^    f = open(args.utt2dur_in)$/;"	v
f	utils/data/internal/modify_speaker_info.py	/^        f = open(args.utt2dur)$/;"	v
f_conv	utils/nnet/make_cnn_proto.py	/^  f_conv = open('%s\/nnet.proto.convolution' % o.protodir, 'w')$/;"	v
f_neg	src/v1_validation.py	/^    def f_neg(threshold):$/;"	f	function:best_eer
f_neg	src/v2_validation.py	/^    def f_neg(threshold):$/;"	f	function:best_eer
f_pitch	utils/nnet/make_cnn_proto.py	/^  f_pitch = open('%s\/nnet.proto.pitch' % o.protodir, 'w')$/;"	v
feat_dim	feature_plot.py	/^feat_dim = 257$/;"	v
feat_dim	main.py	/^feat_dim = 257$/;"	v
feat_dim	predict_only.py	/^feat_dim = 257$/;"	v
feat_dim	utils/nnet/make_cnn_proto.py	/^feat_dim = int(args[0]);$/;"	v
feat_raw_dim	utils/nnet/make_cnn_proto.py	/^feat_raw_dim = feat_dim \/ (o.delta_order+1) \/ (o.splice*2+1) - o.pitch_dim # we need number of feats without deltas and splice and pitch$/;"	v
feats	steps/conf/prepare_calibration_data.py	/^    feats = [ logit, log_word_length, other_feats[wrd_id] ] + wrd_1_of_k$/;"	v
file	steps/chain/e2e/compute_biphone_stats.py	/^      file=sys.stderr)$/;"	v
file	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^      file=sys.stderr)$/;"	v
file	steps/nnet3/make_tdnn_configs.py	/^                  file=f)$/;"	v
file	steps/nnet3/make_tdnn_configs.py	/^              file=f)$/;"	v
file	utils/data/extend_segment_times.py	/^              file = sys.stderr)$/;"	v
file	utils/data/extend_segment_times.py	/^      file = sys.stderr)$/;"	v
file	utils/reverse_arpa.py	/^  file = codecs.open(arpaname, "r", "utf-8")$/;"	v
file_id	steps/conf/append_prf_to_ctm.py	/^      file_id = l.split()[1]$/;"	v
filename	steps/diagnostic/analyze_lattice_depth_stats.py	/^    filename = "{0}\/phones\/silence.csl".format(args.lang)$/;"	v
filename	steps/diagnostic/analyze_phone_length_stats.py	/^    filename = "{0}\/phones\/silence.csl".format(args.lang)$/;"	v
fill_nonlin_stats_table_with_regex_result	steps/libs/nnet3/report/log_parse.py	/^def fill_nonlin_stats_table_with_regex_result(groups, gate_index, stats_table):$/;"	f
filter_file	utils/data/fix_data_dir.sh	/^function filter_file {$/;"	f
filter_file	utils/fix_data_dir.sh	/^function filter_file {$/;"	f
filter_recordings	utils/data/fix_data_dir.sh	/^function filter_recordings {$/;"	f
filter_recordings	utils/fix_data_dir.sh	/^function filter_recordings {$/;"	f
filter_short_segments	steps/segmentation/internal/sad_to_segments.py	/^    def filter_short_segments(self, min_dur):$/;"	m	class:Segmentation
filter_speakers	utils/data/fix_data_dir.sh	/^function filter_speakers {$/;"	f
filter_speakers	utils/fix_data_dir.sh	/^function filter_speakers {$/;"	f
filter_utts	utils/data/fix_data_dir.sh	/^function filter_utts {$/;"	f
filter_utts	utils/fix_data_dir.sh	/^function filter_utts {$/;"	f
final_state	steps/tfrnnlm/lstm.py	/^  def final_state(self):$/;"	m	class:RnnlmModel
final_state	steps/tfrnnlm/lstm_fast.py	/^  def final_state(self):$/;"	m	class:RnnlmModel
final_state	steps/tfrnnlm/vanilla_rnnlm.py	/^  def final_state(self):$/;"	m	class:RnnlmModel
find_allowed_durations	utils/data/perturb_speed_to_allowed_lengths.py	/^def find_allowed_durations(start_dur, end_dur, args):$/;"	f
find_and_replace_unks	utils/lang/limit_arpa_unk_history.py	/^def find_and_replace_unks(old_lm_lines, max_ngrams, skip_rows):$/;"	f
find_duration_range	utils/data/perturb_speed_to_allowed_lengths.py	/^def find_duration_range(utterances, coverage_factor):$/;"	f
finished_training	steps/info/chain_dir_info.pl	/^sub finished_training {$/;"	s
finished_training	steps/info/nnet2_dir_info.pl	/^sub finished_training {$/;"	s
finished_training	steps/info/nnet3_dir_info.pl	/^sub finished_training {$/;"	s
flags	steps/tfrnnlm/lstm.py	/^flags = tf.flags$/;"	v
flags	steps/tfrnnlm/lstm_fast.py	/^flags = tf.flags$/;"	v
flags	steps/tfrnnlm/vanilla_rnnlm.py	/^flags = tf.flags$/;"	v
float_to_string	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def float_to_string(f):$/;"	f
force_symlink	steps/libs/common.py	/^def force_symlink(file1, file2):$/;"	f
format_float_as_string	steps/info/chain_dir_info.pl	/^sub format_float_as_string {$/;"	s
format_raw	utils/scoring/wer_per_spk_details.pl	/^sub format_raw {$/;"	s
format_string	utils/data/internal/modify_speaker_info.py	/^        format_string = '%s-' + GetFormatString(len(uttlists))$/;"	v
format_string	utils/data/internal/modify_speaker_info.py	/^    format_string = 'speaker-' + GetFormatString(len(uttlists))$/;"	v
format_sys	utils/scoring/wer_per_spk_details.pl	/^sub format_sys {$/;"	s
formatter	steps/chain/e2e/train_e2e.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/chain/train.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/cleanup/internal/align_ctm_ref.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/cleanup/internal/compute_tf_idf.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	steps/cleanup/internal/get_non_scored_words.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/cleanup/internal/modify_ctm_edits.py	/^formatter = logging.Formatter('%(asctime)s [%(filename)s:%(lineno)s - '$/;"	v
formatter	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^formatter = logging.Formatter($/;"	v
formatter	steps/cleanup/internal/retrieve_similar_docs.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	steps/cleanup/internal/stitch_documents.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/chain/e2e/train_e2e.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/chain/train.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/convert_nnet2_to_nnet3.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/multilingual/allocate_multilingual_examples.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/train_dnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/train_raw_dnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/train_raw_rnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/nnet3/train_rnn.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/segmentation/internal/arc_info_to_targets.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/segmentation/internal/get_default_targets_for_out_of_segments.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/segmentation/internal/merge_targets.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/segmentation/internal/prepare_sad_graph.py	/^formatter = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - "$/;"	v
formatter	steps/segmentation/internal/resample_targets.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	steps/segmentation/internal/sad_to_segments.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter	utils/ctm/resolve_ctm_overlaps.py	/^formatter = logging.Formatter($/;"	v
formatter	utils/data/perturb_speed_to_allowed_lengths.py	/^formatter = logging.Formatter("%(asctime)s [%(pathname)s:%(lineno)s - "$/;"	v
formatter_class	steps/cleanup/internal/segment_ctm_edits.py	/^ formatter_class=argparse.ArgumentDefaultsHelpFormatter)$/;"	v
formatter_class	steps/segmentation/internal/sad_to_segments.py	/^        formatter_class=argparse.RawTextHelpFormatter)$/;"	v
formatter_class	utils/lang/compute_sentence_probs_arpa.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)$/;"	v
forward	src/attention_neuro/attention_module.py	/^    def forward(self, x):$/;"	m	class:AttentionModule_stg0
forward	src/attention_neuro/basic_layers.py	/^    def forward(ctx, input, l1weight):$/;"	m	class:L1Penalty
forward	src/attention_neuro/basic_layers.py	/^    def forward(self, x):$/;"	m	class:CRResidualBlock
forward	src/attention_neuro/basic_layers.py	/^    def forward(self, x):$/;"	m	class:LocalAttenBlock
forward	src/attention_neuro/basic_layers.py	/^    def forward(self, x):$/;"	m	class:PlainConvBlock
forward	src/attention_neuro/basic_layers.py	/^    def forward(self, x):$/;"	m	class:ResidualBlock
forward	src/attention_neuro/complex_attention_network.py	/^    def forward(self, x):$/;"	m	class:CAttenResNet1
forward	src/attention_neuro/recurrent_attention.py	/^    def forward(self, x):$/;"	m	class:BLSTM
forward	src/attention_neuro/recurrent_attention.py	/^    def forward(self, x, hidden):$/;"	m	class:BGRU
forward	src/attention_neuro/residual_attention_network.py	/^    def forward(self, x):$/;"	m	class:ResidualAttentionModel
forward	src/attention_neuro/simple_attention_network.py	/^    def forward(self, x):$/;"	m	class:AttenResNet
forward	src/attention_neuro/simple_attention_network.py	/^    def forward(self, x):$/;"	m	class:AttenResNet2
forward	src/attention_neuro/simple_attention_network.py	/^    def forward(self, x):$/;"	m	class:AttenResNet3
forward	src/attention_neuro/simple_attention_network.py	/^    def forward(self, x):$/;"	m	class:AttenResNet4
forward	src/attention_neuro/simple_attention_network.py	/^    def forward(self, x):$/;"	m	class:AttenResNet5
forward	src/attention_neuro/simple_attention_network.py	/^    def forward(self, x):$/;"	m	class:PreAttenResNet
forward	src/v1_neuro.py	/^    def forward(self, inputs, hidden):$/;"	m	class:ConvGRU
forward	src/v1_neuro.py	/^    def forward(self, x):$/;"	m	class:ConvNet
forward	src/v1_neuro.py	/^    def forward(self, x):$/;"	m	class:FeedForward
forward	src/v2_neuro.py	/^    def forward(self, x):$/;"	m	class:ConvNet
forward	src/v2_neuro.py	/^    def forward(self, x):$/;"	m	class:ConvRes
forward	src/v2_neuro.py	/^    def forward(self, x):$/;"	m	class:ConvSmall
forward	src/v2_neuro.py	/^    def forward(self, x):$/;"	m	class:ResNet
forward	src/v2_neuro.py	/^    def forward(self, x):$/;"	m	class:ResNet2
forward	src/v3_neuro.py	/^    def forward(self, x):$/;"	m	class:group
forward	src/v3_neuro.py	/^    def forward(self, x):$/;"	m	class:mfm
forward	src/v3_neuro.py	/^    def forward(self, x):$/;"	m	class:network_9layers
forward	src/v3_neuro.py	/^    def forward(self, x):$/;"	m	class:network_9layers_v2
forward	src/v4_neuro.py	/^    def forward(self, inputs):$/;"	m	class:FConv
forward	src/v5_neuro.py	/^    def forward(self, x):$/;"	m	class:FCResNet
forward	src/v5_neuro.py	/^    def forward(self, x):$/;"	m	class:ResNet
forward	src/v5_neuro.py	/^    def forward(self, x):$/;"	m	class:ResNet2
forward	src/v5_neuro.py	/^    def forward(self, x):$/;"	m	class:ResNet3
forward	src/v5_neuro.py	/^    def forward(self, x):$/;"	m	class:ResNet4
forward	src/v6_neuro.py	/^    def forward(self, x):$/;"	m	class:ResNet
forward	src/v7_neuro.py	/^    def forward(self, x):$/;"	m	class:group
forward	src/v7_neuro.py	/^    def forward(self, x):$/;"	m	class:mfm
forward	src/v7_neuro.py	/^    def forward(self, x1, x2):$/;"	m	class:network_9layers
forward	src/v8_neuro.py	/^    def forward(self, x):$/;"	m	class:group
forward	src/v8_neuro.py	/^    def forward(self, x):$/;"	m	class:mfm
forward	src/v8_neuro.py	/^    def forward(self, x1, x2):$/;"	m	class:network_9layers
frequency_percentage	steps/diagnostic/analyze_lattice_depth_stats.py	/^    frequency_percentage = sum(depths.values()) * 100.0 \/ total_frames$/;"	v
frequency_percentage	steps/diagnostic/analyze_phone_length_stats.py	/^        frequency_percentage = sum(lengths.values()) * 100.0 \/ tot_num_phones$/;"	v
frequency_percentage	steps/diagnostic/analyze_phone_length_stats.py	/^    frequency_percentage = sum(opt_sil_lengths.values()) * 100.0 \/ num_utterances$/;"	v
g_lstm_gate	steps/nnet3/report/generate_plots.py	/^g_lstm_gate = ['i_t_sigmoid', 'f_t_sigmoid', 'c_t_tanh', 'o_t_sigmoid', 'm_t_tanh']$/;"	v
g_lstmp_nonlin_regex_pattern	steps/libs/nnet3/report/log_parse.py	/^g_lstmp_nonlin_regex_pattern = ''.join([".*progress.([0-9]+).log:component name=(.+) ",$/;"	v
g_normal_nonlin_regex_pattern	steps/libs/nnet3/report/log_parse.py	/^g_normal_nonlin_regex_pattern = ''.join([".*progress.([0-9]+).log:component name=(.+) ",$/;"	v
g_normal_nonlin_regex_pattern_with_oderiv	steps/libs/nnet3/report/log_parse.py	/^g_normal_nonlin_regex_pattern_with_oderiv = ''.join([".*progress.([0-9]+).log:component name=(.+) ",$/;"	v
g_plot	steps/nnet3/report/generate_plots.py	/^    g_plot = False$/;"	v
g_plot	steps/nnet3/report/generate_plots.py	/^    g_plot = True$/;"	v
g_plot_colors	steps/nnet3/report/generate_plots.py	/^g_plot_colors = ['red', 'blue', 'green', 'black', 'magenta', 'yellow', 'cyan']$/;"	v
generate_acc_logprob_plots	steps/nnet3/report/generate_plots.py	/^def generate_acc_logprob_plots(exp_dir, output_dir, plot, key='accuracy',$/;"	f
generate_acc_logprob_report	steps/libs/nnet3/report/log_parse.py	/^def generate_acc_logprob_report(exp_dir, key="accuracy", output="output"):$/;"	f
generate_chain_egs	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def generate_chain_egs(dir, data, lat_dir, egs_dir,$/;"	f
generate_clipped_proportion_plots	steps/nnet3/report/generate_plots.py	/^def generate_clipped_proportion_plots(exp_dir, output_dir, plot,$/;"	f
generate_egs	steps/libs/nnet3/train/frame_level_objf/acoustic_model.py	/^def generate_egs(data, alidir, egs_dir,$/;"	f
generate_egs_using_targets	steps/libs/nnet3/train/frame_level_objf/raw_model.py	/^def generate_egs_using_targets(data, targets_scp, egs_dir,$/;"	f
generate_gru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_gru_config(self):$/;"	m	class:XconfigFastGruLayer
generate_gru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_gru_config(self):$/;"	m	class:XconfigGruLayer
generate_kaldi_data_files	utils/data/perturb_speed_to_allowed_lengths.py	/^def generate_kaldi_data_files(utterances, outdir):$/;"	f
generate_nonlin_stats_plots	steps/nnet3/report/generate_plots.py	/^def generate_nonlin_stats_plots(exp_dir, output_dir, plot, comparison_dir=None,$/;"	f
generate_parameter_diff_plots	steps/nnet3/report/generate_plots.py	/^def generate_parameter_diff_plots(exp_dir, output_dir, plot,$/;"	f
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastNormOpgruLayer
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastNormPgruLayer
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastOpgruLayer
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigFastPgruLayer
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigNormOpgruLayer
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigNormPgruLayer
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigOpgruLayer
generate_pgru_config	steps/libs/nnet3/xconfig/gru.py	/^    def generate_pgru_config(self):$/;"	m	class:XconfigPgruLayer
generate_plots	steps/nnet3/report/generate_plots.py	/^def generate_plots(exp_dir, output_dir, output_names, comparison_dir=None,$/;"	f
generate_reverberated_wav_scp	steps/data/reverberate_data_dir.py	/^def generate_reverberated_wav_scp(wav_scp,  # a dictionary whose values are the Kaldi-IO strings of the speech recordings$/;"	f
generate_reverberation_opts	steps/data/reverberate_data_dir.py	/^def generate_reverberation_opts(room_dict,  # the room dictionary, please refer to make_room_dict() for the format$/;"	f
get_action_dict	steps/nnet3/report/convert_model.py	/^def get_action_dict(component_type):$/;"	f
get_args	steps/chain/e2e/train_e2e.py	/^def get_args():$/;"	f
get_args	steps/chain/train.py	/^def get_args():$/;"	f
get_args	steps/cleanup/internal/align_ctm_ref.py	/^def get_args():$/;"	f
get_args	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def get_args():$/;"	f
get_args	steps/cleanup/internal/retrieve_similar_docs.py	/^def get_args():$/;"	f
get_args	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def get_args():$/;"	f
get_args	steps/cleanup/internal/stitch_documents.py	/^def get_args():$/;"	f
get_args	steps/data/augment_data_dir.py	/^def get_args():$/;"	f
get_args	steps/data/make_musan.py	/^def get_args():$/;"	f
get_args	steps/data/reverberate_data_dir.py	/^def get_args():$/;"	f
get_args	steps/nnet3/chain/e2e/train_e2e.py	/^def get_args():$/;"	f
get_args	steps/nnet3/chain/train.py	/^def get_args():$/;"	f
get_args	steps/nnet3/multilingual/allocate_multilingual_examples.py	/^def get_args():$/;"	f
get_args	steps/nnet3/report/generate_plots.py	/^def get_args():$/;"	f
get_args	steps/nnet3/train_dnn.py	/^def get_args():$/;"	f
get_args	steps/nnet3/train_raw_dnn.py	/^def get_args():$/;"	f
get_args	steps/nnet3/train_raw_rnn.py	/^def get_args():$/;"	f
get_args	steps/nnet3/train_rnn.py	/^def get_args():$/;"	f
get_args	steps/nnet3/xconfig_to_config.py	/^def get_args():$/;"	f
get_args	steps/nnet3/xconfig_to_configs.py	/^def get_args():$/;"	f
get_args	steps/segmentation/convert_utt2spk_and_segments_to_rttm.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/arc_info_to_targets.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/get_default_targets_for_out_of_segments.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/get_transform_probs_mat.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/merge_targets.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/prepare_sad_graph.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/resample_targets.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/sad_to_segments.py	/^def get_args():$/;"	f
get_args	steps/segmentation/internal/verify_phones_list.py	/^def get_args():$/;"	f
get_args	utils/ctm/resolve_ctm_overlaps.py	/^def get_args():$/;"	f
get_args	utils/data/get_uniform_subsegments.py	/^def get_args():$/;"	f
get_args	utils/data/internal/combine_segments_to_recording.py	/^def get_args():$/;"	f
get_args	utils/data/internal/perturb_volume.py	/^def get_args():$/;"	f
get_args	utils/data/perturb_speed_to_allowed_lengths.py	/^def get_args():$/;"	f
get_args	utils/lang/grammar/augment_phones_txt.py	/^def get_args():$/;"	f
get_args	utils/lang/grammar/augment_words_txt.py	/^def get_args():$/;"	f
get_args	utils/lang/make_lexicon_fst.py	/^def get_args():$/;"	f
get_args	utils/lang/make_lexicon_fst_silprob.py	/^def get_args():$/;"	f
get_args	utils/lang/make_position_dependent_subword_lexicon.py	/^def get_args():$/;"	f
get_args	utils/lang/make_subword_lexicon_fst.py	/^def get_args():$/;"	f
get_average_nnet_model	steps/libs/nnet3/train/common.py	/^def get_average_nnet_model(dir, iter, nnets_list, run_opts,$/;"	f
get_best_nnet_model	steps/libs/nnet3/train/common.py	/^def get_best_nnet_model(dir, iter, best_model_index, run_opts,$/;"	f
get_combine_info	steps/info/chain_dir_info.pl	/^sub get_combine_info {$/;"	s
get_combine_info	steps/info/nnet2_dir_info.pl	/^sub get_combine_info {$/;"	s
get_combine_info	steps/info/nnet3_dir_info.pl	/^sub get_combine_info {$/;"	s
get_command_stdout	steps/libs/common.py	/^def get_command_stdout(command, require_zero_status = True):$/;"	f
get_config	steps/tfrnnlm/lstm.py	/^def get_config():$/;"	f
get_config	steps/tfrnnlm/lstm_fast.py	/^def get_config():$/;"	f
get_config	steps/tfrnnlm/vanilla_rnnlm.py	/^def get_config():$/;"	f
get_config_headers	steps/nnet3/xconfig_to_configs.py	/^def get_config_headers():$/;"	f
get_convolution_index_set	steps/nnet2/make_multisplice_configs.py	/^def get_convolution_index_set(x, y):$/;"	f
get_ctm_edits	steps/cleanup/internal/align_ctm_ref.py	/^def get_ctm_edits(alignment_output, ctm_array, eps_symbol="<eps>",$/;"	f
get_current_num_jobs	steps/libs/nnet3/train/common.py	/^def get_current_num_jobs(it, num_it, start, step, end):$/;"	f
get_dim_for_descriptor	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_dim_for_descriptor(self, descriptor, all_layers):$/;"	m	class:XconfigLayerBase
get_dim_from_layer_name	steps/libs/nnet3/xconfig/utils.py	/^def get_dim_from_layer_name(all_layers, current_layer, full_layer_name):$/;"	f
get_document_ids	steps/cleanup/internal/retrieve_similar_docs.py	/^def get_document_ids(source_docs, indexes):$/;"	f
get_dropout_edit_string	steps/libs/nnet3/train/dropout_schedule.py	/^def get_dropout_edit_string(dropout_schedule, data_fraction, iter_):$/;"	f
get_edit_type	steps/cleanup/internal/align_ctm_ref.py	/^def get_edit_type(hyp_word, ref_word, duration=-1, eps_symbol='<eps>',$/;"	f
get_effective_learning_rate_str	steps/info/nnet3_disc_dir_info.pl	/^sub get_effective_learning_rate_str {$/;"	s
get_feat_dim	steps/libs/common.py	/^def get_feat_dim(feat_dir):$/;"	f
get_feat_dim_from_scp	steps/libs/common.py	/^def get_feat_dim_from_scp(feat_scp):$/;"	f
get_fmllr_info	steps/info/gmm_dir_info.pl	/^sub get_fmllr_info {$/;"	s
get_full_config	steps/libs/nnet3/xconfig/attention.py	/^    def get_full_config(self):$/;"	m	class:XconfigAttentionLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigAffineLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigBasicLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigExistingLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigFixedAffineLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigIdctLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigInputLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigLayerBase
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigOutputLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigSpecAugmentLayer
get_full_config	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigTrivialOutputLayer
get_full_config	steps/libs/nnet3/xconfig/composite_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigPrefinalLayer
get_full_config	steps/libs/nnet3/xconfig/composite_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigTdnnfLayer
get_full_config	steps/libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:ChannelAverageLayer
get_full_config	steps/libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:XconfigConvLayer
get_full_config	steps/libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:XconfigRes2Block
get_full_config	steps/libs/nnet3/xconfig/convolution.py	/^    def get_full_config(self):$/;"	m	class:XconfigResBlock
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastGruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastNormOpgruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastNormPgruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastOpgruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastPgruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigGruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigNormOpgruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigNormPgruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigOpgruLayer
get_full_config	steps/libs/nnet3/xconfig/gru.py	/^    def get_full_config(self):$/;"	m	class:XconfigPgruLayer
get_full_config	steps/libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastLstmLayer
get_full_config	steps/libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigFastLstmpLayer
get_full_config	steps/libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigLstmLayer
get_full_config	steps/libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigLstmbLayer
get_full_config	steps/libs/nnet3/xconfig/lstm.py	/^    def get_full_config(self):$/;"	m	class:XconfigLstmpLayer
get_full_config	steps/libs/nnet3/xconfig/stats_layer.py	/^    def get_full_config(self):$/;"	m	class:XconfigStatsLayer
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigAffineComponent
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigBatchnormComponent
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigDeltaLayer
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigDimRangeComponent
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigLinearComponent
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigNoOpComponent
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigPerElementOffsetComponent
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigPerElementScaleComponent
get_full_config	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def get_full_config(self):$/;"	m	class:XconfigRenormComponent
get_initial_segments	utils/segmentation.pl	/^sub get_initial_segments {$/;"	s
get_input_descriptor_names	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_input_descriptor_names(self):$/;"	m	class:XconfigExistingLayer
get_input_descriptor_names	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_input_descriptor_names(self):$/;"	m	class:XconfigInputLayer
get_input_descriptor_names	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_input_descriptor_names(self):$/;"	m	class:XconfigLayerBase
get_input_model_info	steps/libs/nnet3/train/common.py	/^def get_input_model_info(input_model):$/;"	f
get_inverse_document_frequency	steps/cleanup/internal/tf_idf.py	/^    def get_inverse_document_frequency(self, term, weighting_scheme="log"):$/;"	m	class:IDFStats
get_iters_for_epochs	steps/info/nnet3_disc_dir_info.pl	/^sub get_iters_for_epochs {$/;"	s
get_ivector_dim	steps/libs/common.py	/^def get_ivector_dim(ivector_dir=None):$/;"	f
get_ivector_extractor_id	steps/libs/common.py	/^def get_ivector_extractor_id(ivector_dir=None):$/;"	f
get_junk_duration	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def get_junk_duration(self):$/;"	m	class:Segment
get_junk_proportion	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def get_junk_proportion(self):$/;"	m	class:Segment
get_last_align_info	steps/info/gmm_dir_info.pl	/^sub get_last_align_info {$/;"	s
get_last_update_info	steps/info/gmm_dir_info.pl	/^sub get_last_update_info {$/;"	s
get_lda_info	steps/info/gmm_dir_info.pl	/^sub get_lda_info {$/;"	s
get_learning_rate	steps/libs/nnet3/train/common.py	/^def get_learning_rate(iter, num_jobs, num_iters, num_archives_processed,$/;"	f
get_log_file	utils/parallel/retry.pl	/^sub get_log_file {$/;"	s
get_log_file	utils/retry.pl	/^sub get_log_file {$/;"	s
get_loglike_and_accuracy_info	steps/info/nnet2_dir_info.pl	/^sub get_loglike_and_accuracy_info {$/;"	s
get_loglike_and_accuracy_info	steps/info/nnet3_dir_info.pl	/^sub get_loglike_and_accuracy_info {$/;"	s
get_logprob_and_accuracy_info	steps/info/chain_dir_info.pl	/^sub get_logprob_and_accuracy_info {$/;"	s
get_mllt_info	steps/info/gmm_dir_info.pl	/^sub get_mllt_info {$/;"	s
get_model_combine_iters	steps/libs/nnet3/train/common.py	/^def get_model_combine_iters(num_iters, num_epochs,$/;"	f
get_model_component_info	steps/libs/nnet3/xconfig/parser.py	/^def get_model_component_info(model_filename):$/;"	f
get_multitask_egs_opts	steps/libs/nnet3/train/common.py	/^def get_multitask_egs_opts(egs_dir, egs_prefix="",$/;"	f
get_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_name(self):$/;"	m	class:XconfigLayerBase
get_new_id	steps/data/augment_data_dir.py	/^def get_new_id(utt, utt_modifier_type, utt_modifier):$/;"	f
get_new_id	steps/data/reverberate_data_dir.py	/^def get_new_id(id, prefix=None, copy=0):$/;"	f
get_ngram_stats	utils/lang/limit_arpa_unk_history.py	/^def get_ngram_stats(old_lm_lines):$/;"	f
get_noise_list	steps/data/augment_data_dir.py	/^def get_noise_list(noise_wav_scp_filename):$/;"	f
get_num_iters	steps/info/chain_dir_info.pl	/^sub get_num_iters {$/;"	s
get_num_iters	steps/info/nnet2_dir_info.pl	/^sub get_num_iters {$/;"	s
get_num_iters	steps/info/nnet3_dir_info.pl	/^sub get_num_iters {$/;"	s
get_num_jobs	steps/info/gmm_dir_info.pl	/^sub get_num_jobs {$/;"	s
get_num_jobs	steps/info/nnet3_disc_dir_info.pl	/^sub get_num_jobs {$/;"	s
get_num_jobs_final	steps/info/chain_dir_info.pl	/^sub get_num_jobs_final {  # expects $num_iters to exist as a global variable.$/;"	s
get_num_jobs_final	steps/info/nnet2_dir_info.pl	/^sub get_num_jobs_final {  # expects $num_iters to exist as a global variable.$/;"	s
get_num_jobs_final	steps/info/nnet3_dir_info.pl	/^sub get_num_jobs_final {  # expects $num_iters to exist as a global variable.$/;"	s
get_num_jobs_initial	steps/info/chain_dir_info.pl	/^sub get_num_jobs_initial {$/;"	s
get_num_jobs_initial	steps/info/nnet2_dir_info.pl	/^sub get_num_jobs_initial {$/;"	s
get_num_jobs_initial	steps/info/nnet3_dir_info.pl	/^sub get_num_jobs_initial {$/;"	s
get_number_of_jobs	steps/libs/common.py	/^def get_number_of_jobs(alidir):$/;"	f
get_number_of_leaves_from_model	steps/libs/common.py	/^def get_number_of_leaves_from_model(dir):$/;"	f
get_number_of_leaves_from_tree	steps/libs/common.py	/^def get_number_of_leaves_from_tree(alidir):$/;"	f
get_objf_str	steps/info/nnet3_disc_dir_info.pl	/^sub get_objf_str {$/;"	s
get_outputs_list	steps/libs/nnet3/train/common.py	/^def get_outputs_list(model_file, get_raw_nnet_from_am=True):$/;"	f
get_pair_statistics	utils/lang/bpe/learn_bpe.py	/^def get_pair_statistics(vocab):$/;"	f
get_pairs	utils/lang/bpe/apply_bpe.py	/^def get_pairs(word):$/;"	f
get_prev_names	steps/libs/nnet3/xconfig/utils.py	/^def get_prev_names(all_layers, current_layer):$/;"	f
get_printed_string	steps/info/chain_dir_info.pl	/^sub get_printed_string {$/;"	s
get_printed_string	steps/info/nnet2_dir_info.pl	/^sub get_printed_string {$/;"	s
get_printed_string	steps/info/nnet3_dir_info.pl	/^sub get_printed_string {$/;"	s
get_progress_info	steps/info/chain_dir_info.pl	/^sub get_progress_info {$/;"	s
get_progress_info	steps/info/nnet2_dir_info.pl	/^sub get_progress_info {$/;"	s
get_progress_info	steps/info/nnet3_dir_info.pl	/^sub get_progress_info {$/;"	s
get_realign_iters	steps/libs/nnet3/train/frame_level_objf/common.py	/^def get_realign_iters(realign_times, num_iters,$/;"	f
get_segments_for_utterance	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def get_segments_for_utterance(split_lines_of_utt, args, utterance_stats):$/;"	f
get_stdout_from_command	steps/nnet3/report/convert_model.py	/^def get_stdout_from_command(command):$/;"	f
get_string_for_descriptor	steps/libs/nnet3/xconfig/basic_layers.py	/^    def get_string_for_descriptor(self, descriptor, all_layers):$/;"	m	class:XconfigLayerBase
get_string_from_layer_name	steps/libs/nnet3/xconfig/utils.py	/^def get_string_from_layer_name(all_layers, current_layer, full_layer_name):$/;"	f
get_successful_models	steps/libs/nnet3/train/common.py	/^def get_successful_models(num_models, log_file_pattern,$/;"	f
get_suffix	utils/lang/make_subword_lexicon_fst.py	/^def get_suffix(phone):$/;"	f
get_term_frequency	steps/cleanup/internal/tf_idf.py	/^    def get_term_frequency(self, term, doc, weighting_scheme="raw",$/;"	m	class:TFStats
get_train_times	steps/libs/nnet3/report/log_parse.py	/^def get_train_times(exp_dir):$/;"	f
get_tree_info	steps/info/gmm_dir_info.pl	/^sub get_tree_info {$/;"	s
get_utf8_or_bytestream	utils/lang/validate_lang.pl	/^sub get_utf8_or_bytestream {$/;"	s
get_utf8_or_bytestream	utils/scoring/wer_ops_details.pl	/^sub get_utf8_or_bytestream {$/;"	s
get_utf8_or_bytestream	utils/scoring/wer_per_spk_details.pl	/^sub get_utf8_or_bytestream {$/;"	s
get_utf8_or_bytestream	utils/scoring/wer_per_utt_details.pl	/^sub get_utf8_or_bytestream {$/;"	s
get_utf8_or_bytestream	utils/validate_dict_dir.pl	/^sub get_utf8_or_bytestream {$/;"	s
get_utf8_or_bytestream	utils/validate_lang.pl	/^sub get_utf8_or_bytestream {$/;"	s
get_utf8_or_bytestream	utils/validate_text.pl	/^sub get_utf8_or_bytestream {$/;"	s
get_value	steps/cleanup/internal/tf_idf.py	/^    def get_value(self, term, doc):$/;"	m	class:TFIDF
get_vocabulary	utils/lang/bpe/learn_bpe.py	/^def get_vocabulary(fobj, is_dict=False):$/;"	f
global_verbose	steps/segmentation/internal/sad_to_segments.py	/^    global_verbose = args.verbose$/;"	v
global_verbose	steps/segmentation/internal/sad_to_segments.py	/^global_verbose = 0$/;"	v
group	src/v3_neuro.py	/^class group(nn.Module):$/;"	c
group	src/v7_neuro.py	/^class group(nn.Module):$/;"	c
group	src/v8_neuro.py	/^class group(nn.Module):$/;"	c
h_ngram	utils/reverse_arpa.py	/^      h_ngram = " ".join(words[n-x:]) # shortened history$/;"	v
h_t1	steps/conf/append_prf_to_ctm.py	/^      h_t1 = l$/;"	v
halve_minibatch_size_str	steps/libs/nnet3/train/common.py	/^def halve_minibatch_size_str(minibatch_size_str):$/;"	f
halve_range_str	steps/libs/nnet3/train/common.py	/^def halve_range_str(range_str):$/;"	f
handler	steps/chain/e2e/train_e2e.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/chain/train.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/cleanup/internal/align_ctm_ref.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/cleanup/internal/compute_tf_idf.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/cleanup/internal/get_non_scored_words.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/cleanup/internal/modify_ctm_edits.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/cleanup/internal/retrieve_similar_docs.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/cleanup/internal/stitch_documents.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/chain/e2e/train_e2e.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/chain/train.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/convert_nnet2_to_nnet3.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/multilingual/allocate_multilingual_examples.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/train_dnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/train_raw_dnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/train_raw_rnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/nnet3/train_rnn.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/segmentation/internal/arc_info_to_targets.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/segmentation/internal/get_default_targets_for_out_of_segments.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/segmentation/internal/merge_targets.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/segmentation/internal/prepare_sad_graph.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/segmentation/internal/resample_targets.py	/^handler = logging.StreamHandler()$/;"	v
handler	steps/segmentation/internal/sad_to_segments.py	/^handler = logging.StreamHandler()$/;"	v
handler	utils/ctm/resolve_ctm_overlaps.py	/^handler = logging.StreamHandler()$/;"	v
handler	utils/data/perturb_speed_to_allowed_lengths.py	/^handler = logging.StreamHandler()$/;"	v
help	steps/chain/e2e/compute_biphone_stats.py	/^                    help="If true, stats will be collected for shared phones.")$/;"	v
help	steps/chain/e2e/text_to_phones.py	/^                    help="Probability of optional silence between the words.")$/;"	v
help	steps/chain/gen_topo.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/chain/gen_topo.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/chain/gen_topo2.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/chain/gen_topo2.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/chain/gen_topo3.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/chain/gen_topo3.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/chain/gen_topo4.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/chain/gen_topo4.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/chain/gen_topo5.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/chain/gen_topo5.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/chain/gen_topo_orig.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/chain/gen_topo_orig.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/cleanup/internal/get_ctm_edits.py	/^                    help = "Filename of input hypothesis in ctm format")$/;"	v
help	steps/cleanup/internal/get_ctm_edits.py	/^                    help = "Filename of output (CTM appended with word-edit information)")$/;"	v
help	steps/cleanup/internal/get_ctm_edits.py	/^                    help = "Filename of output of 'align-text', which this program reads. "$/;"	v
help	steps/cleanup/internal/get_ctm_edits.py	/^                    help = "The integer representation of the OOV symbol; substitutions "$/;"	v
help	steps/cleanup/internal/get_ctm_edits.py	/^                    help = "The words.txt your system used; if supplied, it is used to "$/;"	v
help	steps/cleanup/internal/get_non_scored_words.py	/^                    help = "The lang\/ directory.  This program expects "$/;"	v
help	steps/cleanup/internal/make_one_biased_lm.py	/^                    help = "Discounting constant D for standard (unmodified) Kneser-Ney; "$/;"	v
help	steps/cleanup/internal/make_one_biased_lm.py	/^                    help = "File containing frequent words and probabilities to be added into "$/;"	v
help	steps/cleanup/internal/make_one_biased_lm.py	/^                    help = "Integer corresponding to the disambiguation "$/;"	v
help	steps/cleanup/internal/make_one_biased_lm.py	/^                    help = "Maximum order of n-gram to use (but see also "$/;"	v
help	steps/cleanup/internal/make_one_biased_lm.py	/^                    help = "Minimum count below which we will completely "$/;"	v
help	steps/cleanup/internal/modify_ctm_edits.py	/^                    help = "Filename of input ctm-edits file. "$/;"	v
help	steps/cleanup/internal/modify_ctm_edits.py	/^                    help = "Filename of output ctm-edits file. "$/;"	v
help	steps/cleanup/internal/modify_ctm_edits.py	/^                    help = "If true, allow repetitions in the transcript of one or "$/;"	v
help	steps/cleanup/internal/modify_ctm_edits.py	/^                    help="Filename of file containing a list of non-scored words, "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Amount of padding with <unk> that we do if a segment boundary is "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename for output of word-level stats, of the form "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of file such as data\/lang\/oov.txt which contains "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of input ctm-edits file. "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of output segments.  This has the same format as data\/train\/segments, "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename of output text file (same format as data\/train\/text, i.e. "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Filename to output an extended version of the ctm-edits format "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of a non-scored word (noise, cough, etc.) "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of a non-scored word (noise, etc.) if "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of any 'tainted' line.  Note: "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of silence if it appears at the "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum allowed length of silence if it appears inside a segment "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Maximum proportion of the time of the segment that may "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Minimum allowed segment length (in seconds) for any "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "Minimum allowed segment length (in seconds) for newly "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "This only affects rounding of the output times; they will "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help = "When merging segments that are found to be overlapping or "$/;"	v
help	steps/cleanup/internal/segment_ctm_edits.py	/^                    help="Filename of file containing a list of non-scored words, "$/;"	v
help	steps/cleanup/internal/taint_ctm_edits.py	/^                    help = "Filename of input ctm-edits file. "$/;"	v
help	steps/cleanup/internal/taint_ctm_edits.py	/^                    help = "Filename of output ctm-edits file. "$/;"	v
help	steps/cleanup/internal/taint_ctm_edits.py	/^                    help = "Remove deletions next to taintable lines")$/;"	v
help	steps/cleanup/make_biased_lms.py	/^                    help = "Filename to which a map from input utterances to grouped "$/;"	v
help	steps/cleanup/make_biased_lms.py	/^                    help = "Minimum number of words per utterance group; this program "$/;"	v
help	steps/cleanup/make_biased_lms.py	/^                    help = "Options to pass in to make_one_biased_lm.py (which "$/;"	v
help	steps/diagnostic/analyze_lattice_depth_stats.py	/^                    help="Language directory, e.g. data\/lang.")$/;"	v
help	steps/diagnostic/analyze_phone_length_stats.py	/^                    help="Language directory, e.g. data\/lang.")$/;"	v
help	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^                    help="If true, stats will be collected for shared phones.")$/;"	v
help	steps/nnet3/chain/e2e/text_to_phones.py	/^                    help="Probability of optional silence between the words.")$/;"	v
help	steps/nnet3/chain/gen_topo.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/nnet3/chain/gen_topo.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/nnet3/chain/gen_topo2.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/nnet3/chain/gen_topo2.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/nnet3/chain/gen_topo3.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/nnet3/chain/gen_topo3.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/nnet3/chain/gen_topo4.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/nnet3/chain/gen_topo4.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/nnet3/chain/gen_topo5.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/nnet3/chain/gen_topo5.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/nnet3/chain/gen_topo_orig.py	/^                    help="List of non-silence phones as integers, separated by colons, e.g. 4:5:6:7:8:9");$/;"	v
help	steps/nnet3/chain/gen_topo_orig.py	/^                    help="List of silence phones as integers, separated by colons, e.g. 1:2:3");$/;"	v
help	steps/nnet3/dot/nnet3_to_dot.py	/^                        help="Attributes of the components which should be displayed in the dot-graph "$/;"	v
help	steps/nnet3/dot/nnet3_to_dot.py	/^                        help="list of prefixes. Nnet3 components\/component-nodes with the same prefix"$/;"	v
help	steps/nnet3/get_successful_models.py	/^                        help="Number of models.")$/;"	v
help	steps/nnet3/get_successful_models.py	/^                        help="Pattern for identifying the log-file names. "$/;"	v
help	steps/nnet3/get_successful_models.py	/^                        help="The threshold for discarding models, "$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="Directory to write config files and variables");$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="RMS target for final layer (set to <1 if final layer learns too fast",$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="Raw feature dimension, e.g. 13")$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="Splice indexes at each hidden layer, e.g. '-3,-2,-1,0,1,2,3 0 -2,2 0 -4,4 0 -8,8'")$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="dimension of ReLU nonlinearities")$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="if true, a presoftmax-prior-scale is added",$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="input dimension to p-norm nonlinearities")$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="number of network targets (e.g. num-pdf-ids\/num-leaves)")$/;"	v
help	steps/nnet3/make_tdnn_configs.py	/^                    help="output dimension of p-norm nonlinearities")$/;"	v
help	steps/segmentation/internal/resample_targets.py	/^                        help="Input targets archive")$/;"	v
help	steps/segmentation/internal/resample_targets.py	/^                        help="Output targets archive")$/;"	v
help	steps/segmentation/internal/resample_targets.py	/^                        help="The sampling rate is scaled by this factor")$/;"	v
help	steps/segmentation/internal/resample_targets.py	/^                        help="Verbose level")$/;"	v
help	steps/segmentation/internal/sad_to_segments.py	/^                        help="Additional padding on speech segments. But we "$/;"	v
help	steps/segmentation/internal/sad_to_segments.py	/^                        help="File containing durations of utterances.")$/;"	v
help	steps/segmentation/internal/sad_to_segments.py	/^                        help="Frame shift to convert frame indexes to time")$/;"	v
help	steps/segmentation/internal/sad_to_segments.py	/^                        help="Input file containing alignments in "$/;"	v
help	steps/segmentation/internal/sad_to_segments.py	/^                        help="Merge consecutive segments as long as the merged "$/;"	v
help	steps/segmentation/internal/sad_to_segments.py	/^                        help="Minimum duration (in seconds) required for a segment "$/;"	v
help	steps/segmentation/internal/sad_to_segments.py	/^                        help="Output kaldi segments file")$/;"	v
help	utils/data/extend_segment_times.py	/^                    help="Amount of padding, in seconds, for the end time of "$/;"	v
help	utils/data/extend_segment_times.py	/^                    help="Amount of padding, in seconds, for the start time of "$/;"	v
help	utils/data/extend_segment_times.py	/^                    help="If true, prevent segments from overlapping as a result "$/;"	v
help	utils/data/internal/choose_utts_to_combine.py	/^                    help="Filename of [input] speaker to utterance map needed "$/;"	v
help	utils/data/internal/choose_utts_to_combine.py	/^                    help="Filename of [input] utterance-to-duration map, with lines like 'utt1 1.23'.")$/;"	v
help	utils/data/internal/choose_utts_to_combine.py	/^                    help="Filename of [output] new-utterance-to-old-utterances map, with lines "$/;"	v
help	utils/data/internal/choose_utts_to_combine.py	/^                    help="Filename of [output] utt2dur map, which is just the summations of "$/;"	v
help	utils/data/internal/choose_utts_to_combine.py	/^                    help="Filename of [output] utt2spk map, which maps new utterances to original "$/;"	v
help	utils/data/internal/choose_utts_to_combine.py	/^                    help="Minimum utterance duration")$/;"	v
help	utils/data/internal/modify_speaker_info.py	/^                    help="Maximum number of utterances allowed per speaker")$/;"	v
help	utils/lang/compute_sentence_probs_arpa.py	/^                    help="Filename of input text file (each line will be interpreted as a sentence).")$/;"	v
help	utils/lang/compute_sentence_probs_arpa.py	/^                    help="Filename of output probability file.")$/;"	v
help	utils/lang/compute_sentence_probs_arpa.py	/^                    help="Input language model in arpa form.")$/;"	v
help	utils/lang/compute_sentence_probs_arpa.py	/^                    help="Log base for log porbability")$/;"	v
help	utils/lang/compute_sentence_probs_arpa.py	/^                    help="Order of ngram")$/;"	v
help	utils/lang/internal/arpa2fst_constrained.py	/^                    help = "A file containing the list of allowed bigram pairs.  "$/;"	v
help	utils/lang/internal/arpa2fst_constrained.py	/^                    help = 'Disambiguation symbol (e.g. #0), '$/;"	v
help	utils/lang/internal/arpa2fst_constrained.py	/^                    help = 'The input ARPA file (must not be gzipped)')$/;"	v
help	utils/lang/internal/modify_unk_pron.py	/^                    help = "The printed form of the unknown\/OOV word, normally '<unk>'.")$/;"	v
help	utils/lang/internal/modify_unk_pron.py	/^                    help = 'Filename of the lexicon file to operate on (this is '$/;"	v
help	utils/lang/make_phone_lm.py	/^                    help = "If true, print LM in ARPA format (default is to print "$/;"	v
help	utils/lang/make_phone_lm.py	/^                    help = "Integer corresponding to an otherwise-unused "$/;"	v
help	utils/lang/make_phone_lm.py	/^                    help = "Order of n-gram to use (but see also --num-extra-states;"$/;"	v
help	utils/lang/make_phone_lm.py	/^                    help = "Target number of n-grams in addition to the n-grams in "$/;"	v
help	utils/lang/make_phone_lm.py	/^                    help = "This specifies the n-gram order at which (and below which) "$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Clipping cell values during propagation (per-frame) [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Clipping partial-derivatives during BPTT (per-frame) [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Clipping partial-derivatives of "cells" during BPTT (per-frame, those accumulated by CEC) [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Clipping the accumulated gradients (per-updates) [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Dim reduction for one direction in BLSTM (last BLSTM component) [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Dim reduction for one direction in BLSTM [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Number of BLSTM layers [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Number of cells for one direction in BLSTM [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Range of initial BLSTM parameters [default: %default]');$/;"	v
help	utils/nnet/make_blstm_proto.py	/^                   help='Standard deviation for initial weights of Softmax layer [default: %default]');$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		   help='Number of filters in first convolutional layer [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		   help='Number of filters in second convolutional layer [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Dim of convolutional kernel in 1st layer (freq. axis) [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Dim of convolutional kernel in 2nd layer (freq. axis) [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Directory, where network prototypes will be saved [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Length of splice [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Number of features representing pitch [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Number of neurons in layers processing pitch features [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Order of delta features [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Patch step of first convolutional layer [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Step of pooling [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^		  help='Type of pooling (Max || Average) [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^	  	   help='Size of pooling [default: %default]',$/;"	v
help	utils/nnet/make_cnn_proto.py	/^                   help='Select type of activation function : (<Sigmoid>|<Tanh>) [default: %default]', $/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Clipping cell values during propagation (per-frame) [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Clipping partial-derivatives during BPTT (per-frame) [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Clipping partial-derivatives of "cells" during BPTT (per-frame, those accumulated by CEC) [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Clipping the accumulated gradients (per-updates) [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Number of LSTM layers [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Number of LSTM recurrent units [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Number of cells for one direction in LSTM [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Range of initial LSTM parameters [default: %default]');$/;"	v
help	utils/nnet/make_lstm_proto.py	/^                   help='Standard deviation for initial weights of Softmax layer [default: %default]');$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Add <Dropout> after the non-linearity of hidden layer.',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Additional options for protoype of activation function [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Additional options for protoype of affine tranform [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Disable 1\/12 reduction of stddef in input layer [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Disable smaller initial weights and learning rate around bottleneck',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Do not put <SoftMax> in the prototype [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Extra options for dropout [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Factor to rescale Normal distriburtion for initalizing weight matrices [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Generate <BlockSoftmax> with dims D1:D2:D3 [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Generate normalized weights according to X.Glorot paper, but mapping U->N with same variance (factor sqrt(x\/(dim_in+dim_out)))',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Make bottleneck network with desired bn-dim (0 = no bottleneck) [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Max radius of neuron-weights in L2 space (if longer weights get shrinked, not applied to last layer, 0.0 = disable) [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Select type of activation function : (<Sigmoid>|<Tanh>|<ParametricRelu>) [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Set bias for hidden activations [default: %default]',$/;"	v
help	utils/nnet/make_nnet_proto.py	/^                   help='Set bias range for hidden activations (+\/- 1\/2 range around mean) [default: %default]',$/;"	v
hidden_size	steps/tfrnnlm/lstm.py	/^  hidden_size = 200$/;"	v	class:Config
hidden_size	steps/tfrnnlm/lstm_fast.py	/^  hidden_size = 200$/;"	v	class:Config
hidden_size	steps/tfrnnlm/vanilla_rnnlm.py	/^  hidden_size = 200$/;"	v	class:Config
hours_nonsil	steps/diagnostic/analyze_phone_length_stats.py	/^    hours_nonsil = (total_frames['all'] - total_optsil_frames) \/ 360000.0$/;"	v
hours_total	steps/diagnostic/analyze_phone_length_stats.py	/^    hours_total = total_frames['all'] \/ 360000.0;$/;"	v
hp	CQCC_v1.0/CQT_toolbox_2013/hp.m	/^function b = hp(fs)$/;"	f
hyp	steps/conf/append_eval_to_ctm.py	/^    hyp = f.readline()$/;"	v
hyp_vec	steps/conf/append_eval_to_ctm.py	/^    hyp_vec = hyp_vec.split()$/;"	v
hyp_wrd	steps/conf/append_eval_to_ctm.py	/^      hyp_wrd = merged[j][-1]$/;"	v
icqt	CQCC_v1.0/CQT_toolbox_2013/icqt.m	/^function [x gd] = icqt(Xcq)$/;"	f
in_stream	utils/lang/bpe/reverse.py	/^in_stream = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')$/;"	v
incorrect_proportion	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def incorrect_proportion(self):$/;"	m	class:SegmentStats
ind	utils/reverse_arpa.py	/^  ind = text.split("=")$/;"	v
inf	utils/reverse_arpa.py	/^inf=float("inf")$/;"	v
infile	utils/lang/bpe/prepend_words.py	/^infile = io.TextIOWrapper(sys.stdin.buffer, encoding='latin-1')$/;"	v
init_hidden	src/attention_neuro/recurrent_attention.py	/^    def init_hidden(self, batch):$/;"	m	class:BLSTM
init_scale	steps/tfrnnlm/lstm.py	/^  init_scale = 0.1$/;"	v	class:Config
init_scale	steps/tfrnnlm/lstm_fast.py	/^  init_scale = 0.1$/;"	v	class:Config
init_scale	steps/tfrnnlm/vanilla_rnnlm.py	/^  init_scale = 0.1$/;"	v	class:Config
initial_state	steps/tfrnnlm/lstm.py	/^  def initial_state(self):$/;"	m	class:RnnlmModel
initial_state	steps/tfrnnlm/lstm_fast.py	/^  def initial_state(self):$/;"	m	class:RnnlmModel
initial_state	steps/tfrnnlm/vanilla_rnnlm.py	/^  def initial_state(self):$/;"	m	class:RnnlmModel
initialize_segments	steps/segmentation/internal/sad_to_segments.py	/^    def initialize_segments(self, alignment, frame_shift=0.01):$/;"	m	class:Segmentation
input	steps/tfrnnlm/lstm.py	/^  def input(self):$/;"	m	class:RnnlmModel
input	steps/tfrnnlm/lstm_fast.py	/^  def input(self):$/;"	m	class:RnnlmModel
input	steps/tfrnnlm/vanilla_rnnlm.py	/^  def input(self):$/;"	m	class:RnnlmModel
input_dim	steps/nnet3/make_tdnn_configs.py	/^input_dim = len(splice_array[0]) * args.feat_dim  +  args.ivector_dim$/;"	v
inputdim_of_cnn	utils/nnet/make_cnn_proto.py	/^inputdim_of_cnn = feat_dim$/;"	v
insert_a_column_legend	steps/nnet3/report/generate_plots.py	/^def insert_a_column_legend(legend_handle, legend_label, lp, mp, hp,$/;"	f
int2sym	utils/int2sym.pl	/^sub int2sym {$/;"	s
int_list	steps/nnet3/make_tdnn_configs.py	/^        int_list = []$/;"	v
internal_frame_percent	steps/diagnostic/analyze_phone_length_stats.py	/^    internal_frame_percent = total_frames['internal'] * 100.0 \/ total_frames['all']$/;"	v
internal_opt_sil_phone_lengths	steps/diagnostic/analyze_phone_length_stats.py	/^internal_opt_sil_phone_lengths = dict(phone_lengths['all'][optional_silence_phone])$/;"	v
intersect	utils/lang/validate_lang.pl	/^sub intersect {$/;"	s
intersect	utils/validate_dict_dir.pl	/^sub intersect {$/;"	s
intersect	utils/validate_lang.pl	/^sub intersect {$/;"	s
is_component_type	steps/nnet3/report/convert_model.py	/^def is_component_type(component_type):$/;"	f
is_end	utils/lang/make_position_dependent_subword_lexicon.py	/^def is_end(subword, separator):$/;"	f
is_end	utils/lang/make_subword_lexicon_fst.py	/^def is_end(word, separator):$/;"	f
is_logprob	utils/lang/compute_sentence_probs_arpa.py	/^def is_logprob(input):$/;"	f
is_tainted	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def is_tainted(split_line_of_utt):$/;"	f
is_token	utils/lang/make_lexicon_fst.py	/^def is_token(s):$/;"	f
is_valid_line_name	steps/libs/nnet3/xconfig/utils.py	/^def is_valid_line_name(name):$/;"	f
is_whole_utterance	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def is_whole_utterance(self):$/;"	m	class:Segment
isolate_glossary	utils/lang/bpe/apply_bpe.py	/^def isolate_glossary(word, glossary):$/;"	f
keep_prob	steps/tfrnnlm/lstm.py	/^  keep_prob = 1.0$/;"	v	class:Config
keep_prob	steps/tfrnnlm/lstm_fast.py	/^  keep_prob = 1.0$/;"	v	class:Config
keep_prob	steps/tfrnnlm/vanilla_rnnlm.py	/^  keep_prob = 1$/;"	v	class:Config
key	steps/chain/e2e/compute_biphone_stats.py	/^    key = line[0]$/;"	v
key	steps/chain/e2e/text_to_phones.py	/^    key = line[0]$/;"	v
key	steps/conf/append_prf_to_ctm.py	/^      key='%s,%s' % (f,c) # file,channel$/;"	v
key	steps/conf/prepare_calibration_data.py	/^      key = "%s^%s^%s^%s^%s,%s,%s" % (utt, chan, beg, dur, wrd_id, conf, score_tag)$/;"	v
key	steps/conf/prepare_calibration_data.py	/^    key = "%s^%s^%s^%s^%s,%s,%s" % (utt, chan, beg, dur, wrd_id, conf, score_tag)$/;"	v
key	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^    key = line[0]$/;"	v
key	steps/nnet3/chain/e2e/text_to_phones.py	/^    key = line[0]$/;"	v
key	utils/data/extend_segment_times.py	/^                          key = lambda x : 0.5 * (x[2] + x[3]))$/;"	v
key_map	src/data_reader/test_kaldi_io.py	/^key_map = ako.read_key_len(test_scp)$/;"	v
keys	utils/reverse_arpa.py	/^  keys = sorted(ngrams[n-1].keys())$/;"	v
l_ngram	utils/reverse_arpa.py	/^      l_ngram = " ".join(words[:x]) # shortened ngram$/;"	v
label	src/data_reader/test_kaldi_io.py	/^label   = ako.read_key_label(test_utt2label)$/;"	v
largest_count	steps/diagnostic/analyze_phone_length_stats.py	/^                largest_count = this_count$/;"	v
largest_count	steps/diagnostic/analyze_phone_length_stats.py	/^    largest_count = 0$/;"	v
latex_compliant_name	steps/nnet3/report/generate_plots.py	/^def latex_compliant_name(name_string):$/;"	f
learning_rate	steps/tfrnnlm/lstm.py	/^  learning_rate = 1.0$/;"	v	class:Config
learning_rate	steps/tfrnnlm/lstm_fast.py	/^  learning_rate = 1$/;"	v	class:Config
learning_rate	steps/tfrnnlm/vanilla_rnnlm.py	/^  learning_rate = 0.2$/;"	v	class:Config
left_context	steps/nnet3/make_tdnn_configs.py	/^left_context = 0$/;"	v
left_context	steps/nnet3/make_tdnn_configs.py	/^left_context = max(0, left_context)$/;"	v
length	src/data_reader/test_kaldi_io.py	/^length  = ako.read_total_len(test_scp)$/;"	v
length	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def length(self):$/;"	m	class:Segment
level	steps/nnet3/report/generate_plots.py	/^                    level=logging.INFO)$/;"	v
lexicon	steps/chain/e2e/text_to_phones.py	/^lexicon = {}$/;"	v
lexicon	steps/nnet3/chain/e2e/text_to_phones.py	/^lexicon = {}$/;"	v
lexicon_in	utils/lang/internal/modify_unk_pron.py	/^    lexicon_in = open(args.lexicon_file, 'r')$/;"	v
lexicon_out	utils/lang/internal/modify_unk_pron.py	/^    lexicon_out = open(args.lexicon_file, 'w')$/;"	v
line	steps/chain/e2e/compute_biphone_stats.py	/^    line = line.strip().split()$/;"	v
line	steps/chain/e2e/text_to_phones.py	/^        line = line.strip();$/;"	v
line	steps/chain/e2e/text_to_phones.py	/^    line = line.strip().split()$/;"	v
line	steps/cleanup/internal/segment_ctm_edits.py	/^            line = f.readline()$/;"	v
line	steps/cleanup/make_biased_lms.py	/^    line = sys.stdin.readline();$/;"	v
line	steps/diagnostic/analyze_lattice_depth_stats.py	/^    line = f.readline()$/;"	v
line	steps/diagnostic/analyze_lattice_depth_stats.py	/^    line = sys.stdin.readline()$/;"	v
line	steps/diagnostic/analyze_phone_length_stats.py	/^    line = f.readline()$/;"	v
line	steps/diagnostic/analyze_phone_length_stats.py	/^    line = sys.stdin.readline()$/;"	v
line	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^    line = line.strip().split()$/;"	v
line	steps/nnet3/chain/e2e/text_to_phones.py	/^        line = line.strip();$/;"	v
line	steps/nnet3/chain/e2e/text_to_phones.py	/^    line = line.strip().split()$/;"	v
line	utils/data/extend_segment_times.py	/^    line = sys.stdin.readline()$/;"	v
line	utils/data/internal/choose_utts_to_combine.py	/^    line = f.readline()$/;"	v
line	utils/data/internal/modify_speaker_info.py	/^            line = f.readline()$/;"	v
line	utils/data/internal/modify_speaker_info.py	/^    line = sys.stdin.readline()$/;"	v
line	utils/lang/bpe/bidi.py	/^    line = line.strip()$/;"	v
line	utils/lang/bpe/bidi.py	/^    line = utf8_logical_to_visual(line)[::-1]$/;"	v
line	utils/lang/internal/modify_unk_pron.py	/^    line = lexicon_in.readline()$/;"	v
line_phones	steps/chain/e2e/compute_biphone_stats.py	/^    line_phones = line[1:]$/;"	v
line_phones	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^    line_phones = line[1:]$/;"	v
lines	steps/nnet3/dot/nnet3_to_dot.py	/^    lines = sys.stdin.readlines()$/;"	v
lines	steps/nnet3/get_successful_models.py	/^        lines = open(logfile, 'r').readlines()$/;"	v
list	steps/nnet3/make_tdnn_configs.py	/^list=[ ('Offset(input, {0})'.format(n) if n != 0 else 'input' ) for n in splice_array[0] ]$/;"	v
list_all_log_files	steps/info/chain_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_all_log_files	steps/info/gmm_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_all_log_files	steps/info/nnet2_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_all_log_files	steps/info/nnet3_dir_info.pl	/^sub list_all_log_files {$/;"	s
list_cyclic_iterator	steps/data/reverberate_data_dir.py	/^class list_cyclic_iterator(object):$/;"	c
ljustify	utils/scoring/wer_per_utt_details.pl	/^sub ljustify {$/;"	s
load_model	main.py	/^def load_model(model, model_path, freeze=False):$/;"	f
load_model	utils/lang/compute_sentence_probs_arpa.py	/^def load_model(model_file):$/;"	f
log_avg_depth	steps/conf/prepare_calibration_data.py	/^      log_avg_depth = math.log(float(sum(depth_slice))\/len(depth_slice))$/;"	v
log_word_length	steps/conf/prepare_calibration_data.py	/^    log_word_length = math.log(word_length[wrd_id]) # i.e. number of phones in a word,$/;"	v
logfile	steps/nnet3/get_successful_models.py	/^        logfile = re.sub('%', str(model_num), args.logfile_pattern)$/;"	v
logger	src/v1_prediction.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v1_training.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v1_validation.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v2_prediction.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v2_validation.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v3_prediction.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v3_validation.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v4_plot.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v4_prediction.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v4_validation.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v7_prediction.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v7_training.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v7_validation.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v8_prediction.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v8_training.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	src/v8_validation.py	/^logger = logging.getLogger("anti-spoofing")$/;"	v
logger	steps/chain/e2e/train_e2e.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/chain/train.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/cleanup/internal/align_ctm_ref.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/cleanup/internal/compute_tf_idf.py	/^logger = logging.getLogger('tf_idf')$/;"	v
logger	steps/cleanup/internal/get_non_scored_words.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/cleanup/internal/modify_ctm_edits.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/cleanup/internal/retrieve_similar_docs.py	/^logger = logging.getLogger('__name__')$/;"	v
logger	steps/cleanup/internal/stitch_documents.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/cleanup/internal/tf_idf.py	/^logger = logging.getLogger('__name__')$/;"	v
logger	steps/libs/common.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/libs/nnet3/report/log_parse.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/libs/nnet3/train/common.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/libs/nnet3/train/dropout_schedule.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/libs/nnet3/train/frame_level_objf/acoustic_model.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/libs/nnet3/train/frame_level_objf/common.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/libs/nnet3/train/frame_level_objf/raw_model.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/nnet3/chain/e2e/train_e2e.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/nnet3/chain/train.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/nnet3/convert_nnet2_to_nnet3.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/nnet3/multilingual/allocate_multilingual_examples.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/nnet3/report/generate_plots.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/nnet3/train_dnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/nnet3/train_raw_dnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/nnet3/train_raw_rnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/nnet3/train_rnn.py	/^logger = logging.getLogger('libs')$/;"	v
logger	steps/segmentation/internal/arc_info_to_targets.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/segmentation/internal/get_default_targets_for_out_of_segments.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/segmentation/internal/merge_targets.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/segmentation/internal/prepare_sad_graph.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/segmentation/internal/resample_targets.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	steps/segmentation/internal/sad_to_segments.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	utils/ctm/resolve_ctm_overlaps.py	/^logger = logging.getLogger(__name__)$/;"	v
logger	utils/data/perturb_speed_to_allowed_lengths.py	/^logger = logging.getLogger('libs')$/;"	v
logging	steps/tfrnnlm/lstm.py	/^logging = tf.logging$/;"	v
logging	steps/tfrnnlm/lstm_fast.py	/^logging = tf.logging$/;"	v
logging	steps/tfrnnlm/vanilla_rnnlm.py	/^logging = tf.logging$/;"	v
logit	steps/conf/prepare_calibration_data.py	/^    logit = math.log(float(conf)+damper) - math.log(1.0 - float(conf)+damper)$/;"	v
longest_spk_dur	utils/data/internal/choose_utts_to_combine.py	/^                        longest_spk_dur = spk2dur[this_spk]$/;"	v
longest_spk_dur	utils/data/internal/choose_utts_to_combine.py	/^                longest_spk_dur = -1.0$/;"	v
loss	steps/nnet3/get_successful_models.py	/^    loss = []$/;"	v
lr	steps/tfrnnlm/lstm.py	/^  def lr(self):$/;"	m	class:RnnlmModel
lr	steps/tfrnnlm/lstm_fast.py	/^  def lr(self):$/;"	m	class:RnnlmModel
lr	steps/tfrnnlm/vanilla_rnnlm.py	/^  def lr(self):$/;"	m	class:RnnlmModel
lr_decay	steps/tfrnnlm/lstm.py	/^  lr_decay = 0.5$/;"	v	class:Config
lr_decay	steps/tfrnnlm/lstm_fast.py	/^  lr_decay = 0.8$/;"	v	class:Config
lr_decay	steps/tfrnnlm/vanilla_rnnlm.py	/^  lr_decay = 0.95$/;"	v	class:Config
lstm_cell	steps/tfrnnlm/lstm.py	/^    def lstm_cell():$/;"	f	function:RnnlmModel.__init__
lstm_cell	steps/tfrnnlm/lstm_fast.py	/^    def lstm_cell():$/;"	f	function:RnnlmModel.__init__
lstm_extra_opts	utils/nnet/make_blstm_proto.py	/^lstm_extra_opts=""$/;"	v
lstm_extra_opts	utils/nnet/make_lstm_proto.py	/^lstm_extra_opts=""$/;"	v
m	feature_plot.py	/^m = 1091$/;"	v
m	predict_only.py	/^m = 1091$/;"	v
m	steps/nnet3/report/convert_model.py	/^   m = read_model(sys.argv[1])$/;"	v
main	feature_plot.py	/^def main():$/;"	f
main	main.py	/^def main():$/;"	f
main	predict_only.py	/^def main():$/;"	f
main	src/get_flat_feats.py	/^def main():    $/;"	f
main	steps/chain/e2e/train_e2e.py	/^def main():$/;"	f
main	steps/chain/train.py	/^def main():$/;"	f
main	steps/cleanup/internal/align_ctm_ref.py	/^def main():$/;"	f
main	steps/cleanup/internal/compute_tf_idf.py	/^def main():$/;"	f
main	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def main():$/;"	f
main	steps/cleanup/internal/retrieve_similar_docs.py	/^def main():$/;"	f
main	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def main():$/;"	f
main	steps/cleanup/internal/stitch_documents.py	/^def main():$/;"	f
main	steps/data/augment_data_dir.py	/^def main():$/;"	f
main	steps/data/make_musan.py	/^def main():$/;"	f
main	steps/data/reverberate_data_dir.py	/^def main():$/;"	f
main	steps/nnet3/chain/e2e/train_e2e.py	/^def main():$/;"	f
main	steps/nnet3/chain/train.py	/^def main():$/;"	f
main	steps/nnet3/multilingual/allocate_multilingual_examples.py	/^def main():$/;"	f
main	steps/nnet3/report/generate_plots.py	/^def main():$/;"	f
main	steps/nnet3/train_dnn.py	/^def main():$/;"	f
main	steps/nnet3/train_raw_dnn.py	/^def main():$/;"	f
main	steps/nnet3/train_raw_rnn.py	/^def main():$/;"	f
main	steps/nnet3/train_rnn.py	/^def main():$/;"	f
main	steps/nnet3/xconfig_to_config.py	/^def main():$/;"	f
main	steps/nnet3/xconfig_to_configs.py	/^def main():$/;"	f
main	steps/segmentation/convert_utt2spk_and_segments_to_rttm.py	/^def main():$/;"	f
main	steps/segmentation/internal/arc_info_to_targets.py	/^def main():$/;"	f
main	steps/segmentation/internal/find_oov_phone.py	/^def main():$/;"	f
main	steps/segmentation/internal/get_default_targets_for_out_of_segments.py	/^def main():$/;"	f
main	steps/segmentation/internal/get_transform_probs_mat.py	/^def main():$/;"	f
main	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^def main():$/;"	f
main	steps/segmentation/internal/merge_targets.py	/^def main():$/;"	f
main	steps/segmentation/internal/prepare_sad_graph.py	/^def main():$/;"	f
main	steps/segmentation/internal/resample_targets.py	/^def main():$/;"	f
main	steps/segmentation/internal/sad_to_segments.py	/^def main():$/;"	f
main	steps/segmentation/internal/verify_phones_list.py	/^def main():$/;"	f
main	steps/tfrnnlm/lstm.py	/^def main(_):$/;"	f
main	steps/tfrnnlm/lstm_fast.py	/^def main(_):$/;"	f
main	steps/tfrnnlm/vanilla_rnnlm.py	/^def main(_):$/;"	f
main	utils/ctm/resolve_ctm_overlaps.py	/^def main():$/;"	f
main	utils/data/get_uniform_subsegments.py	/^def main():$/;"	f
main	utils/data/internal/combine_segments_to_recording.py	/^def main():$/;"	f
main	utils/data/internal/perturb_volume.py	/^def main():$/;"	f
main	utils/data/perturb_speed_to_allowed_lengths.py	/^def main():$/;"	f
main	utils/lang/bpe/learn_bpe.py	/^def main(infile, outfile, num_symbols, min_frequency=2, verbose=False, is_dict=False):$/;"	f
main	utils/lang/grammar/augment_phones_txt.py	/^def main():$/;"	f
main	utils/lang/grammar/augment_words_txt.py	/^def main():$/;"	f
main	utils/lang/limit_arpa_unk_history.py	/^def main():$/;"	f
main	utils/lang/make_lexicon_fst.py	/^def main():$/;"	f
main	utils/lang/make_lexicon_fst_silprob.py	/^def main():$/;"	f
main	utils/lang/make_position_dependent_subword_lexicon.py	/^def main():$/;"	f
main	utils/lang/make_subword_lexicon_fst.py	/^def main():$/;"	f
make_plot	src/v4_plot.py	/^def make_plot(utt_id, mat, plot_wd):$/;"	f
make_room_dict	steps/data/reverberate_data_dir.py	/^def make_room_dict(rir_list):$/;"	f
make_splice_string	steps/nnet3/convert_nnet2_to_nnet3.py	/^def make_splice_string(nodename, context, const_component_dim=0):$/;"	f
mat	src/data_reader/test_kaldi_io.py	/^mat     = ako.read_mat_key(test_scp, test_key)$/;"	v
mat_obj	steps/nnet3/get_successful_models.py	/^            mat_obj = parse_regex.search(lines[-1*line_num])$/;"	v
max	utils/scoring/wer_ops_details.pl	/^sub max {$/;"	s
max_epoch	steps/tfrnnlm/lstm.py	/^  max_epoch = 4$/;"	v	class:Config
max_epoch	steps/tfrnnlm/lstm_fast.py	/^  max_epoch = 4$/;"	v	class:Config
max_epoch	steps/tfrnnlm/vanilla_rnnlm.py	/^  max_epoch = 4$/;"	v	class:Config
max_epochs	src/data_reader/test_data_loader.py	/^max_epochs = 1$/;"	v
max_grad_norm	steps/tfrnnlm/lstm.py	/^  max_grad_norm = 5$/;"	v	class:Config
max_grad_norm	steps/tfrnnlm/lstm_fast.py	/^  max_grad_norm = 5$/;"	v	class:Config
max_grad_norm	steps/tfrnnlm/vanilla_rnnlm.py	/^  max_grad_norm = 1$/;"	v	class:Config
max_index	steps/nnet3/get_successful_models.py	/^    max_index = loss.index(max(loss))$/;"	v
max_len	feat_slicing.py	/^    max_len = 1091$/;"	v
max_len	src/data_reader/feat_slicing.py	/^    max_len = 1278$/;"	v
max_max_epoch	steps/tfrnnlm/lstm.py	/^  max_max_epoch = 13$/;"	v	class:Config
max_max_epoch	steps/tfrnnlm/lstm_fast.py	/^  max_max_epoch = 13$/;"	v	class:Config
max_max_epoch	steps/tfrnnlm/vanilla_rnnlm.py	/^  max_max_epoch = 20$/;"	v	class:Config
max_time	utils/data/extend_segment_times.py	/^    max_time = max([ x[3] for x in this_entries ]) + args.last_segment_end_padding$/;"	v
mean	steps/diagnostic/analyze_lattice_depth_stats.py	/^            mean = "%.1f" % depth_mean))$/;"	v
merge_adjacent_segment	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def merge_adjacent_segment(self, other):$/;"	m	class:Segment
merge_clusters	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def merge_clusters(self, scoring_function,$/;"	m	class:SegmentsMerger
merge_consecutive_segments	steps/segmentation/internal/sad_to_segments.py	/^    def merge_consecutive_segments(self, max_dur):$/;"	m	class:Segmentation
merge_segments	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def merge_segments(segments, args):$/;"	f
merge_segments	utils/segmentation.pl	/^sub merge_segments() {$/;"	s
merge_with_segment	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def merge_with_segment(self, other, max_deleted_words):$/;"	m	class:Segment
merged	steps/conf/append_eval_to_ctm.py	/^    merged = [ ctm_tup + evl_tup for ctm_tup,evl_tup in zip(ctm_part,eval_vec[utt]) ]$/;"	v
message	steps/nnet3/report/generate_plots.py	/^                            message='Adding an axes using the same arguments')$/;"	v
mfm	src/v3_neuro.py	/^class mfm(nn.Module):$/;"	c
mfm	src/v7_neuro.py	/^class mfm(nn.Module):$/;"	c
mfm	src/v8_neuro.py	/^class mfm(nn.Module):$/;"	c
midpoint	utils/data/extend_segment_times.py	/^            midpoint = 0.5 * (this_end_time + next_start_time)$/;"	v
min	steps/cleanup/internal/split_text_into_docs.pl	/^sub min ($$) { $_[$_[0] > $_[1]] }$/;"	s
min_len	feat_slicing.py	/^    min_len = 69$/;"	v
min_len	src/data_reader/feat_slicing.py	/^    min_len = 80$/;"	v
min_time	utils/data/extend_segment_times.py	/^    min_time = 0$/;"	v
model	feature_plot.py	/^model = AttenResNet4(atten_activation, atten_channel)$/;"	v
model	main.py	/^model = AttenResNet4(atten_activation, atten_channel)$/;"	v
model	predict_only.py	/^model = AttenResNet2(atten_activation, atten_channel)$/;"	v
model1	feature_plot.py	/^model1 = model_dir + 'attention-2018-07-17_09_13_56-model_best.pth' # AttenResnet2, c=16, sigmoid, attention residual $/;"	v
model1	predict_only.py	/^model1 = model_dir + 'attention-2018-07-17_09_12_16-model_best.pth'$/;"	v
model10	predict_only.py	/^model10 = model_dir + 'attention-2018-07-25_16_12_21-model_best.pth'$/;"	v
model2	predict_only.py	/^model2 = model_dir + 'attention-2018-07-17_09_13_10-model_best.pth'$/;"	v
model3	predict_only.py	/^model3 = model_dir + 'attention-2018-07-18_15_21_01-model_best.pth'$/;"	v
model4	predict_only.py	/^model4 = model_dir + 'attention-2018-07-18_15_19_31-model_best.pth'$/;"	v
model5	predict_only.py	/^model5 = model_dir + 'attention-2018-07-18_05_08_34-model_best.pth'$/;"	v
model6	predict_only.py	/^model6 = model_dir + 'attention-2018-07-18_15_19_34-model_best.pth'$/;"	v
model7	predict_only.py	/^model7 = model_dir + 'attention-2018-07-18_15_19_38-model_best.pth'$/;"	v
model8	predict_only.py	/^model8 = model_dir + 'attention-2018-07-17_09_13_56-model_best.pth'$/;"	v
model9	predict_only.py	/^model9 = model_dir + 'attention-2018-07-25_16_12_12-model_best.pth'$/;"	v
model_dir	feature_plot.py	/^model_dir = '\/export\/b19\/jlai\/cstr\/spoof\/model\/snapshots\/attention\/'$/;"	v
model_dir	predict_only.py	/^model_dir = '\/export\/b19\/jlai\/cstr\/spoof\/model\/snapshots\/attention\/'$/;"	v
model_list	steps/nnet3/get_successful_models.py	/^    model_list = " ".join([str(x) for x in accepted_models])$/;"	v
model_num	steps/nnet3/get_successful_models.py	/^        model_num = i + 1$/;"	v
models	feature_plot.py	/^models = [model1]$/;"	v
models	predict_only.py	/^models = [model1, model2, model3, model4, model5, model6, model7, model8, model9, model10]$/;"	v
mono_counts	steps/chain/e2e/compute_biphone_stats.py	/^mono_counts = {}$/;"	v
mono_counts	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^mono_counts = {}$/;"	v
n	steps/conf/prepare_word_categories.py	/^n=1$/;"	v
n	utils/reverse_arpa.py	/^  n = read_n$/;"	v
n	utils/reverse_arpa.py	/^n=0$/;"	v
n_fail	steps/chain/e2e/text_to_phones.py	/^n_fail = 0$/;"	v
n_fail	steps/nnet3/chain/e2e/text_to_phones.py	/^n_fail = 0$/;"	v
n_tot	steps/chain/e2e/text_to_phones.py	/^n_tot = 0$/;"	v
n_tot	steps/nnet3/chain/e2e/text_to_phones.py	/^n_tot = 0$/;"	v
network_9layers	src/v3_neuro.py	/^class network_9layers(nn.Module):$/;"	c
network_9layers	src/v7_neuro.py	/^class network_9layers(nn.Module):$/;"	c
network_9layers	src/v8_neuro.py	/^class network_9layers(nn.Module):$/;"	c
network_9layers_v2	src/v3_neuro.py	/^class network_9layers_v2(nn.Module):$/;"	c
new_softmax	steps/tfrnnlm/lstm_fast.py	/^def new_softmax(labels, logits):$/;"	f
new_utt	utils/data/internal/choose_utts_to_combine.py	/^            new_utt = utt_group_names[i]$/;"	v
next	steps/data/reverberate_data_dir.py	/^    next = __next__  # for Python 2$/;"	v	class:list_cyclic_iterator
next_start_time	utils/data/extend_segment_times.py	/^        next_start_time = this_entries[n+1][2]$/;"	v
ngram	utils/reverse_arpa.py	/^    ngram = " ".join(words)$/;"	v
ngram_counts	steps/cleanup/internal/make_one_biased_lm.py	/^ngram_counts = NgramCounts(args.ngram_order)$/;"	v
ngram_counts	utils/lang/make_kn_lm.py	/^    ngram_counts = NgramCounts(args.ngram_order)$/;"	v	class:NgramCounts
ngram_counts	utils/lang/make_phone_lm.py	/^ngram_counts = NgramCounts(args.ngram_order)$/;"	v
ngrams	utils/reverse_arpa.py	/^ngrams=[]$/;"	v
node_attributes	steps/nnet3/dot/nnet3_to_dot.py	/^node_attributes = {$/;"	v
node_prefixes	steps/nnet3/dot/nnet3_to_dot.py	/^        node_prefixes = args.node_prefixes.split(',')$/;"	v
node_prefixes	steps/nnet3/dot/nnet3_to_dot.py	/^    node_prefixes = []$/;"	v
nodes	steps/nnet3/lstm/make_configs.py	/^nodes = imp.load_source('nodes', 'steps\/nnet3\/components.py')$/;"	v
nodes	steps/nnet3/tdnn/make_configs.py	/^nodes = imp.load_source('', 'steps\/nnet3\/components.py')$/;"	v
non_scored_words	steps/cleanup/internal/get_non_scored_words.py	/^non_scored_words = set()$/;"	v
non_scored_words	steps/cleanup/internal/modify_ctm_edits.py	/^non_scored_words = set()$/;"	v
non_scored_words	steps/cleanup/internal/segment_ctm_edits.py	/^non_scored_words = set()$/;"	v
non_scored_words	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def non_scored_words():$/;"	f
nonlin_input_dim	steps/nnet3/make_tdnn_configs.py	/^    nonlin_input_dim = args.pnorm_input_dim$/;"	v
nonlin_input_dim	steps/nnet3/make_tdnn_configs.py	/^    nonlin_input_dim = args.relu_dim$/;"	v
nonlin_output_dim	steps/nnet3/make_tdnn_configs.py	/^    nonlin_output_dim = args.pnorm_output_dim$/;"	v
nonlin_output_dim	steps/nnet3/make_tdnn_configs.py	/^    nonlin_output_dim = args.relu_dim$/;"	v
nonsilence	steps/diagnostic/analyze_lattice_depth_stats.py	/^nonsilence = set(phone_int2text.keys())$/;"	v
nonsilence	steps/diagnostic/analyze_phone_length_stats.py	/^nonsilence = set(phone_int2text.keys())$/;"	v
nonsilence_phone	steps/diagnostic/analyze_lattice_depth_stats.py	/^            nonsilence_phone = 0$/;"	v
nonsilence_phone	steps/diagnostic/analyze_phone_length_stats.py	/^            nonsilence_phone = 0$/;"	v
nonsilence_phones	steps/chain/gen_topo.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/chain/gen_topo2.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/chain/gen_topo3.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/chain/gen_topo4.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/chain/gen_topo5.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/chain/gen_topo_orig.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/nnet3/chain/gen_topo.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/nnet3/chain/gen_topo2.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/nnet3/chain/gen_topo3.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/nnet3/chain/gen_topo4.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/nnet3/chain/gen_topo5.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
nonsilence_phones	steps/nnet3/chain/gen_topo_orig.py	/^nonsilence_phones = [ int(x) for x in args.nonsilence_phones.split(":") ]$/;"	v
normalize_descriptors	steps/libs/nnet3/xconfig/basic_layers.py	/^    def normalize_descriptors(self):$/;"	m	class:XconfigLayerBase
nsdual	CQCC_v1.0/CQT_toolbox_2013/nsdual.m	/^function gd = nsdual(g,shift,M)$/;"	f
nsgcqwin	CQCC_v1.0/CQT_toolbox_2013/nsgcqwin.m	/^function [g,shift,M] = nsgcqwin(fmin,fmax,bins,sr,Ls,varargin)$/;"	f
nsgtf_real	CQCC_v1.0/CQT_toolbox_2013/nsgtf_real.m	/^function [c,Ls] = nsgtf_real(f,g,shift,M,phasemode)$/;"	f
nsigtf_real	CQCC_v1.0/CQT_toolbox_2013/nsigtf_real.m	/^function fr = nsigtf_real(c,g,shift,Ls,phasemode)$/;"	f
num_correct_lines	steps/cleanup/internal/modify_ctm_edits.py	/^num_correct_lines = 0$/;"	v
num_del_lines_giving_taint	steps/cleanup/internal/taint_ctm_edits.py	/^num_del_lines_giving_taint = 0$/;"	v
num_hidden_layers	steps/nnet3/make_tdnn_configs.py	/^num_hidden_layers = len(splice_array)$/;"	v
num_ins_lines_giving_taint	steps/cleanup/internal/taint_ctm_edits.py	/^num_ins_lines_giving_taint = 0$/;"	v
num_layers	steps/tfrnnlm/lstm.py	/^  num_layers = 2$/;"	v	class:Config
num_layers	steps/tfrnnlm/lstm_fast.py	/^  num_layers = 2$/;"	v	class:Config
num_layers	steps/tfrnnlm/vanilla_rnnlm.py	/^  num_layers = 1$/;"	v	class:Config
num_lines	steps/cleanup/internal/modify_ctm_edits.py	/^num_lines = 0$/;"	v
num_lines_of_type	steps/cleanup/internal/taint_ctm_edits.py	/^num_lines_of_type = defaultdict(int)$/;"	v
num_patch1	utils/nnet/make_cnn_proto.py	/^num_patch1 = 1 + (feat_raw_dim - o.patch_dim1) \/ o.patch_step1$/;"	v
num_patch2	utils/nnet/make_cnn_proto.py	/^num_patch2 = 1 + (num_pool - patch_dim2) \/ patch_step2$/;"	v
num_pool	utils/nnet/make_cnn_proto.py	/^num_pool = 1 + (num_patch1 - o.pool_size) \/ o.pool_step$/;"	v
num_segments	steps/cleanup/internal/segment_ctm_edits.py	/^num_segments = defaultdict(int)$/;"	v
num_steps	steps/tfrnnlm/lstm.py	/^  num_steps = 20$/;"	v	class:Config
num_steps	steps/tfrnnlm/lstm_fast.py	/^  num_steps = 20$/;"	v	class:Config
num_steps	steps/tfrnnlm/vanilla_rnnlm.py	/^  num_steps = 20$/;"	v	class:Config
num_sub_lines_giving_taint	steps/cleanup/internal/taint_ctm_edits.py	/^num_sub_lines_giving_taint = 0$/;"	v
num_tainted_lines	steps/cleanup/internal/taint_ctm_edits.py	/^num_tainted_lines = 0$/;"	v
num_times_fixed	utils/data/extend_segment_times.py	/^num_times_fixed = 0$/;"	v
num_utterances	steps/cleanup/internal/segment_ctm_edits.py	/^num_utterances = 0$/;"	v
num_utterances	steps/diagnostic/analyze_phone_length_stats.py	/^    num_utterances = total_phones[boundary_type]$/;"	v
num_utterances_without_segments	steps/cleanup/internal/segment_ctm_edits.py	/^num_utterances_without_segments = 0$/;"	v
num_words_this_group	steps/cleanup/make_biased_lms.py	/^        num_words_this_group = 0$/;"	v
num_words_this_group	steps/cleanup/make_biased_lms.py	/^num_words_this_group = 0$/;"	v
number_to_string	steps/info/nnet3_dir_info.pl	/^sub number_to_string {$/;"	s
offset	utils/reverse_arpa.py	/^          offset = revprob # remember <s> weight$/;"	v
offset	utils/reverse_arpa.py	/^offset = 0.0$/;"	v
oov_symbol	steps/cleanup/internal/segment_ctm_edits.py	/^            oov_symbol = line.split()[0]$/;"	v
oov_symbol	steps/cleanup/internal/segment_ctm_edits.py	/^oov_symbol = None$/;"	v
oov_word	steps/chain/e2e/text_to_phones.py	/^oov_word = open(join(args.langdir, "oov.txt")).readline().strip()$/;"	v
oov_word	steps/nnet3/chain/e2e/text_to_phones.py	/^oov_word = open(join(args.langdir, "oov.txt")).readline().strip()$/;"	v
op	steps/conf/append_eval_to_ctm.py	/^    op = f.readline()$/;"	v
op_vec	steps/conf/append_eval_to_ctm.py	/^    op_vec = op_vec.split()$/;"	v
open_or_fd	src/data_reader/kaldi_io.py	/^def open_or_fd(file, mode='rb'):$/;"	f
opt_sil_internal_frame_percent	steps/diagnostic/analyze_phone_length_stats.py	/^    opt_sil_internal_frame_percent = total_internal_optsil_frames * 100.0 \/ total_frames['internal']$/;"	v
opt_sil_internal_phone_percent	steps/diagnostic/analyze_phone_length_stats.py	/^    opt_sil_internal_phone_percent = (sum(internal_opt_sil_phone_lengths.values()) *$/;"	v
opt_sil_lengths	steps/diagnostic/analyze_phone_length_stats.py	/^    opt_sil_lengths = phone_to_lengths[optional_silence_phone]$/;"	v
opt_sil_total_frame_percent	steps/diagnostic/analyze_phone_length_stats.py	/^    opt_sil_total_frame_percent = total_optsil_frames * 100.0 \/ total_frames['all']$/;"	v
optional_silence_phone	steps/diagnostic/analyze_phone_length_stats.py	/^                optional_silence_phone = p$/;"	v
optional_silence_phone	steps/diagnostic/analyze_phone_length_stats.py	/^    optional_silence_phone = 1$/;"	v
optional_silence_phone	steps/diagnostic/analyze_phone_length_stats.py	/^    optional_silence_phone = int(f.readline())$/;"	v
optional_silence_phone_text	steps/diagnostic/analyze_phone_length_stats.py	/^    optional_silence_phone_text = phone_int2text[optional_silence_phone]$/;"	v
options	utils/apply_map.pl	/^ options: [-f <field-range> ] [--permissive]$/;"	l
or	utils/split_scp.pl	/^   or: split_scp.pl -j num-jobs job-id [--one-based] [--utt2spk=<utt2spk_file>] [--utt2dur=<utt2dur_file>] in.scp [out.scp]$/;"	l
orig_dev_scp	feat_slicing.py	/^    orig_dev_scp = curr_wd + '\/' + data_wd + 'dev_spec_cmvn\/feats.scp'$/;"	v
orig_dev_scp	src/data_reader/feat_plot.py	/^    orig_dev_scp    = curr_wd + '\/' + data_wd + 'dev_spec_cmvn_tensor.scp'$/;"	v
orig_dev_scp	src/data_reader/feat_slicing.py	/^    orig_dev_scp    = curr_wd + '\/' + data_wd + 'dev_cqcc_spectrogram_cmvn_orig.scp'$/;"	v
orig_eval_scp	feat_slicing.py	/^    orig_eval_scp = curr_wd + '\/' + data_wd + 'eval_spec_cmvn\/feats.scp'$/;"	v
orig_eval_scp	src/data_reader/feat_plot.py	/^    orig_eval_scp   = curr_wd + '\/' + data_wd + 'eval_spec_cmvn_orig.scp'$/;"	v
orig_eval_scp	src/data_reader/feat_slicing.py	/^    orig_eval_scp   = curr_wd + '\/' + data_wd + 'eval_cqcc_spectrogram_cmvn_orig.scp'$/;"	v
orig_input	steps/nnet3/make_tdnn_configs.py	/^        orig_input='Append({0})'.format(', '.join(splices))$/;"	v
orig_train_scp	feat_slicing.py	/^    orig_train_scp = curr_wd + '\/' + data_wd + 'train_spec_cmvn\/feats.scp'$/;"	v
orig_train_scp	src/data_reader/feat_plot.py	/^    orig_train_scp  = curr_wd + '\/' + data_wd + 'train_spec_cmvn_tensor.scp'$/;"	v
orig_train_scp	src/data_reader/feat_slicing.py	/^    orig_train_scp  = curr_wd + '\/' + data_wd + 'train_cqcc_spectrogram_cmvn_orig.scp'$/;"	v
other_feats	steps/conf/prepare_calibration_data.py	/^other_feats = { wrd_id:other_feats.strip() for (wrd,wrd_id,filter,length,other_feats) in word_feats }$/;"	v
out_dev_ark	feat_slicing.py	/^    out_dev_ark = curr_wd + '\/' + write_wd + 'dev_spectrogram_cmvn_tensor.ark'$/;"	v
out_dev_ark	src/data_reader/feat_slicing.py	/^    out_dev_ark    = curr_wd + '\/' + write_wd +'dev_cqcc_spectrogram_cmvn_tensor.ark'$/;"	v
out_dev_scp	feat_slicing.py	/^    out_dev_scp = curr_wd + '\/' + write_wd + 'dev_spectrogram_cmvn_tensor.scp'$/;"	v
out_dev_scp	src/data_reader/feat_slicing.py	/^    out_dev_scp    = curr_wd + '\/' + write_wd + 'dev_cqcc_spectrogram_cmvn_tensor.scp'$/;"	v
out_eval_ark	feat_slicing.py	/^        'eval_spectrogram_cmvn_tensor.ark'$/;"	v
out_eval_ark	src/data_reader/feat_slicing.py	/^    out_eval_ark   = curr_wd + '\/' + write_wd +'eval_cqcc_spectrogram_cmvn_tensor.ark'$/;"	v
out_eval_scp	feat_slicing.py	/^        'eval_spectrogram_cmvn_tensor.scp'$/;"	v
out_eval_scp	src/data_reader/feat_slicing.py	/^    out_eval_scp   = curr_wd + '\/' + write_wd + 'eval_cqcc_spectrogram_cmvn_tensor.scp'$/;"	v
out_stream	utils/lang/bpe/reverse.py	/^out_stream = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')$/;"	v
out_train_ark	feat_slicing.py	/^        'train_spectrogram_cmvn_tensor.ark'$/;"	v
out_train_ark	src/data_reader/feat_slicing.py	/^    out_train_ark  = curr_wd + '\/' + write_wd +'train_cqcc_spectrogram_cmvn_tensor.ark'$/;"	v
out_train_scp	feat_slicing.py	/^        'train_spectrogram_cmvn_tensor.scp'$/;"	v
out_train_scp	src/data_reader/feat_slicing.py	/^    out_train_scp  = curr_wd + '\/' + write_wd + 'train_cqcc_spectrogram_cmvn_tensor.scp'$/;"	v
output	utils/lang/bpe/prepend_words.py	/^output = io.TextIOWrapper(sys.stdout.buffer, encoding='latin-1')$/;"	v
output_dim	steps/libs/nnet3/xconfig/attention.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigAttentionLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigAffineLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigBasicLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigFixedAffineLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigIdctLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigLayerBase
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigOutputLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigSpecAugmentLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigExistingLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigInputLayer
output_dim	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigTrivialOutputLayer
output_dim	steps/libs/nnet3/xconfig/composite_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigPrefinalLayer
output_dim	steps/libs/nnet3/xconfig/composite_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigTdnnfLayer
output_dim	steps/libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:ChannelAverageLayer
output_dim	steps/libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigConvLayer
output_dim	steps/libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigRes2Block
output_dim	steps/libs/nnet3/xconfig/convolution.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigResBlock
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastGruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormOpgruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormPgruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastOpgruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastPgruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigGruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigNormOpgruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigNormPgruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigOpgruLayer
output_dim	steps/libs/nnet3/xconfig/gru.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigPgruLayer
output_dim	steps/libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmLayer
output_dim	steps/libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmpLayer
output_dim	steps/libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigLstmLayer
output_dim	steps/libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigLstmbLayer
output_dim	steps/libs/nnet3/xconfig/lstm.py	/^    def output_dim(self, auxiliary_output = None):$/;"	m	class:XconfigLstmpLayer
output_dim	steps/libs/nnet3/xconfig/stats_layer.py	/^    def output_dim(self, auxiliary_outputs=None):$/;"	m	class:XconfigStatsLayer
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigAffineComponent
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigBatchnormComponent
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigCombineFeatureMapsLayer
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigDeltaLayer
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigDimRangeComponent
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigLinearComponent
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigNoOpComponent
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementOffsetComponent
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementScaleComponent
output_dim	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_dim(self, auxiliary_output=None):$/;"	m	class:XconfigRenormComponent
output_name	steps/libs/nnet3/xconfig/attention.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigAttentionLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigAffineLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigBasicLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigFixedAffineLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigIdctLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigLayerBase
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigOutputLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigSpecAugmentLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_outputs=None):$/;"	m	class:XconfigExistingLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_outputs=None):$/;"	m	class:XconfigInputLayer
output_name	steps/libs/nnet3/xconfig/basic_layers.py	/^    def output_name(self, auxiliary_outputs=None):$/;"	m	class:XconfigTrivialOutputLayer
output_name	steps/libs/nnet3/xconfig/composite_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigPrefinalLayer
output_name	steps/libs/nnet3/xconfig/composite_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigTdnnfLayer
output_name	steps/libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:ChannelAverageLayer
output_name	steps/libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigConvLayer
output_name	steps/libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigRes2Block
output_name	steps/libs/nnet3/xconfig/convolution.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigResBlock
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastGruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormOpgruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastNormPgruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastOpgruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastPgruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigGruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigNormOpgruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigNormPgruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigOpgruLayer
output_name	steps/libs/nnet3/xconfig/gru.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigPgruLayer
output_name	steps/libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmLayer
output_name	steps/libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigFastLstmpLayer
output_name	steps/libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigLstmLayer
output_name	steps/libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigLstmbLayer
output_name	steps/libs/nnet3/xconfig/lstm.py	/^    def output_name(self, auxiliary_output = None):$/;"	m	class:XconfigLstmpLayer
output_name	steps/libs/nnet3/xconfig/stats_layer.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigStatsLayer
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigAffineComponent
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigBatchnormComponent
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigCombineFeatureMapsLayer
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigDeltaLayer
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigDimRangeComponent
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigLinearComponent
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigNoOpComponent
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementOffsetComponent
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigPerElementScaleComponent
output_name	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def output_name(self, auxiliary_output=None):$/;"	m	class:XconfigRenormComponent
output_result	utils/lang/compute_sentence_probs_arpa.py	/^def output_result(text_in_handle, output_file_handle, ngram_order):$/;"	f
outputdim_of_cnn	utils/nnet/make_cnn_proto.py	/^outputdim_of_cnn = o.num_filters2*num_patch2$/;"	v
p10	steps/diagnostic/analyze_lattice_depth_stats.py	/^            p10 = depth_percentile_10,$/;"	v
p50	steps/diagnostic/analyze_lattice_depth_stats.py	/^            p50 = depth_percentile_50,$/;"	v
p90	steps/diagnostic/analyze_lattice_depth_stats.py	/^            p90 = depth_percentile_90,$/;"	v
p_l	utils/reverse_arpa.py	/^      p_l = ngrams[x-1][l_ngram][0]$/;"	v
p_r	utils/reverse_arpa.py	/^      p_r = ngrams[x-1][r_ngram][0]$/;"	v
pad_speech_segments	steps/segmentation/internal/sad_to_segments.py	/^    def pad_speech_segments(self, segment_padding, max_duration=float("inf")):$/;"	m	class:Segmentation
pair	steps/chain/e2e/compute_biphone_stats.py	/^            pair = (phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
pair	steps/chain/e2e/compute_biphone_stats.py	/^        pair = (phone1, phone2)$/;"	v
pair	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^            pair = (phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
pair	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^        pair = (phone1, phone2)$/;"	v
params	src/data_reader/test_data_loader.py	/^params = {'batch_size': 32,$/;"	v
params	steps/nnet2/make_multisplice_configs.py	/^  params = parser.parse_args() $/;"	v
parse_accounting_entry	utils/summarize_logs.pl	/^sub parse_accounting_entry {$/;"	s
parse_affine_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_affine_component(component, line, line_buffer):$/;"	f
parse_bias	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_bias(line):$/;"	f
parse_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_component(line, line_buffer):$/;"	f
parse_config_line	steps/libs/nnet3/xconfig/utils.py	/^def parse_config_line(orig_config_line):$/;"	f
parse_difference_string	steps/libs/nnet3/report/log_parse.py	/^def parse_difference_string(string):$/;"	f
parse_end_of_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_end_of_component(component, line, line_buffer):$/;"	f
parse_file_to_dict	steps/data/reverberate_data_dir.py	/^def parse_file_to_dict(file, assert2fields = False, value_processor = None):$/;"	f
parse_fixed_bias_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_fixed_bias_component(component, line, line_buffer):$/;"	f
parse_fixed_scale_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_fixed_scale_component(component, line, line_buffer):$/;"	f
parse_generic_config_vars_file	steps/libs/nnet3/train/common.py	/^def parse_generic_config_vars_file(var_file):$/;"	f
parse_new_descriptor	steps/libs/nnet3/xconfig/utils.py	/^def parse_new_descriptor(tokens, pos, prev_names):$/;"	f
parse_nnet2_header	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_nnet2_header(line_buffer):$/;"	f
parse_nnet2_to_nnet3	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_nnet2_to_nnet3(line_buffer):$/;"	f
parse_noise_list	steps/data/reverberate_data_dir.py	/^def parse_noise_list(noise_set_para_array, smoothing_weight, sampling_rate = None):$/;"	f
parse_priors	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_priors(line, line_buffer):$/;"	f
parse_prob_logs	steps/libs/nnet3/report/log_parse.py	/^def parse_prob_logs(exp_dir, key='accuracy', output="output"):$/;"	f
parse_progress_logs_for_clipped_proportion	steps/libs/nnet3/report/log_parse.py	/^def parse_progress_logs_for_clipped_proportion(exp_dir):$/;"	f
parse_progress_logs_for_nonlinearity_stats	steps/libs/nnet3/report/log_parse.py	/^def parse_progress_logs_for_nonlinearity_stats(exp_dir):$/;"	f
parse_progress_logs_for_param_diff	steps/libs/nnet3/report/log_parse.py	/^def parse_progress_logs_for_param_diff(exp_dir, pattern):$/;"	f
parse_regex	steps/nnet3/get_successful_models.py	/^    parse_regex = re.compile("LOG .* Overall average objective function for 'output' is ([0-9e.\\-+]+) over ([0-9e.\\-+]+) frames")$/;"	v
parse_rir_list	steps/data/reverberate_data_dir.py	/^def parse_rir_list(rir_set_para_array, smoothing_weight, sampling_rate = None):$/;"	f
parse_rnnlm_prob_logs	steps/libs/nnet3/report/log_parse.py	/^def parse_rnnlm_prob_logs(exp_dir, key='objf'):$/;"	f
parse_set_parameter_strings	steps/data/reverberate_data_dir.py	/^def parse_set_parameter_strings(set_para_array):$/;"	f
parse_splice_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_splice_component(component, line, line_buffer):$/;"	f
parse_splice_string	steps/nnet2/make_multisplice_configs.py	/^def parse_splice_string(splice_string):$/;"	f
parse_standard_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_standard_component(component, line, line_buffer):$/;"	f
parse_sum_group_component	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_sum_group_component(component, line, line_buffer):$/;"	f
parse_transition_model	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_transition_model(line_buffer):$/;"	f
parse_vector	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_vector(line):$/;"	f
parse_weights	steps/nnet3/convert_nnet2_to_nnet3.py	/^def parse_weights(line_buffer):$/;"	f
parser	steps/chain/gen_topo.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/chain/gen_topo2.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/chain/gen_topo3.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/chain/gen_topo4.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/chain/gen_topo5.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/chain/gen_topo_orig.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/cleanup/internal/get_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	steps/cleanup/internal/get_non_scored_words.py	/^parser = argparse.ArgumentParser($/;"	v
parser	steps/cleanup/internal/modify_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	steps/cleanup/internal/segment_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	steps/cleanup/internal/taint_ctm_edits.py	/^parser = argparse.ArgumentParser($/;"	v
parser	steps/conf/prepare_calibration_data.py	/^parser = OptionParser(usage=usage, description=desc)$/;"	v
parser	steps/conf/prepare_word_categories.py	/^parser = OptionParser(usage=usage, description=desc)$/;"	v
parser	steps/diagnostic/analyze_lattice_depth_stats.py	/^parser = argparse.ArgumentParser(description="This script reads stats created in analyze_lats.sh "$/;"	v
parser	steps/diagnostic/analyze_phone_length_stats.py	/^parser = argparse.ArgumentParser(description="This script reads stats created in analyze_alignments.sh "$/;"	v
parser	steps/libs/nnet3/train/common.py	/^    parser = argparse.ArgumentParser(add_help=False)$/;"	v	class:CommonParser
parser	steps/nnet2/make_multisplice_configs.py	/^  parser = argparse.ArgumentParser()$/;"	v
parser	steps/nnet3/chain/gen_topo.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/nnet3/chain/gen_topo2.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/nnet3/chain/gen_topo3.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/nnet3/chain/gen_topo4.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/nnet3/chain/gen_topo5.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/nnet3/chain/gen_topo_orig.py	/^parser = argparse.ArgumentParser(description="Usage: steps\/nnet3\/chain\/gen_topo.py "$/;"	v
parser	steps/nnet3/dot/nnet3_to_dot.py	/^    parser = argparse.ArgumentParser(description="Converts the output of nnet3-am-info "$/;"	v
parser	steps/nnet3/get_successful_models.py	/^    parser = argparse.ArgumentParser(description="Create a list of models suitable for averaging "$/;"	v
parser	steps/nnet3/make_tdnn_configs.py	/^parser = argparse.ArgumentParser(description="Writes config files and variables "$/;"	v
parser	utils/lang/bpe/apply_bpe.py	/^    parser = create_parser()$/;"	v
parser	utils/lang/bpe/learn_bpe.py	/^    parser = create_parser()$/;"	v
parser	utils/lang/compute_sentence_probs_arpa.py	/^parser = argparse.ArgumentParser(description="This script evaluates the log probabilty (default log base is e) of each sentence "$/;"	v
parser	utils/lang/limit_arpa_unk_history.py	/^parser = argparse.ArgumentParser($/;"	v
parser	utils/nnet/gen_dct_mat.py	/^parser = OptionParser()$/;"	v
parser	utils/nnet/gen_hamm_mat.py	/^parser = OptionParser()$/;"	v
parser	utils/nnet/gen_splice.py	/^parser = OptionParser()$/;"	v
parser	utils/nnet/make_blstm_proto.py	/^parser = OptionParser(usage)$/;"	v
parser	utils/nnet/make_cnn_proto.py	/^parser = OptionParser(usage)$/;"	v
parser	utils/nnet/make_lstm_proto.py	/^parser = OptionParser(usage)$/;"	v
parser	utils/nnet/make_nnet_proto.py	/^parser = OptionParser(usage)$/;"	v
partial_diff	utils/data/validate_data_dir.sh	/^function partial_diff {$/;"	f
partial_diff	utils/validate_data_dir.sh	/^function partial_diff {$/;"	f
parts	steps/chain/e2e/text_to_phones.py	/^        parts = line.split()$/;"	v
parts	steps/nnet3/chain/e2e/text_to_phones.py	/^        parts = line.split()$/;"	v
patch_dim2	utils/nnet/make_cnn_proto.py	/^patch_dim2 = o.patch_dim2$/;"	v
patch_step2	utils/nnet/make_cnn_proto.py	/^patch_step2 = o.patch_step1$/;"	v
patch_stride2	utils/nnet/make_cnn_proto.py	/^patch_stride2 = num_pool # same as layer1 outputs $/;"	v
percent	steps/diagnostic/analyze_lattice_depth_stats.py	/^            percent = "%.1f" % frequency_percentage)$/;"	v
percent	steps/diagnostic/analyze_phone_length_stats.py	/^                percent = "%.1f" % frequency_percentage,$/;"	v
percentile95	steps/diagnostic/analyze_phone_length_stats.py	/^                percentile95 = duration_percentile_95))$/;"	v
perturb_utterances	utils/data/perturb_speed_to_allowed_lengths.py	/^def perturb_utterances(utterances, allowed_durations, args):$/;"	f
phone_depth_counts	steps/diagnostic/analyze_lattice_depth_stats.py	/^phone_depth_counts = dict()$/;"	v
phone_int2text	steps/diagnostic/analyze_lattice_depth_stats.py	/^phone_int2text = {}$/;"	v
phone_int2text	steps/diagnostic/analyze_phone_length_stats.py	/^phone_int2text = {}$/;"	v
phone_lengths	steps/diagnostic/analyze_phone_length_stats.py	/^phone_lengths = dict()$/;"	v
phone_set	steps/chain/e2e/compute_biphone_stats.py	/^        phone_set = line.strip().split()$/;"	v
phone_set	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^        phone_set = line.strip().split()$/;"	v
phone_sets	steps/chain/e2e/compute_biphone_stats.py	/^phone_sets = []$/;"	v
phone_sets	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^phone_sets = []$/;"	v
phone_text	steps/diagnostic/analyze_lattice_depth_stats.py	/^            phone_text = phone_int2text[phone]$/;"	v
phone_text	steps/diagnostic/analyze_phone_length_stats.py	/^            phone_text = phone_int2text[phone]$/;"	v
phone_to_lengths	steps/diagnostic/analyze_phone_length_stats.py	/^    phone_to_lengths = phone_lengths[boundary_type]$/;"	v
phone_to_shard_phone	steps/chain/e2e/compute_biphone_stats.py	/^phone_to_shard_phone = {}$/;"	v
phone_to_shard_phone	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^phone_to_shard_phone = {}$/;"	v
phone_trans	steps/chain/e2e/text_to_phones.py	/^    phone_trans = []        # phone-level transcription$/;"	v
phone_trans	steps/nnet3/chain/e2e/text_to_phones.py	/^    phone_trans = []        # phone-level transcription$/;"	v
phones	steps/chain/e2e/compute_biphone_stats.py	/^phones = []$/;"	v
phones	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^phones = []$/;"	v
pick_item_with_probability	steps/data/reverberate_data_dir.py	/^def pick_item_with_probability(x):$/;"	f
plot_a_nonlin_component	steps/nnet3/report/generate_plots.py	/^def plot_a_nonlin_component(fig, dirs, stat_tables_per_component_per_dir,$/;"	f
plot_feat	src/data_reader/feat_plot.py	/^def plot_feat(orig_feat_scp, output_plot_wd):$/;"	f
plot_wd	src/data_reader/feat_plot.py	/^    plot_wd = 'plot\/spec\/train_tensor\/'$/;"	v
plotnsgtf	CQCC_v1.0/CQT_toolbox_2013/plotnsgtf.m	/^function plotnsgtf(c,shift,sr,fmin,fmax,bins,cutout,dynrange)$/;"	f
popen	src/data_reader/kaldi_io.py	/^def popen(cmd, mode="rb"):$/;"	f
positive_int	steps/libs/nnet3/train/common.py	/^def positive_int(arg):$/;"	f
possibly_add_tainted_lines	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_add_tainted_lines(self):$/;"	m	class:Segment
possibly_add_unk_padding	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_add_unk_padding(self, max_unk_padding):$/;"	m	class:Segment
possibly_split_long_segment	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_split_long_segment(self, max_segment_length,$/;"	m	class:Segment
possibly_split_segment	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_split_segment(self, max_internal_silence_length,$/;"	m	class:Segment
possibly_truncate_boundaries	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def possibly_truncate_boundaries(self, max_edge_silence_length,$/;"	m	class:Segment
preamble	steps/diagnostic/analyze_lattice_depth_stats.py	/^            preamble = preamble,$/;"	v
preamble	steps/diagnostic/analyze_lattice_depth_stats.py	/^        preamble = "Nonsilence phones as a group account for {percent}% of frames, with".format($/;"	v
preamble	steps/diagnostic/analyze_lattice_depth_stats.py	/^        preamble = "Overall,";$/;"	v
preamble	steps/diagnostic/analyze_lattice_depth_stats.py	/^        preamble = "Phone {phone_text} accounts for {percent}% of frames, with".format($/;"	v
prediction	src/v1_prediction.py	/^def prediction(args, model, device, eval_loader, eval_scp, eval_utt2label, opti_threshold):$/;"	f
prediction	src/v2_prediction.py	/^def prediction(args, model, device, eval_loader, eval_scp, eval_utt2label, opti_threshold):$/;"	f
prediction	src/v3_prediction.py	/^def prediction(args, model, device, eval_loader, eval_scp, eval_utt2label):$/;"	f
prediction	src/v4_prediction.py	/^def prediction(args, model, device, eval_loader, eval_scp, eval_utt2label, rnn=False):$/;"	f
prediction	src/v7_prediction.py	/^def prediction(args, model, device, eval_loader, eval_scp, eval_utt2label):$/;"	f
prediction	src/v8_prediction.py	/^def prediction(args, model, device, eval_loader, eval_scp, eval_utt2label):$/;"	f
prepare_initial_acoustic_model	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def prepare_initial_acoustic_model(dir, run_opts, srand=-1, input_model=None):$/;"	f
prepare_initial_acoustic_model	steps/libs/nnet3/train/frame_level_objf/acoustic_model.py	/^def prepare_initial_acoustic_model(dir, alidir, run_opts,$/;"	f
prepare_initial_network	steps/libs/nnet3/train/common.py	/^def prepare_initial_network(dir, run_opts, srand=-3, input_model=None):$/;"	f
prepare_music	steps/data/make_musan.py	/^def prepare_music(root_dir, use_vocals, sampling_rate):$/;"	f
prepare_noise	steps/data/make_musan.py	/^def prepare_noise(root_dir, sampling_rate):$/;"	f
prepare_speech	steps/data/make_musan.py	/^def prepare_speech(root_dir, sampling_rate):$/;"	f
prf	steps/conf/append_prf_to_ctm.py	/^prf = []$/;"	v
prf_dict	steps/conf/append_prf_to_ctm.py	/^prf_dict = dict()$/;"	v
principal_chunk_width	steps/libs/nnet3/train/common.py	/^def principal_chunk_width(chunk_width):$/;"	f
print	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def print(self, word_stats_out):$/;"	m	class:WordStats
print_alignment	steps/cleanup/internal/align_ctm_ref.py	/^def print_alignment(recording, alignment, out_file_handle):$/;"	f
print_arc	utils/lang/make_subword_lexicon_fst.py	/^def print_arc(src, dest, phone, word, cost):$/;"	f
print_as_arpa	utils/lang/make_kn_lm.py	/^    def print_as_arpa(self, fout=io.TextIOWrapper(sys.stdout.buffer, encoding='latin-1')):$/;"	m	class:NgramCounts
print_debug_info_for_utterance	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def print_debug_info_for_utterance(ctm_edits_out_handle,$/;"	f
print_f	utils/lang/make_kn_lm.py	/^    def print_f(self, info_string):$/;"	m	class:NgramCounts
print_f_and_bow	utils/lang/make_kn_lm.py	/^    def print_f_and_bow(self, info_string):$/;"	m	class:NgramCounts
print_header	utils/scoring/wer_per_spk_details.pl	/^sub print_header {$/;"	s
print_line	utils/scoring/wer_ops_details.pl	/^sub print_line {$/;"	s
print_modified_counts	utils/lang/make_kn_lm.py	/^    def print_modified_counts(self, info_string):$/;"	m	class:NgramCounts
print_on_same_line	utils/nnet/gen_dct_mat.py	/^def print_on_same_line(text):$/;"	f
print_on_same_line	utils/nnet/gen_hamm_mat.py	/^def print_on_same_line(text):$/;"	f
print_on_same_line	utils/nnet/gen_splice.py	/^def print_on_same_line(text):$/;"	f
print_raw_counts	utils/lang/make_kn_lm.py	/^    def print_raw_counts(self, info_string):$/;"	m	class:NgramCounts
print_segment_stats	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def print_segment_stats(self):$/;"	m	class:UtteranceStats
print_segments	utils/segmentation.pl	/^sub print_segments {$/;"	s
print_states	steps/segmentation/internal/prepare_sad_graph.py	/^def print_states(args, file_handle):$/;"	f
print_usage	utils/parallel/pbs.pl	/^sub print_usage() {$/;"	s
print_usage	utils/parallel/queue.pl	/^sub print_usage() {$/;"	s
print_usage	utils/parallel/retry.pl	/^sub print_usage() {$/;"	s
print_usage	utils/parallel/slurm.pl	/^sub print_usage() {$/;"	s
print_usage	utils/pbs.pl	/^sub print_usage() {$/;"	s
print_usage	utils/queue.pl	/^sub print_usage() {$/;"	s
print_usage	utils/retry.pl	/^sub print_usage() {$/;"	s
print_usage	utils/slurm.pl	/^sub print_usage() {$/;"	s
prob	steps/chain/e2e/text_to_phones.py	/^        prob = args.between_silprob if i < len(word_trans) - 1 else args.edge_silprob$/;"	v
prob	steps/nnet3/chain/e2e/text_to_phones.py	/^        prob = args.between_silprob if i < len(word_trans) - 1 else args.edge_silprob$/;"	v
prob	utils/reverse_arpa.py	/^      prob = 0.0$/;"	v
prob	utils/reverse_arpa.py	/^    prob = float(entry[0])$/;"	v
prob	utils/reverse_arpa.py	/^    prob = ngrams[n-1][ngram]$/;"	v
process_args	steps/chain/e2e/train_e2e.py	/^def process_args(args):$/;"	f
process_args	steps/chain/train.py	/^def process_args(args):$/;"	f
process_args	steps/nnet3/chain/e2e/train_e2e.py	/^def process_args(args):$/;"	f
process_args	steps/nnet3/chain/train.py	/^def process_args(args):$/;"	f
process_args	steps/nnet3/train_dnn.py	/^def process_args(args):$/;"	f
process_args	steps/nnet3/train_raw_dnn.py	/^def process_args(args):$/;"	f
process_args	steps/nnet3/train_raw_rnn.py	/^def process_args(args):$/;"	f
process_args	steps/nnet3/train_rnn.py	/^def process_args(args):$/;"	f
process_data	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def process_data(args, oov_symbol, utterance_stats, word_stats):$/;"	f
process_label	steps/segmentation/internal/sad_to_segments.py	/^def process_label(text_label):$/;"	f
process_line	utils/lang/bpe/apply_bpe.py	/^    def process_line(self, line):$/;"	m	class:BPE
process_multilingual_egs	steps/nnet3/multilingual/allocate_multilingual_examples.py	/^def process_multilingual_egs(args):$/;"	f
process_music_annotations	steps/data/make_musan.py	/^def process_music_annotations(path):$/;"	f
pronunciation	steps/chain/e2e/text_to_phones.py	/^            pronunciation = copy.deepcopy(lexicon[word])$/;"	v
pronunciation	steps/chain/e2e/text_to_phones.py	/^            pronunciation = lexicon[oov_word]$/;"	v
pronunciation	steps/nnet3/chain/e2e/text_to_phones.py	/^            pronunciation = copy.deepcopy(lexicon[word])$/;"	v
pronunciation	steps/nnet3/chain/e2e/text_to_phones.py	/^            pronunciation = lexicon[oov_word]$/;"	v
prune_stats	utils/lang/bpe/learn_bpe.py	/^def prune_stats(stats, big_stats, threshold):$/;"	f
pwd	main.py	/^pwd = os.getcwd()$/;"	v
r	utils/reverse_arpa.py	/^  r = ind[0].split()$/;"	v
r_ngram	utils/reverse_arpa.py	/^      r_ngram = " ".join(words[1:1+x]) # shortened ngram with offset one$/;"	v
read	steps/cleanup/internal/tf_idf.py	/^    def read(self, file_handle):$/;"	m	class:IDFStats
read	steps/cleanup/internal/tf_idf.py	/^    def read(self, file_handle, ngram_order=None, idf_stats=None):$/;"	m	class:TFStats
read	steps/cleanup/internal/tf_idf.py	/^    def read(self, tf_idf_file):$/;"	m	class:TFIDF
read	steps/conf/parse_arpa_unigrams.py	/^  read = False$/;"	v
read_ali_ark	src/data_reader/kaldi_io.py	/^def read_ali_ark(file_or_fd):$/;"	f
read_all_key	src/data_reader/adv_kaldi_io.py	/^def read_all_key(file):$/;"	f
read_cnet_ark	src/data_reader/kaldi_io.py	/^def read_cnet_ark(file_or_fd):$/;"	f
read_cntime	src/data_reader/kaldi_io.py	/^def read_cntime(file_or_fd):$/;"	f
read_cntime_ark	src/data_reader/kaldi_io.py	/^def read_cntime_ark(file_or_fd):$/;"	f
read_component	steps/nnet3/report/convert_model.py	/^def read_component(s, pos):$/;"	f
read_ctm	steps/cleanup/internal/align_ctm_ref.py	/^def read_ctm(ctm_file, file_and_channel2reco=None):$/;"	f
read_ctm	utils/ctm/resolve_ctm_overlaps.py	/^def read_ctm(ctm_file, segments):$/;"	f
read_ctm_edits	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def read_ctm_edits(ctm_edits_file, segments):$/;"	f
read_float	steps/nnet3/report/convert_model.py	/^def read_float(s, pos):$/;"	f
read_generic	steps/nnet3/report/convert_model.py	/^def read_generic(s, pos, terminating_token, action_dict):$/;"	f
read_int	steps/nnet3/report/convert_model.py	/^def read_int(s, pos):$/;"	f
read_kaldi_datadir	utils/data/perturb_speed_to_allowed_lengths.py	/^def read_kaldi_datadir(dir):$/;"	f
read_kaldi_mapfile	utils/data/perturb_speed_to_allowed_lengths.py	/^def read_kaldi_mapfile(path):$/;"	f
read_kaldi_matrix	steps/libs/common.py	/^def read_kaldi_matrix(matrix_file):$/;"	f
read_key	src/data_reader/kaldi_io.py	/^def read_key(fd):$/;"	f
read_key	steps/cleanup/internal/tf_idf.py	/^def read_key(fd):$/;"	f
read_key	steps/libs/common.py	/^def read_key(fd):$/;"	f
read_key_label	src/data_reader/adv_kaldi_io.py	/^def read_key_label(file):$/;"	f
read_key_len	src/data_reader/adv_kaldi_io.py	/^def read_key_len(file):$/;"	f
read_lang	steps/cleanup/internal/get_non_scored_words.py	/^def read_lang(lang_dir):$/;"	f
read_left_context_phones	utils/lang/make_lexicon_fst.py	/^def read_left_context_phones(filename):$/;"	f
read_left_context_phones	utils/lang/make_lexicon_fst_silprob.py	/^def read_left_context_phones(filename):$/;"	f
read_lexiconp	utils/lang/make_lexicon_fst.py	/^def read_lexiconp(filename):$/;"	f
read_lexiconp	utils/lang/make_lexicon_fst_silprob.py	/^def read_lexiconp(filename):$/;"	f
read_lines	steps/nnet3/multilingual/allocate_multilingual_examples.py	/^def read_lines(file_handle, num_lines):$/;"	f
read_map	steps/cleanup/internal/retrieve_similar_docs.py	/^def read_map(file_handle, num_values_per_key=None,$/;"	f
read_mat	src/data_reader/kaldi_io.py	/^def read_mat(file_or_fd):$/;"	f
read_mat_ark	src/data_reader/kaldi_io.py	/^def read_mat_ark(file_or_fd):$/;"	f
read_mat_ark	steps/libs/common.py	/^def read_mat_ark(file_or_fd):$/;"	f
read_mat_key	src/data_reader/adv_kaldi_io.py	/^def read_mat_key(file, target_key):$/;"	f
read_mat_scp	src/data_reader/kaldi_io.py	/^def read_mat_scp(file_or_fd):$/;"	f
read_matrix	steps/nnet3/report/convert_model.py	/^def read_matrix(s, pos):$/;"	f
read_matrix_ascii	steps/libs/common.py	/^def read_matrix_ascii(file_or_fd):$/;"	f
read_model	steps/nnet3/report/convert_model.py	/^def read_model(filename):$/;"	f
read_n	utils/reverse_arpa.py	/^  read_n = int(r[1].strip())$/;"	v
read_next_token	steps/nnet3/report/convert_model.py	/^def read_next_token(s, pos):$/;"	f
read_non_scored_words	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def read_non_scored_words(non_scored_words_file):$/;"	f
read_nonterminals	utils/lang/grammar/augment_phones_txt.py	/^def read_nonterminals(filename):$/;"	f
read_nonterminals	utils/lang/grammar/augment_words_txt.py	/^def read_nonterminals(filename):$/;"	f
read_nonterminals	utils/lang/make_lexicon_fst.py	/^def read_nonterminals(filename):$/;"	f
read_nonterminals	utils/lang/make_lexicon_fst_silprob.py	/^def read_nonterminals(filename):$/;"	f
read_old_lm	utils/lang/limit_arpa_unk_history.py	/^def read_old_lm():$/;"	f
read_phones_txt	utils/lang/grammar/augment_phones_txt.py	/^def read_phones_txt(filename):$/;"	f
read_post	src/data_reader/kaldi_io.py	/^def read_post(file_or_fd):$/;"	f
read_post_ark	src/data_reader/kaldi_io.py	/^def read_post_ark(file_or_fd):$/;"	f
read_reco2num_frames_file	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^def read_reco2num_frames_file(reco2num_frames_file):$/;"	f
read_reco2utt_file	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^def read_reco2utt_file(reco2utt_file):$/;"	f
read_reco2vol	utils/data/internal/perturb_volume.py	/^def read_reco2vol(volumes_file):$/;"	f
read_segments	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def read_segments(segments_file):$/;"	f
read_segments	utils/ctm/resolve_ctm_overlaps.py	/^def read_segments(segments_file):$/;"	f
read_segments_as_bool_vec	src/data_reader/kaldi_io.py	/^def read_segments_as_bool_vec(segments_file):$/;"	f
read_segments_file	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^def read_segments_file(segments_file, reco2utt):$/;"	f
read_silprobs	utils/lang/make_lexicon_fst_silprob.py	/^def read_silprobs(filename):$/;"	f
read_targets_scp	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^def read_targets_scp(targets_scp, segments):$/;"	f
read_text	steps/cleanup/internal/align_ctm_ref.py	/^def read_text(text_file):$/;"	f
read_tfidf_ark	steps/cleanup/internal/tf_idf.py	/^def read_tfidf_ark(file_handle):$/;"	f
read_total_len	src/data_reader/adv_kaldi_io.py	/^def read_total_len(file):$/;"	f
read_vec_flt	src/data_reader/kaldi_io.py	/^def read_vec_flt(file_or_fd):$/;"	f
read_vec_flt_ark	src/data_reader/kaldi_io.py	/^def read_vec_flt_ark(file_or_fd):$/;"	f
read_vec_flt_scp	src/data_reader/kaldi_io.py	/^def read_vec_flt_scp(file_or_fd):$/;"	f
read_vec_int	src/data_reader/kaldi_io.py	/^def read_vec_int(file_or_fd):$/;"	f
read_vec_int_ark	src/data_reader/kaldi_io.py	/^def read_vec_int_ark(file_or_fd):$/;"	f
read_vector	steps/nnet3/report/convert_model.py	/^def read_vector(s, pos):$/;"	f
read_vocabulary	utils/lang/bpe/apply_bpe.py	/^def read_vocabulary(vocab_file, threshold):$/;"	f
read_words_txt	utils/lang/grammar/augment_words_txt.py	/^def read_words_txt(filename):$/;"	f
read_xconfig_file	steps/libs/nnet3/xconfig/parser.py	/^def read_xconfig_file(xconfig_filename, existing_layers=None):$/;"	f
realign	steps/libs/nnet3/train/frame_level_objf/common.py	/^def realign(dir, iter, feat_dir, lang, prev_egs_dir, cur_egs_dir,$/;"	f
recording_to_utt_indexes	utils/data/extend_segment_times.py	/^recording_to_utt_indexes = defaultdict(list)$/;"	v
recursive_split	utils/lang/bpe/apply_bpe.py	/^def recursive_split(segment, bpe_codes, vocab, separator, final=False):$/;"	f
ref	steps/conf/append_eval_to_ctm.py	/^    ref = f.readline()$/;"	v
ref_change_stats	steps/cleanup/internal/modify_ctm_edits.py	/^ref_change_stats = defaultdict(int)$/;"	v
relax_boundary_truncation	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def relax_boundary_truncation(self, min_segment_length,$/;"	m	class:Segment
remove	steps/nnet2/get_egs.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	steps/nnet2/train_discriminative.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	steps/nnet2/train_discriminative2.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	steps/nnet3/train_discriminative.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove	steps/online/nnet2/get_egs.sh	/^remove () { for x in $*; do [ -L $x ] && rm $(utils\/make_absolute.sh $x); rm $x; done }$/;"	f
remove_model	steps/libs/nnet3/train/common.py	/^def remove_model(nnet_dir, iter, num_iters, models_to_combine=None,$/;"	f
remove_nnet_egs	steps/libs/nnet3/train/common.py	/^def remove_nnet_egs(egs_dir):$/;"	f
remove_noise_only_segments	utils/segmentation.pl	/^sub remove_noise_only_segments {$/;"	s
repetition_stats	steps/cleanup/internal/modify_ctm_edits.py	/^repetition_stats = defaultdict(int)$/;"	v
replace_bracket_expressions_in_descriptor	steps/libs/nnet3/xconfig/utils.py	/^def replace_bracket_expressions_in_descriptor(descriptor_string,$/;"	f
replace_pair	utils/lang/bpe/learn_bpe.py	/^def replace_pair(pair, vocab, indices):$/;"	f
resolve_overlaps	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def resolve_overlaps(ctm_edits, segments):$/;"	f
resolve_overlaps	utils/ctm/resolve_ctm_overlaps.py	/^def resolve_overlaps(ctms, segments):$/;"	f
retrieve_weight	src/v4_plot.py	/^def retrieve_weight(args, model, device, eval_loader, eval_scp, eval_utt2label, plot_wd, rnn=False):$/;"	f
rev_ngram	utils/reverse_arpa.py	/^    rev_ngram = rstr.replace("<s>","<temp>").replace("<\/s>","<s>").replace("<temp>","<\/s>")$/;"	v
revprob	utils/reverse_arpa.py	/^          revprob = revprob + offset # add <s> weight to bigrams starting with <s>$/;"	v
revprob	utils/reverse_arpa.py	/^          revprob = sentprob # apply <s> weight from forward model$/;"	v
revprob	utils/reverse_arpa.py	/^      revprob = revprob + p_l$/;"	v
revprob	utils/reverse_arpa.py	/^      revprob = revprob + prob[1]$/;"	v
revprob	utils/reverse_arpa.py	/^      revprob = revprob - p_r$/;"	v
revprob	utils/reverse_arpa.py	/^    revprob = prob[0]$/;"	v
right_context	steps/nnet3/make_tdnn_configs.py	/^right_context = 0$/;"	v
right_context	steps/nnet3/make_tdnn_configs.py	/^right_context = max(0, right_context)$/;"	v
rjustify	utils/scoring/wer_per_utt_details.pl	/^sub rjustify {$/;"	s
rnn	feature_plot.py	/^rnn = False # rnn$/;"	v
rnn	main.py	/^rnn = False  # rnn$/;"	v
rnn_cell	steps/tfrnnlm/vanilla_rnnlm.py	/^    def rnn_cell():$/;"	f	function:RnnlmModel.__init__
rnnlm_producer	steps/tfrnnlm/reader.py	/^def rnnlm_producer(raw_data, batch_size, num_steps, name=None):$/;"	f
rnnlm_raw_data	steps/tfrnnlm/reader.py	/^def rnnlm_raw_data(data_path, vocab_path):$/;"	f
round_robin	steps/nnet3/get_degs.sh	/^function round_robin {$/;"	f
rstr	utils/reverse_arpa.py	/^    rstr = " ".join(reversed(words))$/;"	v
rtl_set	utils/lang/bpe/bidi.py	/^rtl_set =  set(chr(i) for i in range(sys.maxunicode)$/;"	v
run	steps/cleanup/internal/align_ctm_ref.py	/^def run(args):$/;"	f
run	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def run(args):$/;"	f
run	steps/cleanup/internal/retrieve_similar_docs.py	/^def run(args):$/;"	f
run	steps/cleanup/internal/stitch_documents.py	/^def run(args):$/;"	f
run	steps/segmentation/internal/arc_info_to_targets.py	/^def run(args):$/;"	f
run	steps/segmentation/internal/get_default_targets_for_out_of_segments.py	/^def run(args):$/;"	f
run	steps/segmentation/internal/get_transform_probs_mat.py	/^def run(args):$/;"	f
run	steps/segmentation/internal/merge_segment_targets_to_recording.py	/^def run(args):$/;"	f
run	steps/segmentation/internal/merge_targets.py	/^def run(args):$/;"	f
run	steps/segmentation/internal/resample_targets.py	/^def run(args):$/;"	f
run	steps/segmentation/internal/sad_to_segments.py	/^def run(args):$/;"	f
run	utils/ctm/resolve_ctm_overlaps.py	/^def run(args):$/;"	f
run	utils/data/get_uniform_subsegments.py	/^def run(args):$/;"	f
run	utils/data/internal/perturb_volume.py	/^def run(args):$/;"	f
run_epoch	steps/tfrnnlm/lstm.py	/^def run_epoch(session, model, eval_op=None, verbose=False):$/;"	f
run_epoch	steps/tfrnnlm/lstm_fast.py	/^def run_epoch(session, model, eval_op=None, verbose=False):$/;"	f
run_epoch	steps/tfrnnlm/vanilla_rnnlm.py	/^def run_epoch(session, model, eval_op=None, verbose=False):$/;"	f
run_name	feature_plot.py	/^run_name = "pred" + time.strftime("-%y-%m-%d_%h_%m")$/;"	v
run_name	main.py	/^run_name = "attention" + time.strftime("-%Y-%m-%d_%H_%M_%S")$/;"	v
run_name	predict_only.py	/^run_name = "pred" + time.strftime("-%y-%m-%d_%h_%m")$/;"	v
s	utils/eps2disambig.pl	/^  s:^(\\d+\\s+\\d+\\s+)\\<eps\\>(\\s+):$1#0$2:;$/;"	l
sclite_tag	steps/conf/append_prf_to_ctm.py	/^    sclite_tag = prf_dict[('%s,%s'%(f,chan)).lower()][float(beg)]$/;"	v
sclite_tag	steps/conf/append_prf_to_ctm.py	/^  sclite_tag = 'U' $/;"	v
scores	src/v4_prediction.py	/^def scores(args, model, device, eval_loader, eval_scp, eval_utt2label, rnn=False):$/;"	f
scoring_function	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def scoring_function(segment):$/;"	f	function:merge_segments
segment	utils/lang/bpe/apply_bpe.py	/^    def segment(self, sentence):$/;"	m	class:BPE
segment_total_length	steps/cleanup/internal/segment_ctm_edits.py	/^segment_total_length = defaultdict(int)$/;"	v
segments	steps/nnet3/dot/descriptor_parser.py	/^        segments = IdentifyNestedSegments(string)$/;"	v
select_best	main.py	/^select_best = 'eer'  # eer or val$/;"	v
select_n	utils/subset_scp.pl	/^sub select_n {$/;"	s
send_mail	steps/libs/common.py	/^def send_mail(message, subject, email_id):$/;"	f
sentprob	utils/reverse_arpa.py	/^      sentprob = prob$/;"	v
sentprob	utils/reverse_arpa.py	/^sentprob = 0.0 # sentence begin unigram$/;"	v
set_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_configs(self, key_to_value, all_layers):$/;"	m	class:XconfigLayerBase
set_default_configs	steps/libs/nnet3/xconfig/attention.py	/^    def set_default_configs(self):$/;"	m	class:XconfigAttentionLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigAffineLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigBasicLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigExistingLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFixedAffineLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigIdctLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigInputLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLayerBase
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigOutputLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigSpecAugmentLayer
set_default_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigTrivialOutputLayer
set_default_configs	steps/libs/nnet3/xconfig/composite_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPrefinalLayer
set_default_configs	steps/libs/nnet3/xconfig/composite_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigTdnnfLayer
set_default_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:ChannelAverageLayer
set_default_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:XconfigConvLayer
set_default_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:XconfigRes2Block
set_default_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_default_configs(self):$/;"	m	class:XconfigResBlock
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastGruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastNormOpgruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastNormPgruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastOpgruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastPgruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigGruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigNormOpgruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigNormPgruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigOpgruLayer
set_default_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPgruLayer
set_default_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastLstmLayer
set_default_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigFastLstmpLayer
set_default_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLstmLayer
set_default_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLstmbLayer
set_default_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLstmpLayer
set_default_configs	steps/libs/nnet3/xconfig/stats_layer.py	/^    def set_default_configs(self):$/;"	m	class:XconfigStatsLayer
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigAffineComponent
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigBatchnormComponent
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigCombineFeatureMapsLayer
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigDeltaLayer
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigDimRangeComponent
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigLinearComponent
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigNoOpComponent
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPerElementOffsetComponent
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigPerElementScaleComponent
set_default_configs	steps/libs/nnet3/xconfig/trivial_layers.py	/^    def set_default_configs(self):$/;"	m	class:XconfigRenormComponent
set_derived_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigAffineLayer
set_derived_configs	steps/libs/nnet3/xconfig/basic_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLayerBase
set_derived_configs	steps/libs/nnet3/xconfig/composite_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigPrefinalLayer
set_derived_configs	steps/libs/nnet3/xconfig/composite_layers.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigTdnnfLayer
set_derived_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:ChannelAverageLayer
set_derived_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigConvLayer
set_derived_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigRes2Block
set_derived_configs	steps/libs/nnet3/xconfig/convolution.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigResBlock
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastGruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastNormOpgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastNormPgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastOpgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastPgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigGruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigNormOpgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigNormPgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigOpgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/gru.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigPgruLayer
set_derived_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastLstmLayer
set_derived_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigFastLstmpLayer
set_derived_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLstmLayer
set_derived_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLstmbLayer
set_derived_configs	steps/libs/nnet3/xconfig/lstm.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigLstmpLayer
set_derived_configs	steps/libs/nnet3/xconfig/stats_layer.py	/^    def set_derived_configs(self):$/;"	m	class:XconfigStatsLayer
set_silence_proportion	utils/segmentation.pl	/^sub set_silence_proportion {$/;"	s
set_target_objf_change	steps/nnet2/retrain_fast.sh	/^function set_target_objf_change {$/;"	f
set_target_objf_change	steps/nnet2/train_pnorm_bottleneck_fast.sh	/^function set_target_objf_change {$/;"	f
set_target_objf_change	steps/nnet2/train_pnorm_fast.sh	/^function set_target_objf_change {$/;"	f
set_to_fail	utils/validate_dict_dir.pl	/^sub set_to_fail { $exit = 1; $success = 0; }$/;"	s
setup_logs	src/v1_logger.py	/^def setup_logs(save_dir, run_name):$/;"	f
shared	steps/chain/e2e/compute_biphone_stats.py	/^    shared = phone_to_shard_phone[phone] if args.shared_phones else phone$/;"	v
shared	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^    shared = phone_to_shard_phone[phone] if args.shared_phones else phone$/;"	v
shared_pair	steps/chain/e2e/compute_biphone_stats.py	/^        shared_pair = ((phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
shared_pair	steps/nnet3/chain/e2e/compute_biphone_stats.py	/^        shared_pair = ((phone_to_shard_phone[pair[0]], phone_to_shard_phone[pair[1]])$/;"	v
should_do_shrinkage	steps/libs/nnet3/train/common.py	/^def should_do_shrinkage(iter, model_file, shrink_saturation_threshold,$/;"	f
should_remove_frame	steps/segmentation/internal/merge_targets.py	/^def should_remove_frame(row, dim):$/;"	f
shuffle	steps/nnet3/get_degs.sh	/^function shuffle {$/;"	f
sil	steps/chain/e2e/text_to_phones.py	/^sil = open(join(args.langdir,$/;"	v
sil	steps/nnet3/chain/e2e/text_to_phones.py	/^sil = open(join(args.langdir,$/;"	v
silence_phones	steps/chain/gen_topo.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/chain/gen_topo2.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/chain/gen_topo3.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/chain/gen_topo4.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/chain/gen_topo5.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/chain/gen_topo_orig.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/nnet3/chain/gen_topo.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/nnet3/chain/gen_topo2.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/nnet3/chain/gen_topo3.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/nnet3/chain/gen_topo4.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/nnet3/chain/gen_topo5.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
silence_phones	steps/nnet3/chain/gen_topo_orig.py	/^silence_phones = [ int(x) for x in args.silence_phones.split(":") ]$/;"	v
similarity_score_function	steps/cleanup/internal/align_ctm_ref.py	/^    def similarity_score_function(x, y):$/;"	f	function:run
slice	feat_slicing.py	/^def slice(mat, M):$/;"	f
slice	src/data_reader/feat_slicing.py	/^def slice(mat, M):$/;"	f
smart_open	steps/libs/common.py	/^class smart_open(object):$/;"	c
smith_waterman_alignment	steps/cleanup/internal/align_ctm_ref.py	/^def smith_waterman_alignment(ref, hyp, similarity_score_function,$/;"	f
smooth_presoftmax_prior_scale_vector	steps/libs/nnet3/train/common.py	/^def smooth_presoftmax_prior_scale_vector(pdf_counts,$/;"	f
smooth_probability_distribution	steps/data/reverberate_data_dir.py	/^def smooth_probability_distribution(set_list, smoothing_weight=0.0, target_sum=1.0):$/;"	f
snapshot	src/v1_training.py	/^def snapshot(dir_path, run_name, is_best, state):$/;"	f
snapshot	src/v7_training.py	/^def snapshot(dir_path, run_name, is_best, state):$/;"	f
snapshot	src/v8_training.py	/^def snapshot(dir_path, run_name, is_best, state):$/;"	f
softmax_affine_opts	utils/nnet/make_blstm_proto.py	/^softmax_affine_opts=""$/;"	v
softmax_affine_opts	utils/nnet/make_lstm_proto.py	/^softmax_affine_opts=""$/;"	v
spk	utils/data/internal/choose_utts_to_combine.py	/^                        spk = this_spk$/;"	v
spk	utils/data/internal/choose_utts_to_combine.py	/^                spk = None$/;"	v
spk	utils/data/internal/choose_utts_to_combine.py	/^                spk = spk_list[0]$/;"	v
spk	utils/data/internal/choose_utts_to_combine.py	/^    spk = a[0]$/;"	v
spk2dur	utils/data/internal/choose_utts_to_combine.py	/^                spk2dur = defaultdict(float)$/;"	v
spk2utt	utils/data/internal/choose_utts_to_combine.py	/^spk2utt = []$/;"	v
spk2utt	utils/data/internal/modify_speaker_info.py	/^spk2utt = defaultdict(lambda: [])$/;"	v
spk_list	utils/data/internal/choose_utts_to_combine.py	/^            spk_list = [ utt2spk[utt] for utt in utt_group ]$/;"	v
splice	utils/nnet/gen_dct_mat.py	/^splice=int(options.splice)$/;"	v
splice	utils/nnet/gen_hamm_mat.py	/^splice=int(options.splice)$/;"	v
splice	utils/nnet/gen_splice.py	/^splice=int(options.splice)$/;"	v
splice_array	steps/nnet3/make_tdnn_configs.py	/^splice_array = []$/;"	v
splice_step	utils/nnet/gen_splice.py	/^splice_step=int(options.splice_step)$/;"	v
splice_vec	utils/nnet/gen_splice.py	/^splice_vec = list(range(-splice*splice_step, splice*splice_step+1, splice_step))$/;"	v
splices	steps/nnet3/make_tdnn_configs.py	/^        splices = [ ('Offset(input, {0})'.format(n) if n != 0 else 'input') for n in splice_array[l-1] ]$/;"	v
splices	steps/nnet3/make_tdnn_configs.py	/^        splices = [ ('Offset(renorm{0}, {1})'.format(l-1, n) if n !=0 else 'renorm{0}'.format(l-1))$/;"	v
split1	steps/nnet3/make_tdnn_configs.py	/^split1 = args.splice_indexes.split();  # we already checked the string is nonempty.$/;"	v
split2	steps/nnet3/make_tdnn_configs.py	/^        split2 = string.split(",")$/;"	v
split_hundreds	utils/summarize_logs.pl	/^sub split_hundreds { # split list of filenames into groups of 100.$/;"	s
split_hundreds	utils/summarize_warnings.pl	/^sub split_hundreds { # split list of filenames into groups of 100.$/;"	s
split_layer_name	steps/libs/nnet3/xconfig/utils.py	/^def split_layer_name(full_layer_name):$/;"	f
split_lines	utils/lang/internal/modify_unk_pron.py	/^split_lines = []$/;"	v
split_long_segments	utils/segmentation.pl	/^sub split_long_segments {$/;"	s
start_identifier	steps/nnet3/dot/descriptor_parser.py	/^start_identifier = "("$/;"	v
start_padding	utils/data/extend_segment_times.py	/^    start_padding = args.start_padding$/;"	v
start_time	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def start_time(self):$/;"	m	class:Segment
start_time	utils/data/extend_segment_times.py	/^        start_time = float(start_time)$/;"	v
str	steps/libs/nnet3/xconfig/basic_layers.py	/^    def str(self):$/;"	m	class:XconfigLayerBase
str	steps/libs/nnet3/xconfig/utils.py	/^    def str(self):$/;"	m	class:Descriptor
str_to_bool	steps/libs/common.py	/^def str_to_bool(value):$/;"	f
strings	steps/nnet3/dot/descriptor_parser.py	/^    strings= [$/;"	v
strip_chars	utils/lang/make_kn_lm.py	/^strip_chars = " \\t\\r\\n"$/;"	v
t1	steps/conf/append_prf_to_ctm.py	/^    t1 = t[t_pos:].split(' ',1)[0] # get 1st token at 't_pos'$/;"	v
t_pos	steps/conf/append_prf_to_ctm.py	/^  t_pos = 0 # position in the 't' string,$/;"	v
temperature	feature_plot.py	/^temperature = 1$/;"	v
temperature	main.py	/^temperature = 2$/;"	v
temperature	predict_only.py	/^temperature = 10 $/;"	v
tensor_cnn_frame	feat_slicing.py	/^def tensor_cnn_frame(mat, M):$/;"	f
tensor_cnn_frame	src/data_reader/feat_slicing.py	/^def tensor_cnn_frame(mat, M):$/;"	f
tensor_cnn_utt	feat_slicing.py	/^def tensor_cnn_utt(mat, max_len):$/;"	f
tensor_cnn_utt	src/data_reader/feat_slicing.py	/^def tensor_cnn_utt(mat, max_len):$/;"	f
tensor_cnngru	feat_slicing.py	/^def tensor_cnngru(mat):$/;"	f
tensor_cnngru	src/data_reader/feat_slicing.py	/^def tensor_cnngru(mat):$/;"	f
test	steps/nnet3/report/convert_model.py	/^def test():$/;"	f
test_alignment	steps/cleanup/internal/align_ctm_ref.py	/^def test_alignment(align_full_hyp):$/;"	f
test_get_current_num_jobs	steps/libs/nnet3/train/common.py	/^    def test_get_current_num_jobs(self):$/;"	m	class:SelfTest
test_halve_minibatch_size_str	steps/libs/nnet3/train/common.py	/^    def test_halve_minibatch_size_str(self):$/;"	m	class:SelfTest
test_key	src/data_reader/test_kaldi_io.py	/^test_key = 'M0001-T_1000027'$/;"	v
test_layers	steps/libs/nnet3/xconfig/basic_layers.py	/^def test_layers():$/;"	f
test_library	steps/libs/nnet3/xconfig/utils.py	/^def test_library():$/;"	f
test_scp	src/data_reader/test_kaldi_io.py	/^test_scp = '\/export\/b19\/jlai\/cstr\/spoof\/baseline\/v1\/data\/train_cqcc\/feats.scp'$/;"	v
test_utt2label	src/data_reader/test_kaldi_io.py	/^test_utt2label = '\/export\/b19\/jlai\/cstr\/spoof\/baseline\/v1\/data\/train_cqcc\/utt2label'$/;"	v
test_validate_chunk_width	steps/libs/nnet3/train/common.py	/^    def test_validate_chunk_width(self):$/;"	m	class:SelfTest
test_validate_minibatch_size_str	steps/libs/nnet3/train/common.py	/^    def test_validate_minibatch_size_str(self):$/;"	m	class:SelfTest
text	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def text(self, oov_symbol, eps_symbol="<eps_symbol>"):$/;"	m	class:Segment
text	steps/diagnostic/analyze_phone_length_stats.py	/^        text = boundary_to_text[boundary_type]  # e.g. 'At utterance begin'.$/;"	v
text	utils/reverse_arpa.py	/^      text=file.readline()$/;"	v
text	utils/reverse_arpa.py	/^    text=file.readline()$/;"	v
text	utils/reverse_arpa.py	/^  text=file.readline()$/;"	v
text	utils/reverse_arpa.py	/^text=file.readline()$/;"	v
text_words	steps/conf/prepare_word_categories.py	/^  text_words = [ l.split()[1:] for l in f ]$/;"	v
text_words	steps/conf/prepare_word_categories.py	/^text_words = list(itertools.chain.from_iterable(text_words))$/;"	v
this_count	steps/diagnostic/analyze_phone_length_stats.py	/^            this_count = sum([ l * c for l,c in phone_lengths['all'][p].items() ])$/;"	v
this_end_time	utils/data/extend_segment_times.py	/^        this_end_time = this_entries[n][3]$/;"	v
this_entries	utils/data/extend_segment_times.py	/^    this_entries = sorted([ entries[x] for x in utt_indexes ],$/;"	v
this_group_of_lines	steps/cleanup/make_biased_lms.py	/^        this_group_of_lines = []$/;"	v
this_group_of_lines	steps/cleanup/make_biased_lms.py	/^this_group_of_lines = []  # An array of strings, one per line$/;"	v
this_loss	steps/nnet3/get_successful_models.py	/^                this_loss = float(mat_obj.groups()[0])$/;"	v
this_loss	steps/nnet3/get_successful_models.py	/^        this_loss = -100000$/;"	v
this_ngrams	utils/reverse_arpa.py	/^  this_ngrams={} # stores all read ngrams$/;"	v
this_spk	utils/data/internal/modify_speaker_info.py	/^            this_spk = format_string % (spk, i + 1)$/;"	v
this_spk	utils/data/internal/modify_speaker_info.py	/^        this_spk = format_string % (i + 1)$/;"	v
this_split_line	utils/lang/internal/modify_unk_pron.py	/^    this_split_line = line.split()$/;"	v
timeContext	utils/nnet/gen_dct_mat.py	/^timeContext=2*splice+1$/;"	v
timeContext	utils/nnet/gen_hamm_mat.py	/^timeContext=2*splice+1$/;"	v
time_to_string	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def time_to_string(time, frame_length):$/;"	f
tmpdir	steps/nnet3/convert_nnet2_to_nnet3.py	/^tmpdir = ""$/;"	v
to_kaldi_dur_str	utils/data/perturb_speed_to_allowed_lengths.py	/^    def to_kaldi_dur_str(self):$/;"	m	class:Utterance
to_kaldi_utt_str	utils/data/perturb_speed_to_allowed_lengths.py	/^    def to_kaldi_utt_str(self):$/;"	m	class:Utterance
to_kaldi_wave_str	utils/data/perturb_speed_to_allowed_lengths.py	/^    def to_kaldi_wave_str(self):$/;"	m	class:Utterance
to_str	steps/segmentation/internal/sad_to_segments.py	/^def to_str(segment):$/;"	f
token_to_string	steps/nnet3/convert_nnet2_to_nnet3.py	/^def token_to_string(token):$/;"	f
tokenize_descriptor	steps/libs/nnet3/xconfig/utils.py	/^def tokenize_descriptor(descriptor_string,$/;"	f
tot_num_phones	steps/diagnostic/analyze_phone_length_stats.py	/^    tot_num_phones = total_phones[boundary_type]$/;"	v
total_frames	steps/diagnostic/analyze_lattice_depth_stats.py	/^total_frames = 0$/;"	v
total_frames	steps/diagnostic/analyze_phone_length_stats.py	/^total_frames = defaultdict(int)$/;"	v
total_internal_optsil_frames	steps/diagnostic/analyze_phone_length_stats.py	/^    total_internal_optsil_frames = sum([ float(l * c) for l,c in internal_opt_sil_phone_lengths.items() ])$/;"	v
total_length_of_utterances	steps/cleanup/internal/segment_ctm_edits.py	/^total_length_of_utterances = 0$/;"	v
total_optsil_frames	steps/diagnostic/analyze_phone_length_stats.py	/^    total_optsil_frames = sum([ float(l * c)$/;"	v
total_phones	steps/diagnostic/analyze_phone_length_stats.py	/^total_phones = defaultdict(int)$/;"	v
tra	steps/conf/convert_ctm_to_tra.py	/^tra = dict()$/;"	v
train	src/v1_training.py	/^def train(args, model, device, train_loader, optimizer, epoch, rnn=False):$/;"	f
train	src/v7_training.py	/^def train(args, model, device, train_loader, optimizer, epoch):$/;"	f
train	src/v8_training.py	/^def train(args, model, device, train_loader, optimizer, epoch):$/;"	f
train	steps/chain/e2e/train_e2e.py	/^def train(args, run_opts):$/;"	f
train	steps/chain/train.py	/^def train(args, run_opts):$/;"	f
train	steps/nnet3/chain/e2e/train_e2e.py	/^def train(args, run_opts):$/;"	f
train	steps/nnet3/chain/train.py	/^def train(args, run_opts):$/;"	f
train	steps/nnet3/train_dnn.py	/^def train(args, run_opts):$/;"	f
train	steps/nnet3/train_raw_dnn.py	/^def train(args, run_opts):$/;"	f
train	steps/nnet3/train_raw_rnn.py	/^def train(args, run_opts):$/;"	f
train	steps/nnet3/train_rnn.py	/^def train(args, run_opts):$/;"	f
train_new_models	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def train_new_models(dir, iter, srand, num_jobs,$/;"	f
train_new_models	steps/libs/nnet3/train/frame_level_objf/common.py	/^def train_new_models(dir, iter, srand, num_jobs,$/;"	f
train_one_iteration	steps/libs/nnet3/train/chain_objf/acoustic_model.py	/^def train_one_iteration(dir, iter, srand, egs_dir,$/;"	f
train_one_iteration	steps/libs/nnet3/train/frame_level_objf/common.py	/^def train_one_iteration(dir, iter, srand, egs_dir,$/;"	f
train_op	steps/tfrnnlm/lstm.py	/^  def train_op(self):$/;"	m	class:RnnlmModel
train_op	steps/tfrnnlm/lstm_fast.py	/^  def train_op(self):$/;"	m	class:RnnlmModel
train_op	steps/tfrnnlm/vanilla_rnnlm.py	/^  def train_op(self):$/;"	m	class:RnnlmModel
train_scp	src/data_reader/test_data_loader.py	/^train_scp = '\/export\/b19\/jlai\/cstr\/spoof\/model\/src\/data_reader\/cqcc\/train_cqcc_spectrogram_cmvn_tensor.scp'$/;"	v
train_utt2label	src/data_reader/test_data_loader.py	/^train_utt2label = '\/export\/b19\/jlai\/cstr\/spoof\/model\/src\/data_reader\/data\/utt2label\/train_utt2label'$/;"	v
training_generator	src/data_reader/test_data_loader.py	/^training_generator = data.DataLoader(training_set, **params)$/;"	v
truncate_len	feat_slicing.py	/^    truncate_len = max_len$/;"	v
truncate_len	src/data_reader/feat_slicing.py	/^    truncate_len = max_len$/;"	v
uint16_to_float	src/data_reader/kaldi_io.py	/^    def uint16_to_float(value, min, range):$/;"	f	function:_read_compressed_mat
uint8_to_float_v2	src/data_reader/kaldi_io.py	/^    def uint8_to_float_v2(vec, p0, p25, p75, p100):$/;"	f	function:_read_compressed_mat
universal_phone	steps/diagnostic/analyze_lattice_depth_stats.py	/^        universal_phone = -1$/;"	v
unk_index	utils/lang/internal/modify_unk_pron.py	/^        unk_index = len(split_lines)$/;"	v
unk_index	utils/lang/internal/modify_unk_pron.py	/^unk_index = -1$/;"	v
update_pair_statistics	utils/lang/bpe/learn_bpe.py	/^def update_pair_statistics(pair, changed, stats, indices):$/;"	f
usage	steps/conf/prepare_calibration_data.py	/^usage = "%prog [opts] ctm word-filter word-length unigrams depth-per-frame-ascii.ark word-categories"$/;"	v
usage	steps/conf/prepare_word_categories.py	/^usage = "%prog [opts] words.txt ctm category_mapping"$/;"	v
usage	utils/nnet/make_blstm_proto.py	/^usage="%prog [options] <feat-dim> <num-leaves> >nnet-proto-file"$/;"	v
usage	utils/nnet/make_cnn_proto.py	/^usage="%prog [options] <feat-dim> <num-leaves> <num-hidden-layers> <num-hidden-neurons>  >nnet-proto-file"$/;"	v
usage	utils/nnet/make_lstm_proto.py	/^usage="%prog [options] <feat-dim> <num-leaves> >nnet-proto-file"$/;"	v
usage	utils/nnet/make_nnet_proto.py	/^usage="%prog [options] <feat-dim> <num-leaves> <num-hid-layers> <num-hid-neurons> >nnet-proto-file"$/;"	v
use_presoftmax_prior_scale	steps/nnet3/make_tdnn_configs.py	/^    use_presoftmax_prior_scale = False$/;"	v
use_presoftmax_prior_scale	steps/nnet3/make_tdnn_configs.py	/^    use_presoftmax_prior_scale = True$/;"	v
utf8_logical_to_visual	utils/lang/bpe/bidi.py	/^def utf8_logical_to_visual(text):$/;"	f
utf8_visual_to_logical	utils/lang/bpe/bidi.py	/^def utf8_visual_to_logical(text):$/;"	f
utt2dur	utils/data/internal/choose_utts_to_combine.py	/^utt2dur = dict()$/;"	v
utt2dur	utils/data/internal/modify_speaker_info.py	/^    utt2dur = dict()$/;"	v
utt2spk	utils/data/internal/choose_utts_to_combine.py	/^utt2spk = dict()$/;"	v
utt2spk	utils/data/internal/modify_speaker_info.py	/^utt2spk = dict()$/;"	v
utt_eer	src/v2_validation.py	/^def utt_eer(scores, utt2len, utt2label, key_list, threshold):$/;"	f
utt_group	utils/data/internal/choose_utts_to_combine.py	/^            utt_group = utt_groups[i]$/;"	v
utt_group_names	utils/data/internal/choose_utts_to_combine.py	/^utt_group_names = [ group[0] if len(group)==1 else "{0}-comb{1}".format(group[0], len(group))$/;"	v
utt_groups	utils/data/internal/choose_utts_to_combine.py	/^utt_groups = GetUtteranceGroups(args.min_duration, spk2utt, utt2dur)$/;"	v
utt_name	utils/data/internal/choose_utts_to_combine.py	/^            utt_name = utt_group_names[i]$/;"	v
utt_scores	src/v1_validation.py	/^def utt_scores(scores, scp, utt2label):$/;"	f
utt_scores	src/v3_validation.py	/^def utt_scores(scores, scp, utt2label):$/;"	f
utt_scores	src/v4_validation.py	/^def utt_scores(scores, scp, utt2label):$/;"	f
utt_scores	src/v7_validation.py	/^def utt_scores(scores, scp, utt2label):$/;"	f
utt_scores	src/v8_validation.py	/^def utt_scores(scores, scp, utt2label):$/;"	f
utterance_map_file	steps/cleanup/make_biased_lms.py	/^    utterance_map_file = open(args.utterance_map, "w", encoding="utf-8")$/;"	v
uttlists	utils/data/internal/modify_speaker_info.py	/^        uttlists = SplitIntoGroups(spk2utt[spk])$/;"	v
uttlists	utils/data/internal/modify_speaker_info.py	/^    uttlists = SplitIntoGroups(sorted(utt2spk.keys()))$/;"	v
utts	utils/data/internal/choose_utts_to_combine.py	/^    utts = a[1:]$/;"	v
validate_chunk_width	steps/libs/nnet3/train/common.py	/^def validate_chunk_width(chunk_width):$/;"	f
validate_minibatch_size_str	steps/libs/nnet3/train/common.py	/^def validate_minibatch_size_str(minibatch_size_str):$/;"	f
validate_range_str	steps/libs/nnet3/train/common.py	/^def validate_range_str(range_str):$/;"	f
validate_utf8_whitespaces	utils/lang/validate_lang.pl	/^sub validate_utf8_whitespaces {$/;"	s
validate_utf8_whitespaces	utils/validate_dict_dir.pl	/^sub validate_utf8_whitespaces {$/;"	s
validate_utf8_whitespaces	utils/validate_lang.pl	/^sub validate_utf8_whitespaces {$/;"	s
validate_utf8_whitespaces	utils/validate_text.pl	/^sub validate_utf8_whitespaces {$/;"	s
validation	src/v1_validation.py	/^def validation(args, model, device, train_loader, val_loader, val_scp, val_utt2label):$/;"	f
validation	src/v2_validation.py	/^def validation(args, model, device, train_loader, val_loader, val_scp, val_utt2label):$/;"	f
validation	src/v3_validation.py	/^def validation(args, model, device, train_loader, train_scp, train_utt2label, val_loader, val_scp, val_utt2label):$/;"	f
validation	src/v4_validation.py	/^def validation(args, model, device, val_loader, val_scp, val_utt2label, rnn=False):$/;"	f
validation	src/v7_validation.py	/^def validation(args, model, device, val_loader, val_scp, val_utt2label):$/;"	f
validation	src/v8_validation.py	/^def validation(args, model, device, val_loader, val_scp, val_utt2label):$/;"	f
validation_generator	src/data_reader/test_data_loader.py	/^validation_generator = data.DataLoader(validation_set, **params)$/;"	v
validation_generator2	src/data_reader/test_data_loader.py	/^validation_generator2 = data.DataLoader(validation_set, **params)$/;"	v
validation_scp	src/data_reader/test_data_loader.py	/^validation_scp   = '\/export\/b19\/jlai\/cstr\/spoof\/model\/src\/data_reader\/spec\/dev_spec_cmvn_tensor.scp'$/;"	v
validation_utt2label	src/data_reader/test_data_loader.py	/^validation_utt2label = '\/export\/b19\/jlai\/cstr\/spoof\/model\/src\/data_reader\/data\/utt2label\/dev_utt2label'$/;"	v
var_file	steps/nnet2/make_multisplice_configs.py	/^    var_file = open("{0}\/vars".format(params.output_dir), "w")$/;"	v
vector	utils/nnet/make_cnn_proto.py	/^  vector = ''$/;"	v
verbose_level	steps/cleanup/internal/align_ctm_ref.py	/^verbose_level = 0$/;"	v
verify_egs_dir	steps/libs/nnet3/train/common.py	/^def verify_egs_dir(egs_dir, feat_dim, ivector_dim, ivector_extractor_id,$/;"	f
vocab	utils/filt.py	/^vocab=set()$/;"	v
vocabulary	utils/lang/bpe/apply_bpe.py	/^        vocabulary = None$/;"	v
vocabulary	utils/lang/bpe/apply_bpe.py	/^        vocabulary = read_vocabulary(args.vocabulary, args.vocabulary_threshold)$/;"	v
wait_file	src/data_reader/path.sh	/^wait_file() {$/;"	f
wait_for_background_commands	steps/libs/common.py	/^def wait_for_background_commands():$/;"	f
wer	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def wer(ctm_edit_lines):$/;"	f
wer	steps/cleanup/internal/segment_ctm_edits_mild.py	/^    def wer(self):$/;"	m	class:SegmentStats
whitespace	utils/lang/bpe/prepend_words.py	/^whitespace = re.compile("[ \\t]+")$/;"	v
whitespace	utils/lang/make_kn_lm.py	/^whitespace = re.compile("[ \\t]+")$/;"	v
winfuns	CQCC_v1.0/CQT_toolbox_2013/winfuns.m	/^function g = winfuns(name,x,L)$/;"	f
word	steps/chain/e2e/text_to_phones.py	/^        word = word_trans[i]$/;"	v
word	steps/nnet3/chain/e2e/text_to_phones.py	/^        word = word_trans[i]$/;"	v
word_count_pair	steps/cleanup/internal/segment_ctm_edits.py	/^word_count_pair = defaultdict(lambda: [0, 0])$/;"	v
word_counts	steps/conf/prepare_word_categories.py	/^word_counts = dict()$/;"	v
word_feats	steps/conf/prepare_calibration_data.py	/^word_feats = [ l.split(None,4) for l in open(word_feats_file) ]$/;"	v
word_filter	steps/conf/prepare_calibration_data.py	/^word_filter = { wrd_id:bool(int(filter)) for (wrd,wrd_id,filter,length,other_feats) in word_feats }$/;"	v
word_id	steps/conf/prepare_word_categories.py	/^  word_id = [ l.split() for l in f ]$/;"	v
word_id_cat	steps/conf/prepare_word_categories.py	/^word_id_cat=[]$/;"	v
word_length	steps/conf/prepare_calibration_data.py	/^word_length = { wrd_id:float(length) for (wrd,wrd_id,filter,length,other_feats) in word_feats }$/;"	v
word_trans	steps/chain/e2e/text_to_phones.py	/^    word_trans = line[1:]   # word-level transcription$/;"	v
word_trans	steps/nnet3/chain/e2e/text_to_phones.py	/^    word_trans = line[1:]   # word-level transcription$/;"	v
words	steps/conf/parse_arpa_unigrams.py	/^words = [ l.split() for l in open(words_txt) ]$/;"	v
words	utils/lang/bpe/prepend_words.py	/^    words = whitespace.split(line.strip(" \\t\\r\\n"))$/;"	v
words	utils/lang/make_kn_lm.py	/^    def words(self):$/;"	m	class:CountsForHistory
words	utils/reverse_arpa.py	/^      words = entry[1:]$/;"	v
words	utils/reverse_arpa.py	/^      words = entry[1:n+1]$/;"	v
words	utils/reverse_arpa.py	/^    words = ngram.split()$/;"	v
words_unigram	steps/conf/parse_arpa_unigrams.py	/^words_unigram = [[wrd, id, (wrd_log10[wrd] if wrd in wrd_log10 else -99)] for wrd,id in words ]$/;"	v
wrd_1_of_k	steps/conf/prepare_calibration_data.py	/^    wrd_1_of_k = [0]*wrd_cat_num; $/;"	v
wrd_cat_num	steps/conf/prepare_calibration_data.py	/^wrd_cat_num = max(wrd_to_cat.values()) + 1$/;"	v
wrd_log10	steps/conf/parse_arpa_unigrams.py	/^wrd_log10 = dict()$/;"	v
wrd_to_cat	steps/conf/prepare_calibration_data.py	/^wrd_to_cat = [ l.split() for l in open(word_categories_file) ]$/;"	v
wrd_to_cat	steps/conf/prepare_calibration_data.py	/^wrd_to_cat = { wrd_id:int(category) for wrd,wrd_id,category in wrd_to_cat }$/;"	v
write	steps/cleanup/internal/tf_idf.py	/^    def write(self, file_handle):$/;"	m	class:IDFStats
write	steps/cleanup/internal/tf_idf.py	/^    def write(self, tf_idf_file):$/;"	m	class:TFIDF
write	steps/segmentation/internal/sad_to_segments.py	/^    def write(self, key, file_handle):$/;"	m	class:Segmentation
write_config	steps/nnet3/convert_nnet2_to_nnet3.py	/^    def write_config(self, filename):$/;"	m	class:Nnet3Model
write_config_file	steps/nnet3/xconfig_to_config.py	/^def write_config_file(config_file_out, all_layers):$/;"	f
write_config_files	steps/nnet3/xconfig_to_configs.py	/^def write_config_files(config_dir, all_layers):$/;"	f
write_ctm	utils/ctm/resolve_ctm_overlaps.py	/^def write_ctm(ctm_lines, out_file):$/;"	f
write_ctm_edits	steps/cleanup/internal/resolve_ctm_edits_overlaps.py	/^def write_ctm_edits(ctm_edit_lines, out_file):$/;"	f
write_dict_to_file	steps/data/reverberate_data_dir.py	/^def write_dict_to_file(dict, file_name):$/;"	f
write_expanded_xconfig_files	steps/nnet3/xconfig_to_configs.py	/^def write_expanded_xconfig_files(config_dir, all_layers):$/;"	f
write_fst	utils/lang/make_lexicon_fst_silprob.py	/^def write_fst(lexicon, silprobs, sil_phone, sil_disambig,$/;"	f
write_fst_no_silence	utils/lang/make_lexicon_fst.py	/^def write_fst_no_silence(lexicon, nonterminals=None, left_context_phones=None):$/;"	f
write_fst_no_silence	utils/lang/make_subword_lexicon_fst.py	/^def write_fst_no_silence(lexicon, position_dependent, separator):$/;"	f
write_fst_with_silence	utils/lang/make_lexicon_fst.py	/^def write_fst_with_silence(lexicon, sil_prob, sil_phone, sil_disambig,$/;"	f
write_fst_with_silence	utils/lang/make_subword_lexicon_fst.py	/^def write_fst_with_silence(lexicon, sil_phone, sil_prob, sil_disambig, position_dependent, separator):$/;"	f
write_idct_matrix	steps/libs/common.py	/^def write_idct_matrix(feat_dim, cepstral_lifter, file_path):$/;"	f
write_kaldi	feat_slicing.py	/^def write_kaldi(orig_feat_scp, ark_scp_output, max_len):$/;"	f
write_kaldi	src/data_reader/feat_slicing.py	/^def write_kaldi(orig_feat_scp, ark_scp_output, max_len):$/;"	f
write_kaldi_matrix	steps/libs/common.py	/^def write_kaldi_matrix(output_file, matrix):$/;"	f
write_mat	src/data_reader/kaldi_io.py	/^def write_mat(file_or_fd, m, key=''):$/;"	f
write_matrix_ascii	steps/libs/common.py	/^def write_matrix_ascii(file_or_fd, mat, key=None):$/;"	f
write_model	steps/nnet3/convert_nnet2_to_nnet3.py	/^    def write_model(self, model, binary="true"):$/;"	m	class:Nnet3Model
write_new_lm	utils/lang/limit_arpa_unk_history.py	/^def write_new_lm(new_lm_lines, ngram_counts, ngram_diffs):$/;"	f
write_nonterminal_arcs	utils/lang/make_lexicon_fst.py	/^def write_nonterminal_arcs(start_state, loop_state, next_state,$/;"	f
write_nonterminal_arcs	utils/lang/make_lexicon_fst_silprob.py	/^def write_nonterminal_arcs(start_state, sil_state, non_sil_state,$/;"	f
write_phones_txt	utils/lang/grammar/augment_phones_txt.py	/^def write_phones_txt(orig_lines, highest_numbered_symbol, nonterminals, filename):$/;"	f
write_position_dependent_lexicon	utils/lang/make_position_dependent_subword_lexicon.py	/^def write_position_dependent_lexicon(lexiconp, separator):$/;"	f
write_segments_for_utterance	steps/cleanup/internal/segment_ctm_edits_mild.py	/^def write_segments_for_utterance(text_output_handle, segments_output_handle,$/;"	f
write_tfidf_from_stats	steps/cleanup/internal/tf_idf.py	/^def write_tfidf_from_stats($/;"	f
write_vec_flt	src/data_reader/kaldi_io.py	/^def write_vec_flt(file_or_fd, v, key=''):$/;"	f
write_vec_int	src/data_reader/kaldi_io.py	/^def write_vec_int(file_or_fd, v, key=''):$/;"	f
write_wd	feat_slicing.py	/^    write_wd = 'data_slicing\/'$/;"	v
write_wd	src/data_reader/feat_slicing.py	/^    write_wd = 'cqcc\/'$/;"	v
write_words_txt	utils/lang/grammar/augment_words_txt.py	/^def write_words_txt(orig_lines, highest_numbered_symbol, nonterminals, filename):$/;"	f
write_words_txt	utils/lang/make_lexicon_fst.py	/^def write_words_txt(orig_lines, highest_numbered_symbol, nonterminals, filename):$/;"	f
xconfig_line_to_object	steps/libs/nnet3/xconfig/parser.py	/^def xconfig_line_to_object(config_line, prev_layers = None):$/;"	f
